<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="929.128px" preserveAspectRatio="none" style="width:800px;height:929px;background:#FFFFFF;" version="1.1" viewBox="0 0 800 929" width="800.4947px" zoomAndPan="magnify"><defs><filter height="300%" id="f1kfsafwwqbonp" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="1.9789734075448362"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="3.9579468150896724" dy="3.9579468150896724" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[7a25074348cef7ab2883f0ca1a94cf57]
class WriteBatch--><rect codeLine="4" fill="#FEFECE" filter="url(#f1kfsafwwqbonp)" height="118.7384" id="WriteBatch" style="stroke:#A80036;stroke-width:1.4842300556586272;" width="333.457" x="6.9264" y="6.9264"/><ellipse cx="131.3544" cy="22.7582" fill="#ADD1B2" rx="10.8844" ry="10.8844" style="stroke:#A80036;stroke-width:0.9894867037724181;"/><path d="M133.7464,27.8887 Q133.2391,28.1496 132.6811,28.2801 Q132.123,28.4105 131.507,28.4105 Q129.3184,28.4105 128.1661,26.9683 Q127.0138,25.5261 127.0138,22.8012 Q127.0138,20.069 128.1661,18.6268 Q129.3184,17.1846 131.507,17.1846 Q132.123,17.1846 132.6883,17.3151 Q133.2536,17.4455 133.7464,17.7064 L133.7464,20.0835 Q133.1956,19.5762 132.6775,19.3406 Q132.1593,19.1051 131.6085,19.1051 Q130.4344,19.1051 129.8366,20.0364 Q129.2387,20.9676 129.2387,22.8012 Q129.2387,24.6275 129.8366,25.5588 Q130.4344,26.49 131.6085,26.49 Q132.1593,26.49 132.6775,26.2545 Q133.1956,26.019 133.7464,25.5117 Z " fill="#000000"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="76.1905" x="151.6388" y="27.953">WriteBatch</text><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="7.9159" x2="339.3939" y1="38.59" y2="38.59"/><rect fill="none" height="5.9369" style="stroke:#C82930;stroke-width:0.9894867037724181;" width="5.9369" x="14.8423" y="46.5059"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="99.9382" x="26.7161" y="56.6481">std::string rep_</text><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="7.9159" x2="339.3939" y1="64.3166" y2="64.3166"/><ellipse cx="17.8108" cy="75.201" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="307.7304" x="26.7161" y="82.3748">void Put(const Slice&amp; key, const Slice&amp; value)</text><ellipse cx="17.8108" cy="93.0118" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="198.8868" x="26.7161" y="100.1855">void Delete(const Slice&amp; key)</text><ellipse cx="17.8108" cy="110.8225" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="252.3191" x="26.7161" y="117.9963">Status Iterate(Handler* handler) const</text><!--MD5=[caad25907589e7bebe38762f5741c36d]
class Slice--><rect codeLine="11" fill="#FEFECE" filter="url(#f1kfsafwwqbonp)" height="225.603" id="Slice" style="stroke:#A80036;stroke-width:1.4842300556586272;" width="217.6871" x="29.1899" y="204.8237"/><ellipse cx="117.9963" cy="220.6555" fill="#ADD1B2" rx="10.8844" ry="10.8844" style="stroke:#A80036;stroke-width:0.9894867037724181;"/><path d="M120.3884,225.7861 Q119.881,226.047 119.323,226.1774 Q118.765,226.3079 118.149,226.3079 Q115.9603,226.3079 114.808,224.8657 Q113.6557,223.4235 113.6557,220.6985 Q113.6557,217.9663 114.808,216.5241 Q115.9603,215.0819 118.149,215.0819 Q118.765,215.0819 119.3303,215.2124 Q119.8955,215.3428 120.3884,215.6037 L120.3884,217.9808 Q119.8376,217.4735 119.3194,217.238 Q118.8012,217.0025 118.2504,217.0025 Q117.0764,217.0025 116.4785,217.9337 Q115.8806,218.865 115.8806,220.6985 Q115.8806,222.5248 116.4785,223.4561 Q117.0764,224.3874 118.2504,224.3874 Q118.8012,224.3874 119.3194,224.1518 Q119.8376,223.9163 120.3884,223.409 Z " fill="#000000"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="31.6636" x="138.2808" y="225.8503">Slice</text><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="30.1793" x2="245.8874" y1="236.4873" y2="236.4873"/><rect fill="none" height="5.9369" style="stroke:#C82930;stroke-width:0.9894867037724181;" width="5.9369" x="37.1058" y="244.4032"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="122.6964" x="48.9796" y="254.5455">const char* data_;</text><rect fill="none" height="5.9369" style="stroke:#C82930;stroke-width:0.9894867037724181;" width="5.9369" x="37.1058" y="262.214"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="80.1484" x="48.9796" y="272.3562">size_t size_;</text><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="30.1793" x2="245.8874" y1="280.0247" y2="280.0247"/><ellipse cx="40.0742" cy="290.9091" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="191.9604" x="48.9796" y="298.0829">Slice(const char* d, size_t n)</text><ellipse cx="40.0742" cy="308.7199" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="172.1707" x="48.9796" y="315.8936">Slice(const std::string&amp; s)</text><ellipse cx="40.0742" cy="326.5306" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="131.6017" x="48.9796" y="333.7044">Slice(const char* s)</text><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="0" x="52.9375" y="351.5152"/><ellipse cx="40.0742" cy="362.1521" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="163.2653" x="48.9796" y="369.3259">const char* data() const</text><ellipse cx="40.0742" cy="379.9629" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="120.7174" x="48.9796" y="387.1367">size_t size() const</text><ellipse cx="40.0742" cy="397.7737" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="171.1812" x="48.9796" y="404.9474">const char* begin() const</text><ellipse cx="40.0742" cy="415.5844" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="158.3179" x="48.9796" y="422.7582">const char* end() const</text><!--MD5=[45063835744fad562903f14625363af5]
class WriteBatch::Handler--><rect codeLine="25" fill="#FEFECE" filter="url(#f1kfsafwwqbonp)" height="83.1169" id="WriteBatch::Handler" style="stroke:#A80036;stroke-width:1.4842300556586272;" width="404.7001" x="282.0037" y="276.0668"/><ellipse cx="412.3686" cy="291.8986" fill="#ADD1B2" rx="10.8844" ry="10.8844" style="stroke:#A80036;stroke-width:0.9894867037724181;"/><path d="M414.7606,297.0291 Q414.2533,297.29 413.6953,297.4205 Q413.1373,297.5509 412.5213,297.5509 Q410.3326,297.5509 409.1803,296.1087 Q408.028,294.6665 408.028,291.9416 Q408.028,289.2094 409.1803,287.7672 Q410.3326,286.325 412.5213,286.325 Q413.1373,286.325 413.7026,286.4554 Q414.2678,286.5859 414.7606,286.8468 L414.7606,289.2239 Q414.2099,288.7166 413.6917,288.481 Q413.1735,288.2455 412.6227,288.2455 Q411.4487,288.2455 410.8508,289.1768 Q410.2529,290.108 410.2529,291.9416 Q410.2529,293.7679 410.8508,294.6991 Q411.4487,295.6304 412.6227,295.6304 Q413.1735,295.6304 413.6917,295.3949 Q414.2099,295.1593 414.7606,294.652 Z " fill="#000000"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="135.5597" x="432.6531" y="297.0934">WriteBatch::Handler</text><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="282.9932" x2="685.7143" y1="307.7304" y2="307.7304"/><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="282.9932" x2="685.7143" y1="315.6463" y2="315.6463"/><ellipse cx="292.8881" cy="326.5306" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="378.9734" x="301.7934" y="333.7044">virtual void Put(const Slice&amp; key, const Slice&amp; value) = 0</text><ellipse cx="292.8881" cy="344.3414" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="270.1299" x="301.7934" y="351.5152">virtual void Delete(const Slice&amp; key) = 0</text><!--MD5=[5fcbf8ac3e338ff2dfcdf8f4cf65e32a]
class MemTableInserter--><rect codeLine="30" fill="#FEFECE" filter="url(#f1kfsafwwqbonp)" height="118.7384" id="MemTableInserter" style="stroke:#A80036;stroke-width:1.4842300556586272;" width="333.457" x="317.6252" y="509.5857"/><ellipse cx="420.2845" cy="525.4174" fill="#ADD1B2" rx="10.8844" ry="10.8844" style="stroke:#A80036;stroke-width:0.9894867037724181;"/><path d="M422.6765,530.548 Q422.1692,530.8089 421.6112,530.9393 Q421.0532,531.0698 420.4372,531.0698 Q418.2485,531.0698 417.0962,529.6276 Q415.9439,528.1854 415.9439,525.4604 Q415.9439,522.7282 417.0962,521.286 Q418.2485,519.8438 420.4372,519.8438 Q421.0532,519.8438 421.6184,519.9743 Q422.1837,520.1047 422.6765,520.3656 L422.6765,522.7427 Q422.1258,522.2354 421.6076,521.9999 Q421.0894,521.7644 420.5386,521.7644 Q419.3646,521.7644 418.7667,522.6956 Q418.1688,523.6269 418.1688,525.4604 Q418.1688,527.2867 418.7667,528.218 Q419.3646,529.1493 420.5386,529.1493 Q421.0894,529.1493 421.6076,528.9137 Q422.1258,528.6782 422.6765,528.1709 Z " fill="#000000"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="119.7279" x="440.569" y="530.6122">MemTableInserter</text><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="318.6147" x2="650.0928" y1="541.2492" y2="541.2492"/><ellipse cx="328.5096" cy="552.1336" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;fill:none;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="193.9394" x="337.415" y="559.3074">SequenceNumber sequence_</text><ellipse cx="328.5096" cy="569.9443" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;fill:none;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="122.6964" x="337.415" y="577.1181">MemTable* mem_</text><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="318.6147" x2="650.0928" y1="584.7866" y2="584.7866"/><ellipse cx="328.5096" cy="595.671" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="307.7304" x="337.415" y="602.8448">void Put(const Slice&amp; key, const Slice&amp; value)</text><ellipse cx="328.5096" cy="613.4818" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="198.8868" x="337.415" y="620.6555">void Delete(const Slice&amp; key)</text><!--MD5=[12aee951d6f83ae12f3cc7ad6eee3943]
class MemTable--><rect codeLine="37" fill="#FEFECE" filter="url(#f1kfsafwwqbonp)" height="207.7922" id="MemTable" style="stroke:#A80036;stroke-width:1.4842300556586272;" width="605.5659" x="181.5708" y="707.483"/><ellipse cx="445.0216" cy="723.3148" fill="#ADD1B2" rx="10.8844" ry="10.8844" style="stroke:#A80036;stroke-width:0.9894867037724181;"/><path d="M447.4137,728.4453 Q446.9064,728.7062 446.3484,728.8367 Q445.7903,728.9671 445.1743,728.9671 Q442.9857,728.9671 441.8334,727.5249 Q440.681,726.0827 440.681,723.3578 Q440.681,720.6256 441.8334,719.1834 Q442.9857,717.7412 445.1743,717.7412 Q445.7903,717.7412 446.3556,717.8716 Q446.9209,718.0021 447.4137,718.263 L447.4137,720.6401 Q446.8629,720.1328 446.3447,719.8972 Q445.8266,719.6617 445.2758,719.6617 Q444.1017,719.6617 443.5038,720.593 Q442.9059,721.5242 442.9059,723.3578 Q442.9059,725.1841 443.5038,726.1153 Q444.1017,727.0466 445.2758,727.0466 Q445.8266,727.0466 446.3447,726.8111 Q446.8629,726.5755 447.4137,726.0682 Z " fill="#000000"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="70.2536" x="465.3061" y="728.5096">MemTable</text><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="182.5603" x2="786.1472" y1="739.1466" y2="739.1466"/><rect fill="none" height="5.9369" style="stroke:#C82930;stroke-width:0.9894867037724181;" width="5.9369" x="189.4867" y="747.0625"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="199.8763" x="201.3605" y="757.2047">KeyComparator comparator_;</text><rect fill="none" height="5.9369" style="stroke:#C82930;stroke-width:0.9894867037724181;" width="5.9369" x="189.4867" y="764.8732"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="57.3902" x="201.3605" y="775.0155">int refs_;</text><rect fill="none" height="5.9369" style="stroke:#C82930;stroke-width:0.9894867037724181;" width="5.9369" x="189.4867" y="782.684"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="91.0328" x="201.3605" y="792.8262">Arena arena_;</text><rect fill="none" height="5.9369" style="stroke:#C82930;stroke-width:0.9894867037724181;" width="5.9369" x="189.4867" y="800.4947"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="85.0959" x="201.3605" y="810.637">Table table_;</text><line style="stroke:#A80036;stroke-width:1.4842300556586272;" x1="182.5603" x2="786.1472" y1="818.3055" y2="818.3055"/><ellipse cx="192.4552" cy="829.1899" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="67.2851" x="201.3605" y="836.3636">void Ref()</text><ellipse cx="192.4552" cy="847.0006" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="81.1379" x="201.3605" y="854.1744">void Unref()</text><ellipse cx="192.4552" cy="864.8114" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="149.4125" x="201.3605" y="871.9852">Iterator* NewIterator()</text><ellipse cx="192.4552" cy="882.6221" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="579.8392" x="201.3605" y="889.7959">void Add(SequenceNumber seq, ValueType type, const Slice&amp; key, const Slice&amp; value)</text><ellipse cx="192.4552" cy="900.4329" fill="#84BE84" rx="2.9685" ry="2.9685" style="stroke:#038048;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="411.6265" x="201.3605" y="907.6067">bool Get(const LookupKey&amp; key, std::string* value, Status* s)</text><!--MD5=[d9ddfbf7b5ef145e83f372496e21a761]
link WriteBatch to WriteBatch::Handler--><path codeLine="50" d="M246.8967,126.0606 C304.3067,172.141 382.7038,235.0625 433.4348,275.7699 " fill="none" id="WriteBatch-WriteBatch::Handler" style="stroke:#A80036;stroke-width:0.9894867037724181;stroke-dasharray:7.0,7.0;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="29.6846" x="302.1694" y="170.4391">关联</text><!--MD5=[3b83d618d5b6288dd0e4d6df39e6facb]
link WriteBatch to Slice--><path codeLine="51" d="M165.2542,126.0606 C161.9097,149.5312 157.932,177.3754 154.0631,204.4181 " fill="none" id="WriteBatch-Slice" style="stroke:#A80036;stroke-width:0.9894867037724181;stroke-dasharray:7.0,7.0;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="29.6846" x="161.0686" y="170.4391">关联</text><!--MD5=[184ed0122894b4c1e008621d3188bc92]
reverse link WriteBatch::Handler to MemTableInserter--><path codeLine="52" d="M484.3537,380.6456 C484.3537,420.0074 484.3537,470.6395 484.3537,509.3383 " fill="none" id="WriteBatch::Handler-backto-MemTableInserter" style="stroke:#A80036;stroke-width:0.9894867037724181;"/><polygon fill="none" points="477.4273,380.7941,484.3537,361.0043,491.2801,380.7941,477.4273,380.7941" style="stroke:#A80036;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="64.3166" x="485.3432" y="475.201">继承/实现</text><!--MD5=[23ca552bb7cea83613a17431d4fe5082]
reverse link MemTableInserter to MemTable--><path codeLine="53" d="M484.3537,643.0674 C484.3537,663.2826 484.3537,685.5955 484.3537,707.1763 " fill="none" id="MemTableInserter-backto-MemTable" style="stroke:#A80036;stroke-width:0.9894867037724181;"/><polygon fill="#A80036" points="484.3537,630.2635,480.3958,636.2004,484.3537,642.1373,488.3117,636.2004,484.3537,630.2635" style="stroke:#A80036;stroke-width:0.9894867037724181;"/><text fill="#000000" font-family="Albert Sans" font-size="14.8423" lengthAdjust="spacing" textLength="29.6846" x="485.3432" y="673.0983">组合</text><!--MD5=[8374cb4a590dc2fc390a2ac43c58251a]
@startuml
skinparam defaultFontName "Albert Sans"
skinparam defaultFontSize 15
scale max 800 width
class WriteBatch {
+ void Put(const Slice& key, const Slice& value)
+ void Delete(const Slice& key)
+ Status Iterate(Handler* handler) const
- std::string rep_
}

class Slice {
+ Slice(const char* d, size_t n)
+ Slice(const std::string& s)
+ Slice(const char* s)

+ const char* data() const
+ size_t size() const
+ const char* begin() const
+ const char* end() const

- const char* data_;  
- size_t size_;
}

class WriteBatch::Handler {
+ virtual void Put(const Slice& key, const Slice& value) = 0
+ virtual void Delete(const Slice& key) = 0
}

class MemTableInserter {
+ void Put(const Slice& key, const Slice& value)
+ void Delete(const Slice& key)
+ SequenceNumber sequence_
+ MemTable* mem_
}

class MemTable {
+ void Ref()
+ void Unref()
+ Iterator* NewIterator()
+ void Add(SequenceNumber seq, ValueType type, const Slice& key, const Slice& value)
+ bool Get(const LookupKey& key, std::string* value, Status* s)

- KeyComparator comparator_;  
- int refs_;  
- Arena arena_;  
- Table table_;
}

WriteBatch .. WriteBatch::Handler: 关联
WriteBatch .. Slice: 关联
WriteBatch::Handler <|- - MemTableInserter: 继承/实现
MemTableInserter *- - MemTable: 组合
@enduml

PlantUML version 1.2021.12(Wed Oct 06 00:01:58 CST 2021)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>