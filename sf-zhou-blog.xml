<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>SF-Zhou's Blog</title>
    <link>https://sf-zhou.github.io/</link>
    <description></description>
    <generator>site rss maker</generator>
    <language>zh</language>
    <lastBuildDate>2024-11-14T18:09:05</lastBuildDate>
     
     <item>
      <title>Rust Future &amp; Pin</title>
      <link>https://sf-zhou.github.io/rust/rust_future_and_pin.html</link>
      <pubDate>2024.10.17</pubDate>
      <description>Rust 异步编程中，Future 和 Pin 及其相关的概念是比较让人困惑的。本文试图阐述为什么需要这些设计。</description>
     </item>
     <item>
      <title>Rust 2024 Return Position Impl Trait 的变化</title>
      <link>https://sf-zhou.github.io/rust/changes_to_rpit_in_rust_2024.html</link>
      <pubDate>2024.10.11</pubDate>
      <description>一个月前，Rust 官方发布了一篇博客 Changes to impl Trait in Rust 2024，介绍了 Return Position Impl Trait (RPIT) 在使用和语法上的变化。新的设计对简化异步编程十分有用，故简述一下。</description>
     </item>
     <item>
      <title>Rust RDMA 编程「四、收发控制」</title>
      <link>https://sf-zhou.github.io/rdma/rust_rdma_programming_04.html</link>
      <pubDate>2024.07.31</pubDate>
      <description>RDMA 编程中，常用的通信操作有 Read/Write 和 Send/Recv。前者是单向操作，即发起端可以直接读写远端的内存，不需要远端的 CPU 参与；后者是双向操作，发起端 Send 需要搭配远端 Recv，类似 TCP 通信。Read/Write 使用上会更简单，但在发起操作前需要知道远端内存的地址，所以正常情况下无法单独使用，一般需要搭配 Send/Recv 实现的控制流，才能完成 Read/Write 实现的数据流。</description>
     </item>
     <item>
      <title>Rust RDMA 编程「三、对象封装」</title>
      <link>https://sf-zhou.github.io/rdma/rust_rdma_programming_03.html</link>
      <pubDate>2024.07.30</pubDate>
      <description>系列的上一篇中讲述了如何对 libibverbs 库进行绑定。后续开发过程中笔者意识到真正需要的 API 接口其实是有限的，所以我决定精简接口绑定的代码，build.rs 如下：</description>
     </item>
     <item>
      <title>Rust 二进制序列化</title>
      <link>https://sf-zhou.github.io/rust/rust_binary_serialization.html</link>
      <pubDate>2024.07.19</pubDate>
      <description>最近在做 Rust RDMA RPC 框架，需要一套二进制序列化库。因为对 Rust 编程中的范型和宏不是太熟悉，所以刚好自己做一套用以练手。项目 repo 是 SF-Zhou/derse，本文简述一下该序列化库的设计方案。</description>
     </item>
     <item>
      <title>Rust RPC Async 接口探索</title>
      <link>https://sf-zhou.github.io/rust/rust_rpc_async.html</link>
      <pubDate>2024.06.17</pubDate>
      <description>最近在做 Rust RDMA 的通信库，RDMA 建立通信时需要两端交换信息，常规的方式是依赖 Socket 或者 RMDA CM。我打算用前者，另外因为 RDMA 通信库最终暴露给用户的接口类似于 RPC 框架，所以打算自己实现一套 Rust RPC ，同时支持 TCP 和 RDMA。在设计 RPC 接口时遇到了一些问题，这里整理记录下来。</description>
     </item>
     <item>
      <title>Rust RDMA 编程「二、接口绑定」</title>
      <link>https://sf-zhou.github.io/rdma/rust_rdma_programming_02.html</link>
      <pubDate>2024.05.24</pubDate>
      <description>libibverbs 是一个 API 库，使应用程序可以在用户态访问 InfiniBand 硬件。它的源码可以在 rdma-core 里找到，对外提供的是 C 接口。Linux 系统一般不需要下载源码自行编译，例如 Debian 系可以通过 sudo apt install libibverbs-dev 直接安装，安装完成后头文件默认在 /usr/include/infiniband/verbs.h。</description>
     </item>
     <item>
      <title>Rust RDMA 编程「一、基础概览」</title>
      <link>https://sf-zhou.github.io/rdma/rust_rdma_programming_01.html</link>
      <pubDate>2024.05.17</pubDate>
      <description>最近计划深入学习下 RDMA 编程，并且使用 Rust 构建一套 RDMA 通信库和 RPC 框架，同时将学习和编程的过程持久化到博客中。本篇是第一篇，也将作为系列的概览。</description>
     </item>
     <item>
      <title>在 CMake C++ 环境中引入 Rust</title>
      <link>https://sf-zhou.github.io/rust/link_rust_in_cmake_cpp_env.html</link>
      <pubDate>2024.03.23</pubDate>
      <description>最近一直在写 Rust，并且希望在当前的 C++ 项目中使用 Rust 来实现一些新功能，计划像忒修斯之船一样逐步替换现有的 C++ 模块。折腾了一下，发现 CMake 项目引入 Rust 还是比较简单的。TLDR，点击此处访问样例，按 CI 步骤编译非常简单。</description>
     </item>
     <item>
      <title>io_uring 网络编程</title>
      <link>https://sf-zhou.github.io/linux/io_uring_network_programming.html</link>
      <pubDate>2024.02.07</pubDate>
      <description>最近工作之余，尝试使用 io_uring 进行网络编程。大体计划是先实现一套 Rust 版的 liburing 库，然后在这套库上构建一个 RPC 框架，最后在这个 RPC 框架上写点服务。截止目前，还是非常看好 io_uring 在网络编程上的应用的，相较于 epoll + sync read/write 可以实现更高的性能、更简单的编码、更少的内存复制。本文简单记录一下遇到的一些小问题和解决方案。</description>
     </item>
     <item>
      <title>Clang 编译隐藏参数：GCC 的版本</title>
      <link>https://sf-zhou.github.io/programming/clang_select_gcc_toolchain.html</link>
      <pubDate>2023.10.19</pubDate>
      <description>最近在调研 Redpanda，并且尝试将它移动到公司的内网环境下编译，中间踩了不少坑。Redpanda 对新工具新特性的使用上相对激进，而它提供的编译脚本并没有考虑到 C++ 编译环境的复杂性。我在 Ubuntu 23.10 环境下经过“简单”适配最终可以顺利编译完成，但在 Ubuntu 22.04 LTS 下却始终会产生一个 static_assert 静态检查错误。两个系统版本中均使用同一个版本的 clang-16，最终只有一个能编译成功，十分令人困惑。</description>
     </item>
     <item>
      <title>C++ 静态反射与序列化</title>
      <link>https://sf-zhou.github.io/programming/cpp_static_reflection.html</link>
      <pubDate>2022.11.16</pubDate>
      <description>最近使用 FlatBuffers 作为 RPC 的序列化协议时，遇到一些问题：</description>
     </item>
     <item>
      <title>单 Epoll 多线程 IO 模型</title>
      <link>https://sf-zhou.github.io/linux/single_epoll_multi_workers.html</link>
      <pubDate>2022.07.24</pubDate>
      <description>最近在使用 Folly 的协程做 RPC 框架，遇到一些问题：</description>
     </item>
     <item>
      <title>Folly Coroutines Cancellation 的实现</title>
      <link>https://sf-zhou.github.io/coroutine/folly_coro_cancellation.html</link>
      <pubDate>2022.07.04</pubDate>
      <description>最近在使用 Folly 的协程做 RPC 框架，学习一下它的协程 Cancellation 实现。先举个例子，假设 RPC 框架中使用 co_await 监听端口上的新连接，要如何实现优雅退出？</description>
     </item>
     <item>
      <title>在 Apple M1 平台搭建 Ubuntu 开发环境</title>
      <link>https://sf-zhou.github.io/productivity/ubuntu_env_on_apple_m1.html</link>
      <pubDate>2022.06.22</pubDate>
      <description>去年年底笔者更新了自己的开发设备，换成了 Apple M1 芯片的 MacBook，偶尔做开发的时候还是会因为环境问题不太方便。所以希望在这台笔记本上搭建一套 Ubuntu 的开发环境。因为可能会有内核开发相关的需求，所以没有使用 Docker，而是选择了 Ubuntu 的发行商 Canonical 开发的 Multipass。安装步骤如下：</description>
     </item>
     <item>
      <title>MacBook 键盘效率工具推荐</title>
      <link>https://sf-zhou.github.io/productivity/macbook_keyboard_tools.html</link>
      <pubDate>2022.01.23</pubDate>
      <description>上一台 MacBook 是 2016 年底购买的，如今廉颇老矣力不从心了。前两天挂到了闲鱼上以 4000 的价格出掉了，然后下单了 MacBook Pro 14 低配。给新机器做了一次初始化，顺便分享下笔者日常离不开的几个键盘效率工具。</description>
     </item>
     <item>
      <title>Kernel Module 内存问题排查</title>
      <link>https://sf-zhou.github.io/linux/kernel_memory_usage_troubleshooting.html</link>
      <pubDate>2022.01.11</pubDate>
      <description>最近修复了一个 Kernel Module 内存占用高且不释放的问题，学习了一下内核态应用内存问题排查的一些工具和方法，记录一下。</description>
     </item>
     <item>
      <title>C++ TLS 触发的栈溢出</title>
      <link>https://sf-zhou.github.io/programming/thread_local_memory.html</link>
      <pubDate>2021.06.21</pubDate>
      <description>先看一段代码，猜猜 Linux 下编译后执行会发生什么（编译参数 -pthread -O2 -std=c++11，在线执行）：</description>
     </item>
     <item>
      <title>Robin Hood Hashing 源码分析</title>
      <link>https://sf-zhou.github.io/programming/robin_hood_hashing.html</link>
      <pubDate>2021.05.21</pubDate>
      <description>从 C++11 开始，STL 会提供哈希表 std::unordered_map 的实现，用起来确实很方便，不过性能上就差强人意了。robin_hood::unordered_map 作为 std::unordered_map 的替代品，提供了与标准库中一致的接口，同时带来 2 到 3 倍的性能提升，着实让人心动。笔者年前尝试使用该哈希表，但由于其内部的 Bug 导致低概率的抛出异常，不得已又退回使用标准库。今年 3 月底的时候其作者修复了该 Bug，笔者也第一时间测试使用，并上线到现网环境，截止目前无任何故障。安全起见，笔者分析了该哈希表的具体实现，分析的代码版本为 3.11.1，目前也没有发现潜在的安全隐患。依笔者之见，Robin Hood 高性能的秘诀是开放寻址、平坦化和限制冲突。</description>
     </item>
     <item>
      <title>再探 C++20 协程</title>
      <link>https://sf-zhou.github.io/coroutine/cpp_20_explore_coroutines.html</link>
      <pubDate>2021.04.29</pubDate>
      <description>距上一次初探 C++20 协程近一年了，对 C++20 的无栈协程方案有了一些新的认识，写在这里。</description>
     </item>
     <item>
      <title>Tokio 源码分析「三、运行时 Runtime」</title>
      <link>https://sf-zhou.github.io/tokio/tokio_03_runtime.html</link>
      <pubDate>2021.04.25</pubDate>
      <description>Tokio 的核心是一套 M:N 的协程 Runtime，下层通过 Rust 协程和 Mio 驱动，支撑上层的 HTTP / RPC 应用。本篇开始分析 Runtime，代码版本 v1.5.0。</description>
     </item>
     <item>
      <title>bRPC 源码分析「五、请求处理」</title>
      <link>https://sf-zhou.github.io/brpc/brpc_05_request.html</link>
      <pubDate>2021.03.19</pubDate>
      <description>bRPC 中同步的 RPC 发出请求后，会等待请求对应的 bthread_id 等待回复。bthread_id 是一个 64 位的标识符，可以附带一个指针数据，支持加锁、等待、范围检查，并且通过 ResourcePool 的版本规避了 ABA 问题。来看下具体实现：</description>
     </item>
     <item>
      <title>bRPC 源码分析「四、协程调度」</title>
      <link>https://sf-zhou.github.io/brpc/brpc_04_schedule.html</link>
      <pubDate>2021.03.10</pubDate>
      <description>bthread 内实现了 ParkingLot 用以管理工作线程的挂起和唤醒：</description>
     </item>
     <item>
      <title>bRPC 源码分析「三、网络通信」</title>
      <link>https://sf-zhou.github.io/brpc/brpc_03_socket.html</link>
      <pubDate>2021.03.04</pubDate>
      <description>bRPC 支持短连接、连接池和单连接，前两种是非常通用的方案。而单连接是指进程内所有 client 与一台 server 最多只有一个连接，在该连接上同时处理多个请求，不要求回复返回顺序与请求发送顺序一致。</description>
     </item>
     <item>
      <title>bRPC 源码分析「二、资源管理」</title>
      <link>https://sf-zhou.github.io/brpc/brpc_02_memory.html</link>
      <pubDate>2021.03.03</pubDate>
      <description>代码中频繁使用的结构体大部分是等长的。根据该原理，bRPC 中设计了一个对象池，简化定长对象的分配和回收策略，尽可能地在 Thread Local 环境中进行内存操作。申请对象时按照如下的规则 BAIDU_OBJECT_POOL_GET：</description>
     </item>
     <item>
      <title>bRPC 源码分析「一、协程设计」</title>
      <link>https://sf-zhou.github.io/brpc/brpc_01_bthread.html</link>
      <pubDate>2021.03.02</pubDate>
      <description>bthread 中使用 libcontext 实现协程间的切换，原理类似汇编魔法实现 C++ 协程中的方法。看一个单元测试中的例子（在线执行）：</description>
     </item>
     <item>
      <title>Tokio 源码分析「二、字节流 Bytes」</title>
      <link>https://sf-zhou.github.io/tokio/tokio_02_bytes.html</link>
      <pubDate>2020.11.12</pubDate>
      <description>网络应用的核心是处理字节流，本篇关注 Tokio 处理字节流的基础库 bytes，阅读的代码版本为 v0.6.0。</description>
     </item>
     <item>
      <title>Tokio 源码分析「一、事件驱动 IO」</title>
      <link>https://sf-zhou.github.io/tokio/tokio_01_mio.html</link>
      <pubDate>2020.11.08</pubDate>
      <description>Tokio 是 Rust 语言下的一个异步运行时，基于非阻塞 IO 和事件驱动。Tokio 中应用了协程及 Work Stealing 策略，实现类似 Goroutine 的 M:N 线程效果。本系列逐步分析 Tokio 的代码实现，版本为 v0.3.3，本篇关注事件驱动 IO 封装库 Mio。</description>
     </item>
     <item>
      <title>初探 C++20 协程</title>
      <link>https://sf-zhou.github.io/coroutine/cpp_20_coroutines.html</link>
      <pubDate>2020.07.25</pubDate>
      <description>去年学习 libco 时写过一篇博文，讲述如何使用汇编实现协程切换。今年官方的协程实现更加成熟，编译器原生支持加上无栈的设计都吸引着笔者，即使工作中没法用上也想一探究竟。最近 Mac 上可以直接通过 Homebrew 安装 gcc 10.1 了，借此机会探索一下 C++20 协程的玩法。</description>
     </item>
     <item>
      <title>C++ Lock-free Hazard Pointer</title>
      <link>https://sf-zhou.github.io/programming/hazard_pointer.html</link>
      <pubDate>2020.07.19</pubDate>
      <description>Folly 的 Hazard Pointer 实现中有一段注释，详细描述了 C++ 里几种主流的安全内存回收方法，列表如下：</description>
     </item>
     <item>
      <title>C++ 缺少常量修饰符引发的 Bug</title>
      <link>https://sf-zhou.github.io/programming/cpp_string_copy_on_write.html</link>
      <pubDate>2020.07.02</pubDate>
      <description>时运不济，命途多舛，最近 Bug 有点多。大概是这样的：</description>
     </item>
     <item>
      <title>C++ 访问类私有成员变量</title>
      <link>https://sf-zhou.github.io/programming/cpp_access_private_member.html</link>
      <pubDate>2020.07.01</pubDate>
      <description>首先介绍一下类的数据成员指针。当对类的数据成员执行取址操作时，可以获得类的数据成员指针。本质上是附带类型信息的地址偏移。这部分可以参考文献 1。</description>
     </item>
     <item>
      <title>C++ Lock-free Atomic Shared Pointer</title>
      <link>https://sf-zhou.github.io/programming/atomic_shared_ptr.html</link>
      <pubDate>2020.06.14</pubDate>
      <description>使用原子量引用计数实现一个简易的共享指针：</description>
     </item>
     <item>
      <title>内存屏障和内存模型</title>
      <link>https://sf-zhou.github.io/programming/memory_barrier.html</link>
      <pubDate>2020.06.10</pubDate>
      <description>从维基百科中摘录的定义：</description>
     </item>
     <item>
      <title>PaxosStore 源码分析「七、其他细节」</title>
      <link>https://sf-zhou.github.io/paxos/paxos_store_07_reading.html</link>
      <pubDate>2020.04.26</pubDate>
      <description>作为本系列的最后一篇博文，本篇会争取把之前挖的坑一一填上，包括读取、CatchUp 和 Recovery 的流程，以及 WaitingMsg 的使用。</description>
     </item>
     <item>
      <title>PaxosStore 源码分析「六、流程细节」</title>
      <link>https://sf-zhou.github.io/paxos/paxos_store_06_process.html</link>
      <pubDate>2020.04.12</pubDate>
      <description>本篇继续来看 PaxosStore 中 Paxos 流程的细节。</description>
     </item>
     <item>
      <title>PaxosStore 源码分析「五、实现细节」</title>
      <link>https://sf-zhou.github.io/paxos/paxos_store_05_details.html</link>
      <pubDate>2020.03.26</pubDate>
      <description>本系列的上一篇里分析了 PaxosStore 中的协议日志的实现，本篇将深入协议过程中的一些细节，这些实现细节集中在 src/EntityWorker.cpp 这个庞然大物里。</description>
     </item>
     <item>
      <title>PaxosStore 源码分析「四、协议日志」</title>
      <link>https://sf-zhou.github.io/paxos/paxos_store_04_paxos_log.html</link>
      <pubDate>2020.03.08</pubDate>
      <description>本系列的上一篇里分析了 PaxosStore 中共识协议的实现，本篇将聚焦 Paxos 协议中 PaxosLog 的实现。博文标题为了对齐一下，强行翻译为协议日志，不必太在意 :D</description>
     </item>
     <item>
      <title>PaxosStore 源码分析「三、共识协议」</title>
      <link>https://sf-zhou.github.io/paxos/paxos_store_03_consensus.html</link>
      <pubDate>2020.02.17</pubDate>
      <description>本系列的前两篇分析了 PaxosStore 中网络通信和消息传递的实现，本篇将正式介绍 Paxos 算法，并分析 PaxosStore 中共识协议的实现。</description>
     </item>
     <item>
      <title>PaxosStore 源码分析「二、消息传递」</title>
      <link>https://sf-zhou.github.io/paxos/paxos_store_02_message.html</link>
      <pubDate>2020.02.16</pubDate>
      <description>本系列的上一篇分析了 PaxosStore 中网络通信部分的实现，本篇将聚焦 PaxosStore 中模块间消息的传递。</description>
     </item>
     <item>
      <title>PaxosStore 源码分析「一、网络通信」</title>
      <link>https://sf-zhou.github.io/paxos/paxos_store_01_network.html</link>
      <pubDate>2020.02.15</pubDate>
      <description>PaxosStore 是由微信开源的分布式存储系统，基于 Paxos 协议实现存储的强一致。代码开源于 2017 年，同步发表的还有 VLDB 会议上的论文 "PaxosStore: High-availability Storage Made Practical in WeChat"。PaxosStore 广泛应用于微信各项存储服务中，代码久经考验。所以开出一个新系列「PaxosStore 源码分析」，希望从这个工业化 Paxos 协议实现中学习一些新东西。作为系列的第一篇，本文会介绍 PaxosStore 代码的整体结构和网络通信的实现。</description>
     </item>
     <item>
      <title>Linux Socket 通信与 IO 多路复用</title>
      <link>https://sf-zhou.github.io/linux/socket_and_epoll.html</link>
      <pubDate>2020.02.03</pubDate>
      <description>最近在进行 Linux 系统下 Socket 与 RPC 相关的工作，故系统化学习一下 Socket 方面的知识。主要参考文献为 《The Linux Programming Interface》，中文版为《Linux/UNIX 系统编程手册》，可以在线购买电子版。本文重点介绍 Internet domain stream socket，也就是 TCP socket。</description>
     </item>
     <item>
      <title>C++ 隐式转换引发的 Bug</title>
      <link>https://sf-zhou.github.io/programming/lambda_implicit_conversion_bug.html</link>
      <pubDate>2019.11.22</pubDate>
      <description>今天遇到一个 Segmentation Fault，最简化复现的代码如下：</description>
     </item>
     <item>
      <title>C++ Macro: Number of Arguments</title>
      <link>https://sf-zhou.github.io/programming/cpp_macro_number_of_arguments.html</link>
      <pubDate>2019.11.18</pubDate>
      <description>在 C++ 中不建议使用宏，对于原先 C 中大量使用宏的场景，均建议使用其他方式替代，比如使用 const 常量和 enum 枚举量代替宏定义的常量，使用 template 模版函数/模板类替代宏定义的函数段。但某些场景下宏依然是不可替代的，例如代码的条件编译、函数复杂流程控制。本文主要讲述如何在变长参数的宏里确定参数的个数及其应用。</description>
     </item>
     <item>
      <title>C++ 中的静态变量和单例模式</title>
      <link>https://sf-zhou.github.io/programming/cpp_static_and_singleton.html</link>
      <pubDate>2019.11.14</pubDate>
      <description>C++ 中的静态变量是个有趣的精灵，可以通过它实现很多魔法。精灵强大，同时也危险，本文简单介绍一下静态变量的使用和特性，以及基于静态变量的单例模式实现。</description>
     </item>
     <item>
      <title>Spinlock and Doubly Linked List</title>
      <link>https://sf-zhou.github.io/programming/cpp_spinlock_doubly_linked_list.html</link>
      <pubDate>2019.10.14</pubDate>
      <description>Spinlock 自旋锁，在获取锁时使用轮询的方式检查锁是否可用。其优点是避免了线程切换，缺点是轮询持续占用 CPU，故一般只在临界区非常短的时候使用。更详细的介绍见维基百科。</description>
     </item>
     <item>
      <title>Learning Rust from LeetCode</title>
      <link>https://sf-zhou.github.io/programming/learning_rust_from_leetcode.html</link>
      <pubDate>2019.10.13</pubDate>
      <description>Method 1: Brute-Force</description>
     </item>
     <item>
      <title>汇编魔法实现 C++ 协程</title>
      <link>https://sf-zhou.github.io/programming/cpp_magic_coroutine.html</link>
      <pubDate>2019.09.28</pubDate>
      <description>协程，简而言之就是用户态线程。C++ 官方协程已经被提上日程，乐观估计 2020 年能发布，然后 2025 年能用上。但当下的性能问题亟待解决，没有官方实现也可以自己造轮子。除了切换到 Go、使用语言级支持的协程外，也可以在 C++ 内使用基于汇编实现的协程，比如微信开源的 libco。本文将从简单的汇编开始，逐步分析 x86-64 环境下协程的实现原理。</description>
     </item>
     <item>
      <title>LevelDB 源码分析「十、其他细节」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_10_details.html</link>
      <pubDate>2019.09.16</pubDate>
      <description>本篇为 LevelDB 源码分析的最后一篇博文，将会分析 LevelDB 中同步、原子量、单元测试和构建系统的一些细节。</description>
     </item>
     <item>
      <title>LevelDB 源码分析「九、Compaction」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_09_compaction.html</link>
      <pubDate>2019.09.13</pubDate>
      <description>祝大家中秋快乐！</description>
     </item>
     <item>
      <title>LevelDB 源码分析「八、完整流程」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_08_complete_process.html</link>
      <pubDate>2019.09.06</pubDate>
      <description>本系列之前的数篇博文从面向对象的角度分析了 LevelDB 中的核心组件，理解了每个类的作用。本篇将从面向过程的角度，分析 LevelDB 创建、打开和读写的完整流程。</description>
     </item>
     <item>
      <title>LevelDB 源码分析「七、版本管理」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_07_version.html</link>
      <pubDate>2019.08.28</pubDate>
      <description>本系列的上一篇介绍了 Sorted Table 的构建和读取过程。当 Sorted Table 不断构建出来时，需要使用适当的方式来组织、管理生成的 .ldb 文件。并且 LevelDB 支持快照，这需要 LevelDB 具有版本管理能力。本篇将分析 LevelDB 版本管理相关的代码。</description>
     </item>
     <item>
      <title>LevelDB 源码分析「六、Sorted Table 续」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_06_sorted_table.html</link>
      <pubDate>2019.08.21</pubDate>
      <description>本系列的上一篇介绍了 Sorted Table 的构建过程，本篇就继续分析 Sorted Table 的读取、解析过程。</description>
     </item>
     <item>
      <title>LevelDB 源码分析「五、Sorted Table」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_05_sorted_table.html</link>
      <pubDate>2019.08.15</pubDate>
      <description>本系列的上一篇介绍了内存数据库，并且提到了内存数据库的大小限制问题。当内存数据块占用的内存达到阈值时（LevelDB 默认 4MB），会将当前的内存数据库 mem_ 转为不可修改的 imm_，并且为 mem_ 赋值一个新的内存数据库。这使得内存数据库的大小始终保持在阈值以下，同时保持着超高的读写性能。而不可修改的 imm_ 会经历 Compaction 过程，转为 Sorted Table 存储到磁盘中。本篇将详细阐述该过程。</description>
     </item>
     <item>
      <title>LevelDB 源码分析「四、高性能写操作续」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_04_write_batch_and_log.html</link>
      <pubDate>2019.08.10</pubDate>
      <description>本系列的上一篇介绍了 LevelDB 写操作中构造的 WriteBatch，以及写操作的第一步：追加日志。本篇将继续介绍写操作的第二步：插入内存数据库。</description>
     </item>
     <item>
      <title>LevelDB 源码分析「三、高性能写操作」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_03_write_batch_and_log.html</link>
      <pubDate>2019.08.05</pubDate>
      <description>本系列的前两篇介绍了 LevelDB 中使用的数据结构，并没有牵涉到 LevelDB 的核心实现。接下来的几篇将着重介绍 LevelDB 核心组件，包括日志、内存数据库、SortedTable、Compaction 和版本管理。本篇着重阐述高性能写操作的秘密：日志和内存数据库。</description>
     </item>
     <item>
      <title>LevelDB 源码分析「二、基本数据结构续」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_02_data_structure.html</link>
      <pubDate>2019.07.29</pubDate>
      <description>本系列的上一篇介绍了 LevelDB 中的 Slice、Hash 和 LRUCache 的实现，这一篇将继续分析布隆过滤器、内存池和跳表。</description>
     </item>
     <item>
      <title>LevelDB 源码分析「一、基本数据结构」</title>
      <link>https://sf-zhou.github.io/leveldb/leveldb_01_data_structure.html</link>
      <pubDate>2019.07.26</pubDate>
      <description>断断续续大半年，LevelDB 的源代码快看完了。期间经常会发出由衷的感叹：Google 的代码写得真好。为了督促自己尽快看完，同时也为了真正地从 LevelDB 源码里汲取养分，所以开出一个新系列「LevelDB 源码分析」，希望能整理输出一些干货。作为系列的第一篇，本文会介绍 LevelDB 中的基本数据结构，包括 Slice、Hash、LRUCache。</description>
     </item>
     <item>
      <title>Config, Argument and JSON Schema</title>
      <link>https://sf-zhou.github.io/productivity/config_argument_json_schema.html</link>
      <pubDate>2019.04.14</pubDate>
      <description>最近在重构现有的 PyTorch 训练框架，目标是组件化、低耦合、高复用，提高大家的研究效率。开发过程中思考了一些关于 Config 和 Command Line Argument 的问题，并且顺手开发了几个辅助小工具。本文可以看成是这几个工具的说明文档了。</description>
     </item>
     <item>
      <title>C++ 中的中文编码</title>
      <link>https://sf-zhou.github.io/programming/chinese_encoding.html</link>
      <pubDate>2018.07.28</pubDate>
      <description>中文编码是一个复杂而繁琐的问题，在 C++ 程序设计中尤是如此。近期笔者在工作中对这一点颇有体会，故而在总结一些经验。</description>
     </item>
     <item>
      <title>Android 备用机短信转发</title>
      <link>https://sf-zhou.github.io/productivity/android_sms_to_dingtalk.html</link>
      <pubDate>2018.07.13</pubDate>
      <description>之前的移动号用了七年，一时没法换，也舍不得换，很多短信还是会发到上面。然而移动的流量价格仍然处于 5-30 的水平，再加上工作的地方换了城市，所以新办了一张联通卡。无奈 iPhone 只能插入一张卡，笔者又不想随身携带两个手机，故而需要一个高可用并且安全的短信转发方案。</description>
     </item>
     <item>
      <title>台湾游记</title>
      <link>https://sf-zhou.github.io/life/taiwan.html</link>
      <pubDate>2018.06.16</pubDate>
      <description>快毕业了，和小伙伴一起来宝岛台湾旅行，简单记录一下。</description>
     </item>
     <item>
      <title>拉格朗日乘子法</title>
      <link>https://sf-zhou.github.io/algorithm/lagrange_multipliers.html</link>
      <pubDate>2018.05.29</pubDate>
      <description>拉格朗日乘子法（Lagrange Multipliers），可以将有
d
d
d
个变量与
k
k
k
个约束条件的最优化问题转化为具有
d
+
k
d+k
d+k
个变量的无约束优化问题。</description>
     </item>
     <item>
      <title>Build a Python Package Step by Step</title>
      <link>https://sf-zhou.github.io/programming/python_package_dingtalk_robot.html</link>
      <pubDate>2018.03.14</pubDate>
      <description>通常大家使用 Python 提供的包的时候，无外乎使用 pip 完成安装，然后在源代码头部使用 import 引入需要的包，再来就可以愉快地使用了。对于初学者来说，可能会困惑，要如何构建这样一个简单易用的包呢？</description>
     </item>
     <item>
      <title>特征值、特征向量和奇异值分解</title>
      <link>https://sf-zhou.github.io/algorithm/eigenvalues_and_eigvectors.html</link>
      <pubDate>2017.09.15</pubDate>
      <description>最近准备各种笔试，顺便复习了一下矩阵的相关知识。找到了一份非常棒的学习视频：线性代数的本质。这份学习材料是 3Blue1Brown 制作的，视频中会使用几何的方式揭示矩阵操作的本质。在 YouTube 和 Bilibili 上有官方提供的视频，都有中文字幕。视频中提到的特征值、特征向量还有基变换，都给了关于矩阵的全新的理解。所以在这里总结一下。</description>
     </item>
     <item>
      <title>解决 MacBook 键盘双击问题</title>
      <link>https://sf-zhou.github.io/productivity/solve_macbook_typing_double.html</link>
      <pubDate>2017.09.15</pubDate>
      <description>手上的 MacBook Pro 是 2016 年年底买的，至今一年都没到。前一段时间就出现了 b 键有时候按一下出来两个字符的问题。最近几天 n 键也出现了相同的问题。这个事件还是有概率会发生，打字的时候让人非常不爽。</description>
     </item>
     <item>
      <title>指数函数 Exp 的拟合</title>
      <link>https://sf-zhou.github.io/algorithm/fitted_exp_function.html</link>
      <pubDate>2017.09.09</pubDate>
      <description>最近遇到一个有趣的问题。已知函数形如：</description>
     </item>
     <item>
      <title>终端下快速找文件、进目录</title>
      <link>https://sf-zhou.github.io/productivity/find_file_folder_quickly_in_terminal.html</link>
      <pubDate>2015.02.26</pubDate>
      <description>如果你经常是在终端下完成工作，那么必然会经常切换目录，或者查找一些文件。如果频繁地使用 cd 命令，无疑很浪费时间。</description>
     </item>
  </channel>
</rss>
