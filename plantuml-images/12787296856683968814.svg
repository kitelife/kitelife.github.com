<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="503px" preserveAspectRatio="none" style="width:633px;height:503px;background:#FFFFFF;" version="1.1" viewBox="0 0 633 503" width="633px" zoomAndPan="magnify"><defs><filter height="300%" id="fqz3hv0aygdc5" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[12aee951d6f83ae12f3cc7ad6eee3943]
class MemTable--><rect codeLine="4" fill="#FEFECE" filter="url(#fqz3hv0aygdc5)" height="210" id="MemTable" style="stroke:#A80036;stroke-width:1.5;" width="612" x="7" y="7"/><ellipse cx="273.25" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M275.6675,28.1851 Q275.1548,28.4487 274.5908,28.5806 Q274.0269,28.7124 273.4043,28.7124 Q271.1924,28.7124 270.0278,27.2549 Q268.8633,25.7974 268.8633,23.0435 Q268.8633,20.2822 270.0278,18.8247 Q271.1924,17.3672 273.4043,17.3672 Q274.0269,17.3672 274.5981,17.499 Q275.1694,17.6309 275.6675,17.8945 L275.6675,20.2969 Q275.1108,19.7842 274.5872,19.5461 Q274.0635,19.3081 273.5068,19.3081 Q272.3203,19.3081 271.7161,20.2493 Q271.1118,21.1904 271.1118,23.0435 Q271.1118,24.8892 271.7161,25.8303 Q272.3203,26.7715 273.5068,26.7715 Q274.0635,26.7715 274.5872,26.5334 Q275.1108,26.2954 275.6675,25.7827 Z " fill="#000000"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="71" x="293.75" y="28.25">MemTable</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="618" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="47"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="202" x="27" y="57.25">KeyComparator comparator_;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="65"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="58" x="27" y="75.25">int refs_;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="83"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="92" x="27" y="93.25">Arena arena_;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="101"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="86" x="27" y="111.25">Table table_;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="618" y1="119" y2="119"/><ellipse cx="18" cy="130" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="68" x="27" y="137.25">void Ref()</text><ellipse cx="18" cy="148" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="82" x="27" y="155.25">void Unref()</text><ellipse cx="18" cy="166" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="151" x="27" y="173.25">Iterator* NewIterator()</text><ellipse cx="18" cy="184" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="586" x="27" y="191.25">void Add(SequenceNumber seq, ValueType type, const Slice&amp; key, const Slice&amp; value)</text><ellipse cx="18" cy="202" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="416" x="27" y="209.25">bool Get(const LookupKey&amp; key, std::string* value, Status* s)</text><!--MD5=[01aeada2388ef746e455587df9a4d391]
class Arena--><rect codeLine="17" fill="#FEFECE" filter="url(#fqz3hv0aygdc5)" height="192" id="Arena" style="stroke:#A80036;stroke-width:1.5;" width="326" x="150" y="297"/><ellipse cx="289.25" cy="313" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M291.6675,318.1851 Q291.1548,318.4487 290.5908,318.5806 Q290.0269,318.7124 289.4043,318.7124 Q287.1924,318.7124 286.0278,317.2549 Q284.8633,315.7974 284.8633,313.0435 Q284.8633,310.2822 286.0278,308.8247 Q287.1924,307.3672 289.4043,307.3672 Q290.0269,307.3672 290.5981,307.499 Q291.1694,307.6309 291.6675,307.8945 L291.6675,310.2969 Q291.1108,309.7842 290.5872,309.5461 Q290.0635,309.3081 289.5068,309.3081 Q288.3203,309.3081 287.7161,310.2493 Q287.1118,311.1904 287.1118,313.0435 Q287.1118,314.8892 287.7161,315.8303 Q288.3203,316.7715 289.5068,316.7715 Q290.0635,316.7715 290.5872,316.5334 Q291.1108,316.2954 291.6675,315.7827 Z " fill="#000000"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="39" x="309.75" y="318.25">Arena</text><line style="stroke:#A80036;stroke-width:1.5;" x1="151" x2="475" y1="329" y2="329"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="158" y="337"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="107" x="170" y="347.25">char* alloc_ptr_</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="158" y="355"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="202" x="170" y="365.25">size_t alloc_bytes_remaining_</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="158" y="373"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="179" x="170" y="383.25">std::vector&lt;char*&gt; blocks_</text><line style="stroke:#A80036;stroke-width:1.5;" x1="151" x2="475" y1="391" y2="391"/><ellipse cx="161" cy="402" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="187" x="170" y="409.25">char* Allocate(size_t bytes)</text><ellipse cx="161" cy="420" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="238" x="170" y="427.25">char* AllocateAligned(size_t bytes)</text><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="0" x="174" y="445.25"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="158" y="453"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="243" x="170" y="463.25">char* AllocateFallback(size_t bytes)</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="158" y="471"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="300" x="170" y="481.25">char* AllocateNewBlock(size_t block_bytes)</text><!--MD5=[2377e5348a91a98b6f45e8764204e484]
reverse link MemTable to Arena--><path codeLine="28" d="M313,231.76 C313,253.4 313,275.73 313,296.59 " fill="none" id="MemTable-backto-Arena" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="313,218.8,309,224.8,313,230.8,317,224.8,313,218.8" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="30" x="314" y="262.25">组合</text><!--MD5=[50f5713ff7c0c3046839a717d5d9ef2d]
@startuml
skinparam defaultFontName "Albert Sans"
skinparam defaultFontSize 15
scale max 800 width
class MemTable {
+ void Ref()
+ void Unref()
+ Iterator* NewIterator()
+ void Add(SequenceNumber seq, ValueType type, const Slice& key, const Slice& value)
+ bool Get(const LookupKey& key, std::string* value, Status* s)

- KeyComparator comparator_;  
- int refs_;  
- Arena arena_;  
- Table table_;
}

class Arena {
+ char* Allocate(size_t bytes)
+ char* AllocateAligned(size_t bytes)

- char* AllocateFallback(size_t bytes)
- char* AllocateNewBlock(size_t block_bytes)
- char* alloc_ptr_
- size_t alloc_bytes_remaining_  
- std::vector<char*> blocks_
}

MemTable *- - Arena: 组合
@enduml

PlantUML version 1.2021.12(Wed Oct 06 00:01:58 CST 2021)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>