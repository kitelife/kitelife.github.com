<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>An Amateur Alchemist's Adventure</title>
    <link>https://dirtysalt.github.io/html/blogs.html</link>
    <description></description>
    <generator>site rss maker</generator>
    <language>zh</language>
    <lastBuildDate>2024-11-14T18:03:39</lastBuildDate>
     
     <item>
      <title>网络文章@202411</title>
      <link>https://dirtysalt.github.io/html/readings-at-202411.html</link>
      <pubDate>202411</pubDate>
      <description>A deep look into our new massive multitenant architecture</description>
     </item>
     <item>
      <title>LC 3348. 最小可整除数位乘积 II</title>
      <link>https://dirtysalt.github.io/html/lc-3348-smallest-divisible-digit-product-ii.html</link>
      <pubDate>202411</pubDate>
      <description>https://leetcode.cn/problems/smallest-divisible-digit-product-ii/description/</description>
     </item>
     <item>
      <title>LC 3347. 执行操作后元素的最高频率 II</title>
      <link>https://dirtysalt.github.io/html/lc-3337-maximum-frequency-of-an-element-after-performing-operations-ii.html</link>
      <pubDate>202411</pubDate>
      <description>https://leetcode.cn/problems/maximum-frequency-of-an-element-after-performing-operations-ii/description/</description>
     </item>
     <item>
      <title>抽象者劳心</title>
      <link>https://dirtysalt.github.io/html/the-mental-burden-of-the-abstractor.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2018年合集</description>
     </item>
     <item>
      <title>论写作的六大好处和一个坏处</title>
      <link>https://dirtysalt.github.io/html/six-benefits-and-one-drawback-of-writing.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2018年合集</description>
     </item>
     <item>
      <title>论"目标导向"和"过程导向"</title>
      <link>https://dirtysalt.github.io/html/goal-oriented-vs-process-oriented.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2018年合集</description>
     </item>
     <item>
      <title>论决策机制和纠错成本</title>
      <link>https://dirtysalt.github.io/html/decision-making-and-error-correction-costs.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>从品牌和应用场景的思维模型看比特币</title>
      <link>https://dirtysalt.github.io/html/bitcoin-through-brand-and-use-case-models.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>Uber 上市会引爆硅谷的泡沫破灭吗?</title>
      <link>https://dirtysalt.github.io/html/will-uber-ipo-burst-silicon-valley-bubble.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>重要的东西，往往是看不见的</title>
      <link>https://dirtysalt.github.io/html/important-things-are-often-invisible.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>成功的关键等于网络</title>
      <link>https://dirtysalt.github.io/html/network-as-the-key-to-success.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>活下来就好及时出场就好</title>
      <link>https://dirtysalt.github.io/html/surviving-and-showing-up-on-time.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>每年阅读500本书</title>
      <link>https://dirtysalt.github.io/html/reading-500-books-a-year.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>为什么人们不断预言摩尔定律会死掉</title>
      <link>https://dirtysalt.github.io/html/why-people-keep-predicting-moores-law-will-end.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>出钱最多的视角才是上帝视角</title>
      <link>https://dirtysalt.github.io/html/highest-investor-perspective-as-god-view.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>抛弃对这个世界的一厢情愿</title>
      <link>https://dirtysalt.github.io/html/letting-go-of-idealism-towards-the-world.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>创新扩散的理论模型和误区</title>
      <link>https://dirtysalt.github.io/html/innovation-diffusion-theory-models-and-pitfalls.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>LC 3337. 字符串转换后的长度 II</title>
      <link>https://dirtysalt.github.io/html/lc-3337-total-characters-in-string-after-transformations-ii.html</link>
      <pubDate>202410</pubDate>
      <description>https://leetcode.cn/problems/total-characters-in-string-after-transformations-ii/description/</description>
     </item>
     <item>
      <title>LC 3336. 最大公约数相等的子序列数量</title>
      <link>https://dirtysalt.github.io/html/lc-3336-find-the-number-of-subsequences-with-equal-gcd.html</link>
      <pubDate>202410</pubDate>
      <description>https://leetcode.cn/problems/find-the-number-of-subsequences-with-equal-gcd/description/</description>
     </item>
     <item>
      <title>论投资高成长垄断型资产的八个误区</title>
      <link>https://dirtysalt.github.io/html/8-mistakes-of-investing-high-tech-company.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2021合集</description>
     </item>
     <item>
      <title>幸福来自全面复合增长</title>
      <link>https://dirtysalt.github.io/html/happiness-comes-from-comprehensive-and-compounded-growth.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2021合集</description>
     </item>
     <item>
      <title>关于间歇性断食</title>
      <link>https://dirtysalt.github.io/html/about-intermittent-fasting.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2021合集</description>
     </item>
     <item>
      <title>权利和垄断演化机制</title>
      <link>https://dirtysalt.github.io/html/power-and-monopoly-internals.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2022合集</description>
     </item>
     <item>
      <title>做题家和出题家</title>
      <link>https://dirtysalt.github.io/html/problem-solver-and-setter.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2022合集</description>
     </item>
     <item>
      <title>BigLake BigQuery’s Evolution toward a Multi-Cloud Lakehouse</title>
      <link>https://dirtysalt.github.io/html/biglake-bigquery-evolution-toward-a-multi-cloud-lakehouse.html</link>
      <pubDate>202410</pubDate>
      <description>如何将bigquery做到支持multi-cloud以及lakehouse. multi-cloud这个依赖于文章里面提到的omni架构，主要是解决multi-cloud适配问题：部署，安全，数据增量传输等等。而lakehouse则是文章里面提到的biglake架构，包括具体两个技术分别是biglake managed tables(for open-source table format)和biglake object tables(for AI/ML). 因为我对multi-cloud也不是很了解，所以主要是看怎么支持lakehouse的，但是multi-cloud看上去细节也是蛮多的。</description>
     </item>
     <item>
      <title>Life Lessons from the First Half-Century of My Career</title>
      <link>https://dirtysalt.github.io/html/life-lessons-from-the-first-half-century-of-my-career.html</link>
      <pubDate>202410</pubDate>
      <description>Life Lessons from the First Half-Century of My Career – Communications of the ACM</description>
     </item>
     <item>
      <title>Measuring your system’s performance using software (Go edition)</title>
      <link>https://dirtysalt.github.io/html/measure-your-system-performance-using-software-go-edition.html</link>
      <pubDate>202410</pubDate>
      <description>https://lemire.me/blog/2024/03/17/measuring-your-systems-performance-using-software-go-edition/?continueFlag=6e2109ebedef4e4aef083a29820ed2a3</description>
     </item>
     <item>
      <title>关于网络安全学习的合集</title>
      <link>https://dirtysalt.github.io/html/collection-of-advices-how-to-learn-security.html</link>
      <pubDate>202410</pubDate>
      <description>https://weibo.com/1401527553/Idpdy9wfZ?pagetype=fav</description>
     </item>
     <item>
      <title>天涯被封几大神贴</title>
      <link>https://dirtysalt.github.io/html/something-rarely-unknown-for-self-development.html</link>
      <pubDate>202410</pubDate>
      <description>https://x.com/0xUnicorn/status/1829912276243210529</description>
     </item>
     <item>
      <title>Apache Arrow Theory &amp; Practice Explained</title>
      <link>https://dirtysalt.github.io/html/apache-arrow-theory-and-practice-explained.html</link>
      <pubDate>202410</pubDate>
      <description>(105) Apache Arrow: Theory & Practice Explained // Apache Arrow Meetup 2017 - YouTube</description>
     </item>
     <item>
      <title>LC 3317. 安排活动的方案数</title>
      <link>https://dirtysalt.github.io/html/lc-3317-find-the-number-of-possible-ways-for-an-event.html</link>
      <pubDate>202410</pubDate>
      <description>https://leetcode.cn/problems/find-the-number-of-possible-ways-for-an-event/description/</description>
     </item>
     <item>
      <title>write coroutine code using boost context</title>
      <link>https://dirtysalt.github.io/html/write-coroutine-using-boost-context.html</link>
      <pubDate>202410</pubDate>
      <description>https://www.boost.org/doc/libs/1_84_0/libs/context/doc/html/context/overview.html</description>
     </item>
     <item>
      <title>What Modern NVMe Storage Can Do, And How To Exploit It</title>
      <link>https://dirtysalt.github.io/html/what-modern-nvme-storage-can-do-and-how-to-exploit-it.html</link>
      <pubDate>202410</pubDate>
      <description>vldb2023. 文章讨论如何设计OLTP可以充分利用nvme ssd array. 按照文章里面给出的配置，一个机器上可以挂8个nvme ssd, 然后每个ssd可以达到1MIOPS, 总量大约是12.5M IOPS. 在这样的SSD阵列下面充分利用IO，需要做哪些事情以及应该如何设计系统，并且回答下面这几个问题：</description>
     </item>
     <item>
      <title>What Goes Around Comes Around, And Around</title>
      <link>https://dirtysalt.github.io/html/what-goes-around-comes-around-and-around.html</link>
      <pubDate>202410</pubDate>
      <description>sigmod2024年的回顾性文章，回顾了过去20年数据库的变化，以及对现在数据库行业和技术的分析和预测。从数据库的数据模型，以及技术和应用两个方面做了点评。最后两个作者还希望自己可以活着，或者是out on bail, 在2044年写篇回顾过去20年的文章</description>
     </item>
     <item>
      <title>网络文章@202410</title>
      <link>https://dirtysalt.github.io/html/readings-at-202410.html</link>
      <pubDate>202410</pubDate>
      <description>Databricks 与 Snowflake：2024 年完整比较 |通过同步计算 |同步计算|中等的 — Databricks vs Snowflake: A Complete 2024 Comparison | by Sync Computing | Sync Computing | Medium</description>
     </item>
     <item>
      <title>Tidy Tuples and Flying Start Fast Compilation and Fast Execution of Relational Queries in Umbra</title>
      <link>https://dirtysalt.github.io/html/tidy-tuples-and-flying-start-fast-compilation-and-execution-in-umbra.html</link>
      <pubDate>202410</pubDate>
      <description>怎么给Umbra设计更快的JIT执行引擎。tidy tuples是code generation framework, flying start是fast jit compiler. 看了个大概，里面细节许多，好多东西也没有完全看懂。tidy tuples的亮点就是有一种层次化框架的方法来给db engine来生成代码。生成的中间代码是umbra IR. 这个IR可以说是专门给DB engine设计的，并且是memory efficient representation. flying start则是相比llvm jit编译时间更短的引擎（但是代码效率就没有那么高），其中最大的优势还是简化了代码生成逻辑和直接生成x86代码。</description>
     </item>
     <item>
      <title>ClickHouse - Lightning Fast Analytics for Everyone</title>
      <link>https://dirtysalt.github.io/html/clickhouse-lightning-fast-analytics-for-everyone.html</link>
      <pubDate>202410</pubDate>
      <description>CK主要是面向快速数据分析这个场景，假设大量数据写入主要是追加，基本上没有更新和删除操作，也没有schema change这样的操作(文章里面好像还没有说到schema change相关内容)。在事务上做的比较拉胯，可能会读取到过期数据以及一半数据，甚至写入返回也不保证完全落盘。感觉CK这些人对查询分析非常有兴趣，对数据事务完全没有兴趣，估计会把客户给搞惨。</description>
     </item>
     <item>
      <title>SingleStore-V An Integrated Vector Database System in SingleStore</title>
      <link>https://dirtysalt.github.io/html/singlestorev-an-integrated-vector-database-system-in-singlestore.html</link>
      <pubDate>202410</pubDate>
      <description>如何把vector search实现在通用数据库里面去，实现起来有几个问题：</description>
     </item>
     <item>
      <title>The Art of Latency Hiding in Modern Database Engines</title>
      <link>https://dirtysalt.github.io/html/the-art-of-latency-hiding-in-modern-database-engines.html</link>
      <pubDate>202410</pubDate>
      <description>针对现代OLTP数据库系统的改进来降低延迟：</description>
     </item>
     <item>
      <title>JSON Tiles Fast Analytics on Semi-Structured Data</title>
      <link>https://dirtysalt.github.io/html/json-tiles-fast-analytics-on-semi-structured-data.html</link>
      <pubDate>202410</pubDate>
      <description>这篇文章主要讨论怎么来优化半结构化数据尤其是json data的访问，尤其是如何透明地加速这些数据的访问。文章提出的思路就是json tiles: 对json进行分类，将某一类(key paths完全相同的)json放置在一起，然后将这些key paths对应的columns来做物化(物化列)。对于没有办法物化的部分，那么按照jsonb(binary format) 来来存储。这个东西涉及面比较广，里面细节也比较多。</description>
     </item>
     <item>
      <title>字符串两种前缀算法(z和kmp)</title>
      <link>https://dirtysalt.github.io/html/two-string-prefix-algorithms.html</link>
      <pubDate>202409</pubDate>
      <description>KMP字符串是数据结构课本上教过的，其实就是类似某种DP算法： `dp[i] = sz` 表示 `s[i-sz..i] = s[0..sz]` 基于KMP算法可以扩展出AC自动机算法：基于BFS算法来构建这个dp, 在AC里面这个dp叫做fail指针。在KMP里面也可以把这个叫做fail指针。KMP算法的好处就是可以只针对pattern做index, 这个和后面Z函数形成对比：Z函数如果要求解前缀的话需要同时对hay和needle同时做索引。</description>
     </item>
     <item>
      <title>What every systems programmer should know about concurrency</title>
      <link>https://dirtysalt.github.io/html/what-every-system-programmer-should-know-about-concurrency.html</link>
      <pubDate>202409</pubDate>
      <description>文章里面讲到了一系列并发/同步/锁的基础知识：为什么需要memory barrier, memory order底层语义是什么样的，现在硬件上做了那些变化来简化并发编程等等。</description>
     </item>
     <item>
      <title>PilotScope Steering Databases with Machine Learning Drivers</title>
      <link>https://dirtysalt.github.io/html/pilotscope-steering-databases-with-machine-learning-drivers.html</link>
      <pubDate>202409</pubDate>
      <description>这个系统的目的是要解决AI4DB的工程障碍：让ML和DB developer工作可以解耦，并且使得user可以更容易地使用AI4DB.</description>
     </item>
     <item>
      <title>SCOPE Easy and Efficient Parallel Processing of Massive Data Sets</title>
      <link>https://dirtysalt.github.io/html/scope-easy-and-efficient-prallel-processing-of-massive-data-sets.html</link>
      <pubDate>202409</pubDate>
      <description>vldb2008. 年头有点久，现在看起来有点恍惚的感觉：SCOPE基本上就是SQL，然后把SQL编译成为Dyrad(MS分布式计算平台)的program. 那个年代大家受MapReduce影响比较大。现在看来SCOPE的开源系统就是Spark SQL, stage by stage执行方式，整个Plan也是变成了DAG来执行，不同的是Spark SQL完全使用了数据库已有的查询优化技术。</description>
     </item>
     <item>
      <title>AI Meets Database- AI4DB and DB4AI</title>
      <link>https://dirtysalt.github.io/html/ai-meets-database-ai4db-db4fi-tutorial-track-paper.html</link>
      <pubDate>202409</pubDate>
      <description>sigmod2021 这篇文章主要讲AI和DB之间怎么结合，AI可以为DB做些什么，DB可以为AI做些什么。我自己的感觉是，似乎DB可以为AI做的事情并不多，DB是一个很好数据管理入口，可以更好地利用AI模型。而AI模型可以为DB设计和优化打开许多的空间。文章最后将了一下两者之间应该怎么做co-optimization.</description>
     </item>
     <item>
      <title>Presto's History-based Query Optimizer</title>
      <link>https://dirtysalt.github.io/html/prestos-history-based-query-optimizer.html</link>
      <pubDate>202409</pubDate>
      <description>presto如何使用历史查询来收集统计信息，以此来改进未来plan的执行计划，这个东西就叫做history-based query optimizer(HBO). 所以目前我还知道的有cbo(cost-based query optimizer)和LBO(learned-based).</description>
     </item>
     <item>
      <title>Two Birds With One Stone Designing a Hybrid Cloud Storage Engine for HTAP</title>
      <link>https://dirtysalt.github.io/html/two-birds-with-one-stone-designing-a-hybrid-cloud-storage-engine-for-htap.html</link>
      <pubDate>202409</pubDate>
      <description>文章名字是一石二鸟？TUM在VLDB2024发的论文，将怎么给HTAP构建混合基于云的存储引擎。TUM喜欢在技术细节上打磨，细节上做的比较深入，对于我这样只想看看热闹的人会觉得有点累。不知道那些去copy TUM这些系统的工作者感觉怎么样。</description>
     </item>
     <item>
      <title>Databases Unbound Querying All of the World’s Bytes with AI</title>
      <link>https://dirtysalt.github.io/html/database-unbound-querying-all-of-the-worlds-bytes-with-ai.html</link>
      <pubDate>202409</pubDate>
      <description>这篇文章主要展望一下，和AI结合之后，Database应该需要被什么样的能力，以及技术上可能会有什么挑战。文章后面作者给了两个系统：VAAS和Palimpzest. 其中VAAS是一个video检索系统，通过自然语言NL描述需求，然后系统会分解任务并且找到最优的执行算法。而Palimpzest则是一个python programming framework, 描述了和AI（尤其是LLM）结合之后应该提供的编程接口。</description>
     </item>
     <item>
      <title>LeanStore A High-Performance Storage Engine for NVMe SSDs</title>
      <link>https://dirtysalt.github.io/html/lean-a-high-performance-storage-engine-for-nvme-ssds.html</link>
      <pubDate>202409</pubDate>
      <description>TUM在这个系统上做过许多改进和实验，作者做了个回顾哪些技术是有效的哪些是无效的，并且做了说明和分析。估计在这个系统上获得了许多经验，值得整理一下。</description>
     </item>
     <item>
      <title>Portfolio versus resume</title>
      <link>https://dirtysalt.github.io/html/portfolio-versus-resume.html</link>
      <pubDate>202409</pubDate>
      <description>What every computer science major should know</description>
     </item>
     <item>
      <title>Neo A Learned Query Optimizer</title>
      <link>https://dirtysalt.github.io/html/neo-a-learned-query-optimizer.html</link>
      <pubDate>202409</pubDate>
      <description>怎么实现一个可以自己学习的query optimizer. 大致思路是：</description>
     </item>
     <item>
      <title>Adaptive and Robust Query Execution for Lakehouses at Scale</title>
      <link>https://dirtysalt.github.io/html/adaptive-and-robust-query-execution-for-lakehouse-at-scale.html</link>
      <pubDate>202409</pubDate>
      <description>文章开头说到了为什么要在lakehouse上做这种adaptive策略，这个的确是datalake的痛点，其中几点对warehouse来说不是问题：</description>
     </item>
     <item>
      <title>BOSS - An Architecture for Database Kernel Composition</title>
      <link>https://dirtysalt.github.io/html/boss-an-arch-for-db-kernel-composition.html</link>
      <pubDate>202409</pubDate>
      <description>文章里面这个PQE(partial query evaluation)是重点，其实是将整个执行计划不断地在每个engine之间做partial evaluation, 直到最后产生结果。比如GPU比较适合做没有分支的计算，CPU适合做有分支的计算，StorageEngine则适合做存取数据以及encode/decode等工作。</description>
     </item>
     <item>
      <title>LC 3292. 形成目标字符串需要的最少字符串数 II</title>
      <link>https://dirtysalt.github.io/html/lc-3292-minimum-number-of-valid-strings-to-form-target-ii.html</link>
      <pubDate>202409</pubDate>
      <description>这题看了题解 https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-ii/solutions/2917929/ac-zi-dong-ji-pythonjavacgo-by-endlessch-hcqk/ 之前没有写过AC自动机，按照题解给的链接看了一下OI Wiki上的内容，大致搞清楚了AC自动机怎么写。这题用AC自动机还有一个前提就是尽可能匹配最长的前缀，如果有了这个特性之后就是一个DP算法了，最重要的就是知道当前位置可以匹配的最长前缀是多少。</description>
     </item>
     <item>
      <title>阿里云新加坡机房火灾</title>
      <link>https://dirtysalt.github.io/html/aliyun-singapore-region-fire-disaster.html</link>
      <pubDate>202409</pubDate>
      <description>https://status.alibabacloud.com/#/eventDetail?eventId=21</description>
     </item>
     <item>
      <title>网络文章@202409</title>
      <link>https://dirtysalt.github.io/html/readings-at-202409.html</link>
      <pubDate>202409</pubDate>
      <description>惨痛的教训 — The Bitter Lesson</description>
     </item>
     <item>
      <title>LC 3277. 查询子数组最大异或值</title>
      <link>https://dirtysalt.github.io/html/lc-3277-maximum-xor-score-subarray-queries.html</link>
      <pubDate>202409</pubDate>
      <description>https://leetcode.cn/problems/maximum-xor-score-subarray-queries/description/</description>
     </item>
     <item>
      <title>LC 3276. 选择矩阵中单元格的最大得分</title>
      <link>https://dirtysalt.github.io/html/lc-3276-select-cells-in-grid-with-maximum-score.html</link>
      <pubDate>202409</pubDate>
      <description>https://leetcode.cn/problems/select-cells-in-grid-with-maximum-score/description/</description>
     </item>
     <item>
      <title>LC 3273. 对 Bob 造成的最少伤害</title>
      <link>https://dirtysalt.github.io/html/lc-3273-minimum-amount-of-damage-dealt-to-bob.html</link>
      <pubDate>202409</pubDate>
      <description>https://leetcode.cn/problems/minimum-amount-of-damage-dealt-to-bob/description/</description>
     </item>
     <item>
      <title>LC 3272. 统计好整数的数目</title>
      <link>https://dirtysalt.github.io/html/lc-3272-find-the-count-of-good-integers.html</link>
      <pubDate>202409</pubDate>
      <description>https://leetcode.cn/problems/find-the-count-of-good-integers/description/</description>
     </item>
     <item>
      <title>LC 3261. 统计满足 K 约束的子字符串数量 II</title>
      <link>https://dirtysalt.github.io/html/lc-3261-count-substrings-that-satisfy-k-constraint-ii.html</link>
      <pubDate>202408</pubDate>
      <description>https://leetcode.cn/problems/count-substrings-that-satisfy-k-constraint-ii/description/</description>
     </item>
     <item>
      <title>LC 3257. 放三个车的价值之和最大 II</title>
      <link>https://dirtysalt.github.io/html/lc-3257-maximum-value-sum-by-placing-three-rooks-ii.html</link>
      <pubDate>202408</pubDate>
      <description>https://leetcode.cn/problems/maximum-value-sum-by-placing-three-rooks-ii/description/</description>
     </item>
     <item>
      <title>The Age of AI by Eric Schdmit</title>
      <link>https://dirtysalt.github.io/html/the-age-of-ai-eric-schdmit.html</link>
      <pubDate>202408</pubDate>
      <description>transcripts/Stanford_ECON295⧸CS323_I_2024_I_The_Age_of_AI,_Eric_Schmidt.txt at main · ociubotaru/transcripts</description>
     </item>
     <item>
      <title>LC 3235. 判断矩形的两个角落是否可达</title>
      <link>https://dirtysalt.github.io/html/lc-3235-check-if-the-rectangle-corner-is-reachable.html</link>
      <pubDate>202407</pubDate>
      <description>https://leetcode.cn/problems/check-if-the-rectangle-corner-is-reachable/description/</description>
     </item>
     <item>
      <title>LC 3234. 统计 1 显著的字符串的数量</title>
      <link>https://dirtysalt.github.io/html/lc-3234-count-the-number-of-substrings-with-dominant-ones.html</link>
      <pubDate>202407</pubDate>
      <description>https://leetcode.cn/problems/count-the-number-of-substrings-with-dominant-ones/description/</description>
     </item>
     <item>
      <title>JVM print assembly code</title>
      <link>https://dirtysalt.github.io/html/jvm-print-assembly-code.html</link>
      <pubDate>202407</pubDate>
      <description>需要反汇编插件，不然看到的就是二进制代码了。hsdis HotSpot Disassembly Plugin Downloads</description>
     </item>
     <item>
      <title>Efficiency Tips for Engineers (From An AI Researcher + Stanford PhD)</title>
      <link>https://dirtysalt.github.io/html/efficiency-tips-for-engineers.html</link>
      <pubDate>202407</pubDate>
      <description>(8) Efficiency Tips for Engineers (From An AI Researcher + Stanford PhD) - YouTube</description>
     </item>
     <item>
      <title>生命3.0</title>
      <link>https://dirtysalt.github.io/html/life-3.0.html</link>
      <pubDate>202407</pubDate>
      <description>Max Tegmark » MIT Physics https://physics.mit.edu/faculty/max-tegmark/</description>
     </item>
     <item>
      <title>网络文章@202407</title>
      <link>https://dirtysalt.github.io/html/readings-at-202407.html</link>
      <pubDate>202407</pubDate>
      <description>Apache Iceberg Z-Ordering: Performance Boost</description>
     </item>
     <item>
      <title>LC 100318. 合并两棵树后的最小直径</title>
      <link>https://dirtysalt.github.io/html/lc-100318-find-minimum-diameter-after-merging-two-trees.html</link>
      <pubDate>202406</pubDate>
      <description>https://leetcode.cn/problems/find-minimum-diameter-after-merging-two-trees/description/</description>
     </item>
     <item>
      <title>网络文章@202406</title>
      <link>https://dirtysalt.github.io/html/readings-at-202406.html</link>
      <pubDate>202406</pubDate>
      <description>SpaceX 对复杂系统工程的启发</description>
     </item>
     <item>
      <title>LC 100333. 统计逆序对的数目</title>
      <link>https://dirtysalt.github.io/html/lc-100333-count-the-number-of-inversions.html</link>
      <pubDate>202406</pubDate>
      <description>https://leetcode.cn/problems/count-the-number-of-inversions/description/</description>
     </item>
     <item>
      <title>LC 100327. 求出最长好子序列 II</title>
      <link>https://dirtysalt.github.io/html/lc-100327-find-the-maximum-length-of-a-good-subsequence-ii.html</link>
      <pubDate>202406</pubDate>
      <description>https://leetcode.cn/problems/find-the-maximum-length-of-a-good-subsequence-ii/description/</description>
     </item>
     <item>
      <title>LC 100320. 执行操作可获得的最大总奖励 II</title>
      <link>https://dirtysalt.github.io/html/lc-100320-maximum-total-reward-using-operations-ii.html</link>
      <pubDate>202406</pubDate>
      <description>https://leetcode.cn/problems/maximum-total-reward-using-operations-ii/description/</description>
     </item>
     <item>
      <title>孩子的大脑</title>
      <link>https://dirtysalt.github.io/html/brain-of-the-child.html</link>
      <pubDate>202406</pubDate>
      <description>孩子的大脑 (豆瓣)</description>
     </item>
     <item>
      <title>LC 100306. 不包含相邻元素的子序列的最大和</title>
      <link>https://dirtysalt.github.io/html/lc-100306-maximum-sum-of-subsequence-with-non-adjacent-elements.html</link>
      <pubDate>202405</pubDate>
      <description>https://leetcode.cn/problems/maximum-sum-of-subsequence-with-non-adjacent-elements/description/</description>
     </item>
     <item>
      <title>LC 100321. 优质数对的总数 II</title>
      <link>https://dirtysalt.github.io/html/lc-100321-find-the-number-of-good-pairs-ii.html</link>
      <pubDate>202405</pubDate>
      <description>https://leetcode.cn/problems/find-the-number-of-good-pairs-ii/description/</description>
     </item>
     <item>
      <title>LC 100314. 物块放置查询</title>
      <link>https://dirtysalt.github.io/html/lc-100314-block-placement-queries.html</link>
      <pubDate>202405</pubDate>
      <description>https://leetcode.cn/problems/block-placement-queries/description/</description>
     </item>
     <item>
      <title>LC 100312. 找出分数最低的排列</title>
      <link>https://dirtysalt.github.io/html/lc-100312-find-the-minimum-cost-array-permutation.html</link>
      <pubDate>202405</pubDate>
      <description>https://leetcode.cn/problems/find-the-minimum-cost-array-permutation/description/</description>
     </item>
     <item>
      <title>The Gluten Open-Source Software Project</title>
      <link>https://dirtysalt.github.io/html/the-gluten-open-source-project.html</link>
      <pubDate>202405</pubDate>
      <description>这个项目思路和databricks photon差不多，把spark某些算子通过JNI的方式替换成为C++实现。另外一种思路则是velox/presto, 是直接把presto里面执行引擎部分使用C++重写，其中执行引擎部分作为单独的服务存在。</description>
     </item>
     <item>
      <title>Dremel A Decade of Interactive SQL Analysis at Web Scale</title>
      <link>https://dirtysalt.github.io/html/dremel-a-decade-of-interactive-sql-analysis-at-web-scale.html</link>
      <pubDate>202405</pubDate>
      <description>回顾过去10年Dremel对实时分析数据库的影响，主要有下面这些</description>
     </item>
     <item>
      <title>Integrating Deep Learning Frameworks into Main-Memory Databases</title>
      <link>https://dirtysalt.github.io/html/integrating-deep-learning-frameworks-into-main-memory-databases.html</link>
      <pubDate>202405</pubDate>
      <description>这篇文章主要说怎么把pytorch嵌入到umbra这个数据库里面去。里面有一段总结了目前把ML和DB结合起来的两种方法： a. 直接把从数据库中导出数据，讲究的就数据移动的便携性 b. 直接在DBMS里面调用ML Operator，讲究的就是和ML训练和预测的集成性。</description>
     </item>
     <item>
      <title>Self-Tuning Query Scheduling for Analytical Workloads</title>
      <link>https://dirtysalt.github.io/html/self-tuning-query-scheduling-for-analytical-workloads.html</link>
      <pubDate>202405</pubDate>
      <description>这篇文章主要讨论怎么进行自适应地进行查询调度：</description>
     </item>
     <item>
      <title>网络文章@202405</title>
      <link>https://dirtysalt.github.io/html/readings-at-202405.html</link>
      <pubDate>202405</pubDate>
      <description>揭穿 5 个顽固的系统性能神话 - JabPerf Corp — Debunking 5 Stubborn Systems Performance Myths - JabPerf Corp</description>
     </item>
     <item>
      <title>数据库公司质量管理问题</title>
      <link>https://dirtysalt.github.io/html/quality-questions-about-database-company.html</link>
      <pubDate>202404</pubDate>
      <description>是否会接受performance regression? 如果有某些优化在大量场景有positive, 但是某些case有regression如何处理和对待呢？ 如何处理因为外部系统造成的performance gression, 比如一段时间s3 bucket latency有明显增加或者是不稳定。</description>
     </item>
     <item>
      <title>LC 100293. 找出所有稳定的二进制数组 II</title>
      <link>https://dirtysalt.github.io/html/lc-100293-find-all-possible-stable-binary-arrays-ii.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/find-all-possible-stable-binary-arrays-ii/description/</description>
     </item>
     <item>
      <title>Snowflake产品堆栈</title>
      <link>https://dirtysalt.github.io/html/snowflake-product-stack.html</link>
      <pubDate>202404</pubDate>
      <description>Cortex</description>
     </item>
     <item>
      <title>DBX产品堆栈</title>
      <link>https://dirtysalt.github.io/html/databricks-product-stack.html</link>
      <pubDate>202404</pubDate>
      <description>https://docs.databricks.com/en/index.html</description>
     </item>
     <item>
      <title>CMUDB Talk on Photon</title>
      <link>https://dirtysalt.github.io/html/cmudb-talk-on-photon.html</link>
      <pubDate>202404</pubDate>
      <description>(S2024 #18 - Databricks Photon / Spark SQL (CMU Advanced Database Systems) - YouTube</description>
     </item>
     <item>
      <title>LC 100259. 划分数组得到最小的值之和</title>
      <link>https://dirtysalt.github.io/html/lc-100259-minimum-sum-of-values-by-dividing-array.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/minimum-sum-of-values-by-dividing-array/description/</description>
     </item>
     <item>
      <title>LC 100267. 单面值组合的第 K 小金额</title>
      <link>https://dirtysalt.github.io/html/lc-100267-kth-smallest-amount-with-single-denomination-combination.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/kth-smallest-amount-with-single-denomination-combination/description/</description>
     </item>
     <item>
      <title>网络文章@202404</title>
      <link>https://dirtysalt.github.io/html/reading-at-202404.html</link>
      <pubDate>202404</pubDate>
      <description>在中国做To B生意真是太苦了</description>
     </item>
     <item>
      <title>LC 3108. 带权图里旅途的最小代价</title>
      <link>https://dirtysalt.github.io/html/lc-3108-minimum-cost-walk-in-weighted-graph.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/minimum-cost-walk-in-weighted-graph/description/</description>
     </item>
     <item>
      <title>LC 100240. 最小化曼哈顿距离</title>
      <link>https://dirtysalt.github.io/html/lc-100240-minimize-manhattan-distances.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/minimize-manhattan-distances/description/</description>
     </item>
     <item>
      <title>LC 100241. 求出所有子序列的能量和未命名</title>
      <link>https://dirtysalt.github.io/html/lc-100241-find-the-sum-of-the-power-of-all-subsequences.html</link>
      <pubDate>202403</pubDate>
      <description>https://leetcode.cn/problems/find-the-sum-of-the-power-of-all-subsequences/description/</description>
     </item>
     <item>
      <title>LC 100249. 替换字符串中的问号使分数最小</title>
      <link>https://dirtysalt.github.io/html/lc-100249-replace-question-marks-in-string-to-minimize-its-value.html</link>
      <pubDate>202403</pubDate>
      <description>https://leetcode.cn/problems/replace-question-marks-in-string-to-minimize-its-value/description/</description>
     </item>
     <item>
      <title>(Almost) Every infrastructure decision I endorse or regret after 4 years running infrastructure at a startup</title>
      <link>https://dirtysalt.github.io/html/every-infrastructure-decision-i-endorse-or-regret-after-4-years-running-infrastructure-at-a-startup.html</link>
      <pubDate>202403</pubDate>
      <description>https://cep.dev/posts/every-infrastructure-decision-i-endorse-or-regret-after-4-years-running-infrastructure-at-a-startup/</description>
     </item>
     <item>
      <title>FoundationDB: A Distributed Unbundled Transactional Key Value Store</title>
      <link>https://dirtysalt.github.io/html/foudationdb-paper.html</link>
      <pubDate>202403</pubDate>
      <description>https://www.foundationdb.org/files/fdb-paper.pdf</description>
     </item>
     <item>
      <title>AOC2023-Day25 求解图的最小割</title>
      <link>https://dirtysalt.github.io/html/aoc2023-day25-graph-min-cut-karger.html</link>
      <pubDate>202402</pubDate>
      <description>aoc2023 day25 这题 https://adventofcode.com/2023/day/25</description>
     </item>
     <item>
      <title>Commit to competence in this coming year 致力于来年的能力</title>
      <link>https://dirtysalt.github.io/html/commit-to-competence-in-this-coming-year.html</link>
      <pubDate>202402</pubDate>
      <description>注：这篇文章写的非常好，我最近在读《庄子》，无用和有用之间其实都是人为界定的，但是人为的标准同时也在不断地变化中。现在看起来无用的东西，说不定未来会有用。所以做任何事情，如果可以抛开有用和无用的判断，只专注事情本身，把这件事情做到可以称为美的境界。</description>
     </item>
     <item>
      <title>LC 3031. 将单词恢复初始状态所需的最短时间 II</title>
      <link>https://dirtysalt.github.io/html/lc-3031-minimum-time-to-revert-word-to-initial-state-ii.html</link>
      <pubDate>202402</pubDate>
      <description>https://leetcode.cn/problems/minimum-time-to-revert-word-to-initial-state-ii/description/</description>
     </item>
     <item>
      <title>网络文章@202402</title>
      <link>https://dirtysalt.github.io/html/readings-at-202402.html</link>
      <pubDate>202402</pubDate>
      <description>编译历史：C 编译器简介 — Compiling History: A brief tour of C compilers</description>
     </item>
     <item>
      <title>LC 3022. 给定操作次数内使剩余元素的或值最小</title>
      <link>https://dirtysalt.github.io/html/lc-3022-minimize-or-of-remaining-elements-using-operations.html</link>
      <pubDate>202401</pubDate>
      <description>https://leetcode.cn/problems/minimize-or-of-remaining-elements-using-operations/description/</description>
     </item>
     <item>
      <title>All my favorite tracing tools</title>
      <link>https://dirtysalt.github.io/html/all-my-fav-tracing-tools.html</link>
      <pubDate>202401</pubDate>
      <description>https://thume.ca/2023/12/02/tracing-methods/</description>
     </item>
     <item>
      <title>LC 3012. 通过操作使数组长度最小</title>
      <link>https://dirtysalt.github.io/html/lc-3012-minimize-length-of-array-using-operations.html</link>
      <pubDate>202401</pubDate>
      <description>https://leetcode.cn/problems/minimize-length-of-array-using-operations/description/</description>
     </item>
     <item>
      <title>网络文章@202401</title>
      <link>https://dirtysalt.github.io/html/readings-at-202401.html</link>
      <pubDate>202401</pubDate>
      <description>And let’s take Meta as a good example. Their Instagram app alone is used by over 300 million people in Europe. Let’s just say for easy math there’s 250 million of those in the EU. In order to distribute Instagram on, say, a new Microsoft iOS App Store, Meta would have to pay Apple $11,277,174 PER MONTH(!!!) as a “Core Technology Fee”. That’s $135 MILLION DOLLARS per year. Just for the privilege of putting Instagram into a competing store. No fee if they stay in Apple’s App Store exclusively.</description>
     </item>
     <item>
      <title>What Every Developer Should Know About GPU Computing</title>
      <link>https://dirtysalt.github.io/html/what-every-developer-should-know-about-gpu-computing.html</link>
      <pubDate>202401</pubDate>
      <description>What Every Developer Should Know About GPU Computing</description>
     </item>
     <item>
      <title>LC 2983. 回文串重新排列查询</title>
      <link>https://dirtysalt.github.io/html/lc-2983-palindrome-rearrangement-queries.html</link>
      <pubDate>202401</pubDate>
      <description>https://leetcode.cn/problems/palindrome-rearrangement-queries/description/</description>
     </item>
     <item>
      <title>LC 2977. 转换字符串的最小成本 II</title>
      <link>https://dirtysalt.github.io/html/lc-2977-minimum-cost-to-convert-string-ii.html</link>
      <pubDate>202312</pubDate>
      <description>https://leetcode.cn/problems/minimum-cost-to-convert-string-ii/</description>
     </item>
     <item>
      <title>LC 2972. 统计移除递增子数组的数目 II</title>
      <link>https://dirtysalt.github.io/html/lc-2972-count-the-number-of-incremovable-subarrays-ii.html</link>
      <pubDate>202312</pubDate>
      <description>https://leetcode.cn/problems/count-the-number-of-incremovable-subarrays-ii/</description>
     </item>
     <item>
      <title>data skew hash join优化方法</title>
      <link>https://dirtysalt.github.io/html/optimize-data-skew-hash-join.html</link>
      <pubDate>202312</pubDate>
      <description>Skew join optimization | Databricks on AWS</description>
     </item>
     <item>
      <title>Photon: A Fast Query Engine for Lakehouse Systems</title>
      <link>https://dirtysalt.github.io/html/databricks-photon-paper.html</link>
      <pubDate>202312</pubDate>
      <description>Photon: A Fast Query Engine for Lakehouse Systems https://dl.acm.org/doi/10.1145/3514221.3526054</description>
     </item>
     <item>
      <title>The Dataflow Model: A Practical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale, Unbounded, Out-of-Order Data Processing</title>
      <link>https://dirtysalt.github.io/html/google-the-dataflow-model-paper.html</link>
      <pubDate>202312</pubDate>
      <description>The Dataflow Model: A Practical Approach to Balancing Correctness, Latency, and Cost in Massive-Scale, Unbounded, Out-of-Order Data Processing</description>
     </item>
     <item>
      <title>Cloud-Native Transactions and Analytics in SingleStore</title>
      <link>https://dirtysalt.github.io/html/singlestore-paper.html</link>
      <pubDate>202312</pubDate>
      <description>Cloud-Native Transactions and Analytics in SingleStore https://dl.acm.org/doi/pdf/10.1145/3514221.3526055</description>
     </item>
     <item>
      <title>StarRocks Primary Key：实时更新不可缺少的利器</title>
      <link>https://dirtysalt.github.io/html/starrocks-primary-key-storage-for-realtime-update.html</link>
      <pubDate>202312</pubDate>
      <description>https://mp.weixin.qq.com/s/GG7_PnrwTrMbz82-69Y-Pg</description>
     </item>
     <item>
      <title>LC 2968. 执行操作使频率分数最大</title>
      <link>https://dirtysalt.github.io/html/lc-2968-apply-operations-to-maximize-frequency-score.html</link>
      <pubDate>202312</pubDate>
      <description>https://leetcode.cn/problems/apply-operations-to-maximize-frequency-score/description/</description>
     </item>
     <item>
      <title>LC 2967. 使数组成为等数数组的最小代价</title>
      <link>https://dirtysalt.github.io/html/lc-2967-minimum-cost-to-make-array-equalindromic.html</link>
      <pubDate>202312</pubDate>
      <description>https://leetcode.cn/problems/minimum-cost-to-make-array-equalindromic/</description>
     </item>
     <item>
      <title>From Cloud Computing to Sky Computing</title>
      <link>https://dirtysalt.github.io/html/from-cloud-computing-to-sky-computing.html</link>
      <pubDate>202312</pubDate>
      <description></description>
     </item>
     <item>
      <title>Always Measure One Level Deeper</title>
      <link>https://dirtysalt.github.io/html/always-measure-one-level-deeper.html</link>
      <pubDate>202312</pubDate>
      <description>作者是JOHN OUSTERHOUT, 主页在 https://web.stanford.edu/~ouster/cgi-bin/home.php 搞过不少系统，最近比较知名的系统就是Raft算法和RAMCloud. 这篇文章作者主要抱怨系统性能分析不够细致比较粗糙，同时也错过了不少系统优化和对系统更加深入理解的机会。</description>
     </item>
     <item>
      <title>网络文章@202312</title>
      <link>https://dirtysalt.github.io/html/readings-at-202312.html</link>
      <pubDate>202312</pubDate>
      <description>The Big Cloud Exit FAQ — 大云退出常见问题解答</description>
     </item>
     <item>
      <title>LC 100136. 统计好分割方案的数目</title>
      <link>https://dirtysalt.github.io/html/lc-100136-count-the-number-of-good-partitions.html</link>
      <pubDate>202312</pubDate>
      <description>https://leetcode.cn/problems/count-the-number-of-good-partitions/description/</description>
     </item>
     <item>
      <title>Producing Wrong Data Without Doing Anything Obviously Wrong!</title>
      <link>https://dirtysalt.github.io/html/producing-wrong-data-without-doing-anything-obviously-wrong.html</link>
      <pubDate>202312</pubDate>
      <description>Producing Wrong Data Without Doing Anything Obviously Wrong!</description>
     </item>
     <item>
      <title>SQLite: Past, Present, and Future</title>
      <link>https://dirtysalt.github.io/html/sqlite-past-present-and-future.html</link>
      <pubDate>202312</pubDate>
      <description>ite: Past, Present, and Future</description>
     </item>
     <item>
      <title>Napa: Powering Scalable Data Warehousing with Robust Query Performance at Google</title>
      <link>https://dirtysalt.github.io/html/google-napa-paper.html</link>
      <pubDate>202312</pubDate>
      <description>https://research.google/pubs/pub50617/</description>
     </item>
     <item>
      <title>无限的游戏(The Infinite Game)</title>
      <link>https://dirtysalt.github.io/html/the-infinite-game.html</link>
      <pubDate>202312</pubDate>
      <description>这个作者就是就是我很早之前看过the golden circle的作者 Simon Sinek - The Golden Circle - TedTalks 2009 - YouTube</description>
     </item>
     <item>
      <title>LC 2954. 统计感冒序列的数目</title>
      <link>https://dirtysalt.github.io/html/lc-2954-count-the-number-of-infection-sequences.html</link>
      <pubDate>202312</pubDate>
      <description>https://leetcode.cn/problems/count-the-number-of-infection-sequences/description/</description>
     </item>
     <item>
      <title>LC 2953. 统计完全子字符串</title>
      <link>https://dirtysalt.github.io/html/lc-2953-count-complete-substrings.html</link>
      <pubDate>202312</pubDate>
      <description>https://leetcode.cn/problems/count-complete-substrings/description/</description>
     </item>
     <item>
      <title>LC 2952. 需要添加的硬币的最小数量</title>
      <link>https://dirtysalt.github.io/html/lc-2952-minimum-number-of-coins-to-be-added.html</link>
      <pubDate>202312</pubDate>
      <description>https://leetcode.cn/problems/minimum-number-of-coins-to-be-added/description/</description>
     </item>
     <item>
      <title>LeanStore: In-Memory Data Management Beyond Main Memory</title>
      <link>https://dirtysalt.github.io/html/leanstore-in-memory-data-management-beyond-main-memory.html</link>
      <pubDate>202312</pubDate>
      <description>LeanStore: In-Memory Data Management Beyond Main Memory</description>
     </item>
     <item>
      <title>Adaptive self-tuning memory in DB2</title>
      <link>https://dirtysalt.github.io/html/adaptive-self-tunning-memory-in-db2.html</link>
      <pubDate>202312</pubDate>
      <description>https://www.vldb.org/conf/2006/p1081-storm.pdf</description>
     </item>
     <item>
      <title>网络文章@202311</title>
      <link>https://dirtysalt.github.io/html/readings-at-202311.html</link>
      <pubDate>202311</pubDate>
      <description>京东京造 K2 键盘 F5/F6 按键问题 – 小居</description>
     </item>
     <item>
      <title>SQL MM in Oracle9i</title>
      <link>https://dirtysalt.github.io/html/sql-memory-management-in-oracle9i.html</link>
      <pubDate>202311</pubDate>
      <description>SQL memory management in Oracle9i | Proceedings of the 28th international conference on Very Large Data Bases</description>
     </item>
     <item>
      <title>Chimp: Efficient Lossless Floating Point Compression for Time Series Databases</title>
      <link>https://dirtysalt.github.io/html/chimp-floating-point-compression.html</link>
      <pubDate>202311</pubDate>
      <description>https://www.vldb.org/pvldb/vol15/p3058-liakos.pdf</description>
     </item>
     <item>
      <title>LC 2945. 找到最大非递减数组的长度</title>
      <link>https://dirtysalt.github.io/html/lc-2945-find-maximum-non-decreasing-array-length.html</link>
      <pubDate>202311</pubDate>
      <description>https://leetcode.cn/problems/find-maximum-non-decreasing-array-length/</description>
     </item>
     <item>
      <title>Efficient External Sorting in DuckDB</title>
      <link>https://dirtysalt.github.io/html/efficient-external-sorting-in-duckdb.html</link>
      <pubDate>202311</pubDate>
      <description>https://duckdb.org/2021/08/27/external-sorting.html</description>
     </item>
     <item>
      <title>A Deep Dive into Common Open Formats for Analytical DBMSs</title>
      <link>https://dirtysalt.github.io/html/a-deep-dive-into-common-open-formats-for-olap.html</link>
      <pubDate>202311</pubDate>
      <description>https://www.vldb.org/pvldb/vol16/p3044-liu.pdf</description>
     </item>
     <item>
      <title>LC 2939. 最大异或乘积</title>
      <link>https://dirtysalt.github.io/html/lc-2939-maximum-xor-product.html</link>
      <pubDate>202311</pubDate>
      <description>https://leetcode.cn/problems/maximum-xor-product/description/</description>
     </item>
     <item>
      <title>使用ByteBuddy来截获Java类实现</title>
      <link>https://dirtysalt.github.io/html/use-byte-buddy-to-intercept-method-of-java-class.html</link>
      <pubDate>202311</pubDate>
      <description>最近要对一个Hadoop FileSystem类（以及子类）实现进行扩展。Hadoop FileSystem实现上比较简单，在许多地方只是假设整个JVM只有一个UGI存在，所以我需要在上面做一些扩展来支持多UGI：在进行一些方法调用之前需要切换UGI(UserGroupInformation)，这样可以来实现多账号切换。</description>
     </item>
     <item>
      <title>The Story of AWS Glue</title>
      <link>https://dirtysalt.github.io/html/the-story-of-aws-glue.html</link>
      <pubDate>202311</pubDate>
      <description>https://www.vldb.org/pvldb/vol16/p3557-saxena.pdf</description>
     </item>
     <item>
      <title>LC 100124. 找出强数对的最大异或值 II</title>
      <link>https://dirtysalt.github.io/html/lc-100124-maximum-strong-pair-xor-ii.html</link>
      <pubDate>202311</pubDate>
      <description>https://leetcode.cn/problems/maximum-strong-pair-xor-ii/</description>
     </item>
     <item>
      <title>Exploiting Cloud Object Storage for High-Performance Analytics</title>
      <link>https://dirtysalt.github.io/html/exploiting-cloud-object-storage-for-high-performance-analytics.html</link>
      <pubDate>202311</pubDate>
      <description>这篇论文主要就是讨论如何有效地利用好Cloud Object Storage，如何有效地拉去S3这样的数据，以及如何在Table Scan Operator上结合起来。</description>
     </item>
     <item>
      <title>Firecracker: Lightweight Virtualization for Serverless Applications</title>
      <link>https://dirtysalt.github.io/html/amazon-firecracker.html</link>
      <pubDate>202311</pubDate>
      <description>Firecracker: Lightweight Virtualization for Serverless Applications | USENIX</description>
     </item>
     <item>
      <title>LC 100112. 平衡子序列的最大和</title>
      <link>https://dirtysalt.github.io/html/lc-100112-maximum-balanced-subsequence-sum.html</link>
      <pubDate>202311</pubDate>
      <description>https://leetcode.cn/problems/maximum-balanced-subsequence-sum/description/</description>
     </item>
     <item>
      <title>LC 2916. 子数组不同元素数目的平方和 II</title>
      <link>https://dirtysalt.github.io/html/lc-2916-subarrays-distinct-element-sum-of-squares-ii.html</link>
      <pubDate>202311</pubDate>
      <description>https://leetcode.cn/problems/subarrays-distinct-element-sum-of-squares-ii/</description>
     </item>
     <item>
      <title>LC 2902. 和带限制的子多重集合的数目</title>
      <link>https://dirtysalt.github.io/html/lc-2902-count-of-sub-multisets-with-bounded-sum.html</link>
      <pubDate>202310</pubDate>
      <description>2902. 和带限制的子多重集合的数目 - 力扣（LeetCode）</description>
     </item>
     <item>
      <title>LC 8026. 构造乘积矩阵</title>
      <link>https://dirtysalt.github.io/html/lc-8026-construct-product-matrix.html</link>
      <pubDate>202310</pubDate>
      <description>8026. 构造乘积矩阵 - 力扣（LeetCode）</description>
     </item>
     <item>
      <title>尝试迁移到Windows上</title>
      <link>https://dirtysalt.github.io/html/attempt-to-work-on-windows.html</link>
      <pubDate>202310</pubDate>
      <description></description>
     </item>
     <item>
      <title>网络文章@202310</title>
      <link>https://dirtysalt.github.io/html/readings-at-202310.html</link>
      <pubDate>202310</pubDate>
      <description>每个人每天都只有24小时，希望我的选择真的是我的选择 | 枫言枫语</description>
     </item>
     <item>
      <title>投资是怎么赚钱的</title>
      <link>https://dirtysalt.github.io/html/how-investment-make-money.html</link>
      <pubDate>202310</pubDate>
      <description>30分钟讲述投资底层逻辑的科普视频</description>
     </item>
     <item>
      <title>LC 2867. 统计树中的合法路径数目</title>
      <link>https://dirtysalt.github.io/html/lc-2867-count-valid-paths-in-a-tree.html</link>
      <pubDate>202309</pubDate>
      <description>https://leetcode.cn/problems/count-valid-paths-in-a-tree/description/</description>
     </item>
     <item>
      <title>LC 2866. 美丽塔 II</title>
      <link>https://dirtysalt.github.io/html/lc-2866-beautiful-towers-ii.html</link>
      <pubDate>202309</pubDate>
      <description>https://leetcode.cn/problems/beautiful-towers-ii/</description>
     </item>
     <item>
      <title>LC 8020. 字符串转换</title>
      <link>https://dirtysalt.github.io/html/lc-8020-string-transformation.html</link>
      <pubDate>202309</pubDate>
      <description>https://leetcode.cn/problems/string-transformation/description/</description>
     </item>
     <item>
      <title>网络文章@202309</title>
      <link>https://dirtysalt.github.io/html/readings-at-202309.html</link>
      <pubDate>202309</pubDate>
      <description>Kamal 1.0 — 卡迈勒1.0 https://world.hey.com/dhh/kamal-1-0-5304ff9e</description>
     </item>
     <item>
      <title>LC 2836. 在传球游戏中最大化函数值</title>
      <link>https://dirtysalt.github.io/html/lc-2836-maximize-value-of-function-in-a-ball-passing-game.html</link>
      <pubDate>202309</pubDate>
      <description>https://leetcode.cn/problems/maximize-value-of-function-in-a-ball-passing-game/description/</description>
     </item>
     <item>
      <title>LC 2846. 边权重均等查询</title>
      <link>https://dirtysalt.github.io/html/lc-2846-minimum-edge-weight-equilibrium-queries-in-a-tree.html</link>
      <pubDate>202309</pubDate>
      <description>https://leetcode.cn/problems/minimum-edge-weight-equilibrium-queries-in-a-tree/</description>
     </item>
     <item>
      <title>Confessions of a Advertising Man(一个广告人的自白)</title>
      <link>https://dirtysalt.github.io/html/confession-of-a-advertising-man.html</link>
      <pubDate>202308</pubDate>
      <description>https://book.douban.com/subject/1031526/</description>
     </item>
     <item>
      <title>LC 8013. 范围中美丽整数的数目</title>
      <link>https://dirtysalt.github.io/html/lc-8013-number-of-beautiful-integers-in-the-range.html</link>
      <pubDate>202308</pubDate>
      <description>https://leetcode.cn/problems/number-of-beautiful-integers-in-the-range/description/</description>
     </item>
     <item>
      <title>LC 2809. 使数组和小于等于 x 的最少时间</title>
      <link>https://dirtysalt.github.io/html/lc-2809-minimum-time-to-make-array-sum-at-most-x.html</link>
      <pubDate>202308</pubDate>
      <description>https://leetcode.cn/problems/minimum-time-to-make-array-sum-at-most-x/description/</description>
     </item>
     <item>
      <title>LC 2813. 子序列最大优雅度</title>
      <link>https://dirtysalt.github.io/html/lc-2813-maximum-elegance-of-a-k-length-subsequence.html</link>
      <pubDate>202308</pubDate>
      <description>这题看了题解，写的真好 https://leetcode.cn/problems/maximum-elegance-of-a-k-length-subsequence/solutions/2375128/fan-hui-tan-xin-pythonjavacgo-by-endless-v2w1/</description>
     </item>
     <item>
      <title>LC 2790. 长度递增组的最大数目</title>
      <link>https://dirtysalt.github.io/html/lc-2790-maximum-number-of-groups-with-increasing-length.html</link>
      <pubDate>202308</pubDate>
      <description>https://leetcode.cn/problems/maximum-number-of-groups-with-increasing-length/description/</description>
     </item>
     <item>
      <title>Sapiens: A Brief History of Humankind(人类简史)</title>
      <link>https://dirtysalt.github.io/html/sapiens-a-brief-history-of-humankind.html</link>
      <pubDate>202308</pubDate>
      <description>https://book.douban.com/subject/25985021/</description>
     </item>
     <item>
      <title>LC 2791. 树中可以形成回文的路径数</title>
      <link>https://dirtysalt.github.io/html/lc-2791-count-paths-that-can-form-a-palindrome-in-a-tree.html</link>
      <pubDate>202308</pubDate>
      <description>https://leetcode.cn/problems/count-paths-that-can-form-a-palindrome-in-a-tree/</description>
     </item>
     <item>
      <title>晚明</title>
      <link>https://dirtysalt.github.io/html/ending-of-ming-dynasty.html</link>
      <pubDate>202308</pubDate>
      <description>https://book.douban.com/subject/35383720/</description>
     </item>
     <item>
      <title>LC 6957. 统计范围内的步进数字数目</title>
      <link>https://dirtysalt.github.io/html/lc-6957-count-stepping-numbers-in-range.html</link>
      <pubDate>202308</pubDate>
      <description>https://leetcode.cn/problems/count-stepping-numbers-in-range/</description>
     </item>
     <item>
      <title>网络文章@202308</title>
      <link>https://dirtysalt.github.io/html/readings-at-202308.html</link>
      <pubDate>202308</pubDate>
      <description>Not everyone can be the best — 不是每个人都能成为最好的(https://world.hey.com/dhh/not-everyone-can-be-the-best-ef9ebacd)</description>
     </item>
     <item>
      <title>Homo Deus：A Brief History of Tomorrow(未来简史)</title>
      <link>https://dirtysalt.github.io/html/homo-deus-brief-history-of-tomorrow.html</link>
      <pubDate>202308</pubDate>
      <description>https://book.douban.com/subject/26943161/</description>
     </item>
     <item>
      <title>巴菲特致股东的信(The Essays of Warren Buffett)</title>
      <link>https://dirtysalt.github.io/html/the-essays-of-warren-buffett.html</link>
      <pubDate>202308</pubDate>
      <description>囫囵吞枣地过了一遍，一些细节比如会计税务啥的因为不懂都是很快地浏览过去。</description>
     </item>
     <item>
      <title>Java Class 加载乱象一例</title>
      <link>https://dirtysalt.github.io/html/an-example-of-java-class-loading-chaos.html</link>
      <pubDate>202307</pubDate>
      <description></description>
     </item>
     <item>
      <title>在StarRocks中使用UDWF计算用户留存</title>
      <link>https://dirtysalt.github.io/html/use-udwf-to-compute-retention-in-starrocks.html</link>
      <pubDate>202307</pubDate>
      <description></description>
     </item>
     <item>
      <title>《手册》中文 - 爱比克泰德</title>
      <link>https://dirtysalt.github.io/html/enchiridion-by-epictetus.html</link>
      <pubDate>202307</pubDate>
      <description>《手册》中文全文 - 知乎(https://zhuanlan.zhihu.com/p/58638680)</description>
     </item>
     <item>
      <title>LC 6919. 使数组中的所有元素都等于零</title>
      <link>https://dirtysalt.github.io/html/lc-6919-apply-operations-to-make-all-array-elements-equal-to-zero.html</link>
      <pubDate>202307</pubDate>
      <description>https://leetcode.cn/problems/apply-operations-to-make-all-array-elements-equal-to-zero/</description>
     </item>
     <item>
      <title>Understanding Cost Models</title>
      <link>https://dirtysalt.github.io/html/understanding-cost-models.html</link>
      <pubDate>202307</pubDate>
      <description>https://justinjaffray.com/understanding-cost-models/</description>
     </item>
     <item>
      <title>The Product-Minded Software Engineer 以产品为中心的软件工程师</title>
      <link>https://dirtysalt.github.io/html/the-product-minded-engineer.html</link>
      <pubDate>202307</pubDate>
      <description>The Product-Minded Software Engineer - The Pragmatic Engineer — 以产品为中心的软件工程师 - 务实的工程师(https://blog.pragmaticengineer.com/the-product-minded-engineer/)</description>
     </item>
     <item>
      <title>网络文章@202307</title>
      <link>https://dirtysalt.github.io/html/readings-at-202307.html</link>
      <pubDate>202307</pubDate>
      <description>(22) The 2 Most Important Skills For the Rest Of Your Life | Yuval Noah Harari on Impact Theory - YouTube(https://www.youtube.com/watch?v=x6tMLAjPVyo&list=WL&index=1)</description>
     </item>
     <item>
      <title>野生问题</title>
      <link>https://dirtysalt.github.io/html/wild-problems.html</link>
      <pubDate>202306</pubDate>
      <description>《野生问题》（上）：你愿意变成吸血鬼吗？ - 得到APP(https://www.dedao.cn/course/article?id=7NqeGmE2w4bnK4EqpdVP31lv5WZ9rj&source=search)</description>
     </item>
     <item>
      <title>KK 劝世良言</title>
      <link>https://dirtysalt.github.io/html/excellent-advice-for-living-kevin-kelly.html</link>
      <pubDate>202306</pubDate>
      <description>Excellent Advice for Living (豆瓣)</description>
     </item>
     <item>
      <title>网络文章@202306</title>
      <link>https://dirtysalt.github.io/html/readings-at-202306.html</link>
      <pubDate>202306</pubDate>
      <description>Wisdom is not what you know — 智慧不是你所知道的(https://world.hey.com/dhh/wisdom-is-not-what-you-know-e8cf9191)</description>
     </item>
     <item>
      <title>LC 2719. 统计整数数目</title>
      <link>https://dirtysalt.github.io/html/lc-2719-count-of-integers.html</link>
      <pubDate>202306</pubDate>
      <description>还没有接触过这种数位 dp 的算法，我看了一下 讲解，大致思路就是：</description>
     </item>
     <item>
      <title>从摄像想到信息稀释效应</title>
      <link>https://dirtysalt.github.io/html/information-dilution-effect.html</link>
      <pubDate>202306</pubDate>
      <description>我来到机场，隔着玻璃，可以看到一家巨大的飞机停泊在我的面前。这架飞机是一个庞然大物，伸展的机身，巨大的涡轮，宽广的机翼，我想用手机记录下来，不仅是它的巨大，还有它的每个细节。</description>
     </item>
     <item>
      <title>美国出差日记 - 6月</title>
      <link>https://dirtysalt.github.io/html/usa-trip-2023-jun.html</link>
      <pubDate>202306</pubDate>
      <description>加州（和附近）各个城市有许多博物和适合孩子参观的科学馆和水族馆，另外就是trail特别多。</description>
     </item>
     <item>
      <title>Joe Duffy's Software Leadership Series</title>
      <link>https://dirtysalt.github.io/html/joe-duffy-software-leadership-series.html</link>
      <pubDate>202306</pubDate>
      <description>http://joeduffyblog.com/2013/02/17/software-leadership-series/</description>
     </item>
     <item>
      <title>Think real hard</title>
      <link>https://dirtysalt.github.io/html/think-real-hard.html</link>
      <pubDate>202306</pubDate>
      <description>https://www.benkuhn.net/thinkrealhard/</description>
     </item>
     <item>
      <title>How To Be Successful</title>
      <link>https://dirtysalt.github.io/html/how-to-be-successful.html</link>
      <pubDate>202306</pubDate>
      <description>https://blog.samaltman.com/how-to-be-successful</description>
     </item>
     <item>
      <title>You don’t need to work on hard problems</title>
      <link>https://dirtysalt.github.io/html/you-dont-need-to-work-on-hard-problems.html</link>
      <pubDate>202306</pubDate>
      <description>https://www.benkuhn.net/hard/</description>
     </item>
     <item>
      <title>10x (engineer, context) pairs</title>
      <link>https://dirtysalt.github.io/html/myth-10x-engineer-context-paris.html</link>
      <pubDate>202306</pubDate>
      <description>10x (engineer, context) pairs | benkuhn.net</description>
     </item>
     <item>
      <title>Some mistakes I made as a new manager</title>
      <link>https://dirtysalt.github.io/html/mistakess-as-new-manager.html</link>
      <pubDate>202306</pubDate>
      <description>Some mistakes I made as a new manager | benkuhn.net</description>
     </item>
     <item>
      <title>抢占心智</title>
      <link>https://dirtysalt.github.io/html/seize-mind-and-market.html</link>
      <pubDate>202305</pubDate>
      <description>https://book.douban.com/subject/30281784/</description>
     </item>
     <item>
      <title>像火箭科学家一样思考（Think Like a Rocket Scientist）</title>
      <link>https://dirtysalt.github.io/html/think-like-a-rocket-scientist.html</link>
      <pubDate>202305</pubDate>
      <description>https://book.douban.com/subject/35228079/</description>
     </item>
     <item>
      <title>创造(Build: An Unorthodox Guide to Making Things Worth Making)</title>
      <link>https://dirtysalt.github.io/html/build-an-unorthodox-guide-to-making-things-worth-making.html</link>
      <pubDate>202305</pubDate>
      <description>https://book.douban.com/subject/36071759/</description>
     </item>
     <item>
      <title>LC 2699. 修改图中的边权</title>
      <link>https://dirtysalt.github.io/html/lc-2699-modify-graph-edge-weights.html</link>
      <pubDate>202305</pubDate>
      <description>https://leetcode.cn/problems/modify-graph-edge-weights/</description>
     </item>
     <item>
      <title>美国出差日记 - 5月</title>
      <link>https://dirtysalt.github.io/html/usa-trip-2023-may.html</link>
      <pubDate>202305</pubDate>
      <description>5.1 - 5.5 上班</description>
     </item>
     <item>
      <title>网络文章@202305</title>
      <link>https://dirtysalt.github.io/html/readings-at-202305.html</link>
      <pubDate>202305</pubDate>
      <description>In defense of blub studies | benkuhn.net</description>
     </item>
     <item>
      <title>ChatGPT Prompt Design Doc</title>
      <link>https://dirtysalt.github.io/html/chatgpt-prompt-design-doc.html</link>
      <pubDate>202305</pubDate>
      <description>内容就是来自官网的这篇链接，里面提到了一些chatgpt prompt的设计技巧 https://platform.openai.com/docs/guides/completion/prompt-design</description>
     </item>
     <item>
      <title>ChatGPT Prompt Engineering for Developers</title>
      <link>https://dirtysalt.github.io/html/chatgpt-prompt-engineering-for-developers.html</link>
      <pubDate>202305</pubDate>
      <description>花了点时间看了一下这门课程 DLAI - Learning Platform Prototype 难度不是很大，感觉非常值得，总之就是教你怎么写prompt.</description>
     </item>
     <item>
      <title>用GPT搭建问答系统</title>
      <link>https://dirtysalt.github.io/html/build-ask-system-on-gpt.html</link>
      <pubDate>202305</pubDate>
      <description>一直没有想清楚怎么使用GPT搭建问答系统，我大概知道要做docs和query embedding, 但是不知道匹配到了文档之后，怎么把文档解释出来。</description>
     </item>
     <item>
      <title>莎士比亚戏剧集</title>
      <link>https://dirtysalt.github.io/html/tales-from-shakespeare.html</link>
      <pubDate>202305</pubDate>
      <description></description>
     </item>
     <item>
      <title>文明之光</title>
      <link>https://dirtysalt.github.io/html/enlightment-of-civilization.html</link>
      <pubDate>202305</pubDate>
      <description>https://book.douban.com/subject/26839342/</description>
     </item>
     <item>
      <title>美国出差日记 - 4月</title>
      <link>https://dirtysalt.github.io/html/usa-trip-2023-apr.html</link>
      <pubDate>202304</pubDate>
      <description>4.3 - 4.7 上班</description>
     </item>
     <item>
      <title>一种基于探测的自适应IO并发实现</title>
      <link>https://dirtysalt.github.io/html/an-adaptive-io-tasks-implementation-based-on-speculation.html</link>
      <pubDate>202304</pubDate>
      <description>设计总结：</description>
     </item>
     <item>
      <title>美国出差日记 - 3月</title>
      <link>https://dirtysalt.github.io/html/usa-trip-2023-mar.html</link>
      <pubDate>202303</pubDate>
      <description>3.11 晚上约好了几个前同事去中餐馆吃饭，来了6个人。littlefucker带家属开车50km也来了。没有预定，但是没有想到人特别多，排队快100分钟，迟到了晚上差不多22:00. 大家聊得比较欢乐，我也学到了不少东西。一顿下来6个人共计540，AA下来90$感觉有点心疼。在美国赚钱美国花还是好。</description>
     </item>
     <item>
      <title>lzo压缩算法和codec</title>
      <link>https://dirtysalt.github.io/html/lzo-algorithm-and-codec.html</link>
      <pubDate>202303</pubDate>
      <description>这几天和一个同学看看将lzo引入SR. 我本来觉得应该是挺简单的事情，因为之前apache/orc下面就有个lzo实现，可能port过来就好了。谁知道这个实现和hadoop lzocodec差别还挺大的，最后这个同学不知道从哪里了解到了hadoop lzocodec的实现，搞成C++代码 https://github.com/StarRocks/starrocks/pull/20251/files</description>
     </item>
     <item>
      <title>时区偏移不是固定的</title>
      <link>https://dirtysalt.github.io/html/timezone-offset-is-not-fixed.html</link>
      <pubDate>202303</pubDate>
      <description>问题来源是修复这个bug，Shanghai时区的日期问题</description>
     </item>
     <item>
      <title>基于开源项目构建产品的思考</title>
      <link>https://dirtysalt.github.io/html/some-thoughts-on-open-source-product-market.html</link>
      <pubDate>202303</pubDate>
      <description>https://opensource.com/article/21/10/open-source-product-market</description>
     </item>
     <item>
      <title>开源：从社区到商业化</title>
      <link>https://dirtysalt.github.io/html/open-source-from-community-to-commercialization.html</link>
      <pubDate>202303</pubDate>
      <description>https://a16z.com/2019/10/04/open-source-from-community-to-commercialization/</description>
     </item>
     <item>
      <title>美国出差日记 - 2月</title>
      <link>https://dirtysalt.github.io/html/usa-trip-2023-feb.html</link>
      <pubDate>202302</pubDate>
      <description>2.23 出境的时候被关小黑屋，当了差不多半个多小时。最后结果是海关依然对我入境动机持有怀疑态度，但是还是让我可以在境内待上3个月。吃饭和开车是最先需要习惯的问题。</description>
     </item>
     <item>
      <title>非对称风险(Skin in The Game)</title>
      <link>https://dirtysalt.github.io/html/skin-in-the-game-book.html</link>
      <pubDate>202302</pubDate>
      <description>https://book.douban.com/subject/30417612/</description>
     </item>
     <item>
      <title>如何塑造他人行为</title>
      <link>https://dirtysalt.github.io/html/how-to-build-behaviour.html</link>
      <pubDate>202302</pubDate>
      <description>一个孩子总爱发脾气、跟老师闹，每次都闹到自己哭。你猜激进行为主义者会怎么对付他？</description>
     </item>
     <item>
      <title>【王德峰教授讲座】王阳明心学</title>
      <link>https://dirtysalt.github.io/html/wangdefeng-lecture-on-wangyangming-philosophy-of-mind.html</link>
      <pubDate>202302</pubDate>
      <description>https://www.bilibili.com/video/BV15Z4y1R76Z/</description>
     </item>
     <item>
      <title>对于网络延迟和带宽的理解</title>
      <link>https://dirtysalt.github.io/html/about-network-latency-and-bandwidth.html</link>
      <pubDate>202302</pubDate>
      <description>延迟指原子信息通过介质所需要的时间，带宽指信息在介质中传播的速度。如果我们以浏览Web页面为例的话，如果等待长时间才开始显示一个页面，但立刻就全部出现了，这说明网络的延迟比较大，带宽还不错。如果页面立刻开始出现，但是花了很长时间才全部显示出来，这说明网络的延迟还可以，但带宽较小。</description>
     </item>
     <item>
      <title>对于存储系统IOPS和性能的理解</title>
      <link>https://dirtysalt.github.io/html/about-storage-system-iops-and-performance.html</link>
      <pubDate>202302</pubDate>
      <description>http://rickardnobel.se/storage-performance-iops-latency-throughput/</description>
     </item>
     <item>
      <title>Numbers Everyone Should Know</title>
      <link>https://dirtysalt.github.io/html/numbers-everyone-should-know.html</link>
      <pubDate>202302</pubDate>
      <description>Designs, Lessons and Advice from Building Large Distributed Systems @ladis-2009 jeff dean</description>
     </item>
     <item>
      <title>What Your Computer Does While You Wait</title>
      <link>https://dirtysalt.github.io/html/what-your-computer-does-while-you-wait.html</link>
      <pubDate>202302</pubDate>
      <description>http://duartes.org/gustavo/blog/post/what-your-computer-does-while-you-wait</description>
     </item>
     <item>
      <title>效率是一种脆弱游戏</title>
      <link>https://dirtysalt.github.io/html/efficiency-is-a-fragile-game.html</link>
      <pubDate>202302</pubDate>
      <description>看来搞商业，真是在刀尖上行走啊。余闲和余钱都是奢侈品，也可以说是浪费：一般来说所有的钱、所有的时间都已经用上了。</description>
     </item>
     <item>
      <title>使用Java ThreadSanitizer发现data race</title>
      <link>https://dirtysalt.github.io/html/use-java-thread-sanizitier-to-spot-data-race.html</link>
      <pubDate>202301</pubDate>
      <description>这个功能我没有明白为什么没有加入默认的Java版本中，这个东西应该是很有用的东西。可能是效果不是特别好，也可能是存在某些明显的性能开销，以至于在代码中维护这些东西成本非常好而收益很低。</description>
     </item>
     <item>
      <title>工作：巨变时代的现状、挑战与未来（The Job: Work and Its Future in a Time of Radical Change）</title>
      <link>https://dirtysalt.github.io/html/the-job-work-and-its-future-in-a-time-of-radical-change.html</link>
      <pubDate>202301</pubDate>
      <description>https://book.douban.com/subject/35686239/</description>
     </item>
     <item>
      <title>中国式管理行为 - 结语</title>
      <link>https://dirtysalt.github.io/html/management-behaviour-in-chinese-way.html</link>
      <pubDate>202301</pubDate>
      <description>https://book.douban.com/subject/26575900/</description>
     </item>
     <item>
      <title>Github上删除敏感信息</title>
      <link>https://dirtysalt.github.io/html/prune-sensitive-data-from-github.html</link>
      <pubDate>202301</pubDate>
      <description>今天不小心在主仓库上上传了敏感信息，花了点时间搞清楚怎么删除掉。我这个case比较特殊：只是上传到我自己的分支上，这个分支没有被其他人clone, 所以只需要删除我本地的这份数据，以及github上的就好。</description>
     </item>
     <item>
      <title>The Five Minute Rule 1997</title>
      <link>https://dirtysalt.github.io/html/the-five-minute-rule-1997.html</link>
      <pubDate>202301</pubDate>
      <description>文章的名字叫做《The Five-Minute Rule Ten Years Later, and Other Computer Storage Rules of Thumb》，它在1987年那篇文章上做了更多的分析：评估5min对于random access是否依然符合，评估如果是seq access的话那么时间应该是多少，以及db index page应该是多少比较合适。</description>
     </item>
     <item>
      <title>The Five Minute Rule 1987</title>
      <link>https://dirtysalt.github.io/html/the-five-minute-rule-1987.html</link>
      <pubDate>202301</pubDate>
      <description>原文里面提到了两个five minute rules, 第一个应该是最重要的: 对于随机访问需求 ，以page为单位，如果一个page在5min以内被多次访问，那么就应该驻留在内存中。</description>
     </item>
     <item>
      <title>FSST: Fast Random Access String Compression</title>
      <link>https://dirtysalt.github.io/html/fsst-fast-random-access-string-compression.html</link>
      <pubDate>202301</pubDate>
      <description>很粗略地看了一下这篇论文，我觉得里面两个点很关键：</description>
     </item>
     <item>
      <title>Stack Overflow: The Architecture - 2016 Edition</title>
      <link>https://dirtysalt.github.io/html/stack-overflow-the-architecture-2016-edition.html</link>
      <pubDate>202301</pubDate>
      <description>https://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/</description>
     </item>
     <item>
      <title>Best practices for using the Java Native Interface</title>
      <link>https://dirtysalt.github.io/html/best-practices-for-using-the-jni.html</link>
      <pubDate>202301</pubDate>
      <description>https://developer.ibm.com/articles/j-jni/</description>
     </item>
     <item>
      <title>eBPF - Rethinking the Linux Kernel</title>
      <link>https://dirtysalt.github.io/html/ebpf-rethinking-the-linux-kernel.html</link>
      <pubDate>202301</pubDate>
      <description>https://www.youtube.com/watch?v=f-oTe-dmfyI&list=WL&index=3</description>
     </item>
     <item>
      <title>Inside look at modern web browser</title>
      <link>https://dirtysalt.github.io/html/inside-look-at-modern-web-browser.html</link>
      <pubDate>202212</pubDate>
      <description>Google Chrome 团队2018年写的一系列文章，解释现代浏览器（Chrome）在我们浏览网页的时候，内部发生些什么事情。</description>
     </item>
     <item>
      <title>filter range实现优化</title>
      <link>https://dirtysalt.github.io/html/filter-range-optimization.html</link>
      <pubDate>202212</pubDate>
      <description>基本代码都来自于 StarRocks</description>
     </item>
     <item>
      <title>Data structure size and cache-line accesses</title>
      <link>https://dirtysalt.github.io/html/data-structure-size-and-cache-line-accesses.html</link>
      <pubDate>202211</pubDate>
      <description>https://lemire.me/blog/2022/06/06/data-structure-size-and-cache-line-accesses/</description>
     </item>
     <item>
      <title>Thinking Clearly about Performance</title>
      <link>https://dirtysalt.github.io/html/thinking-clearly-about-performance.html</link>
      <pubDate>202211</pubDate>
      <description>http://queue.acm.org/detail.cfm?id=1854041</description>
     </item>
     <item>
      <title>易经的奥秘</title>
      <link>https://dirtysalt.github.io/html/wisdom-in-yijing.html</link>
      <pubDate>202211</pubDate>
      <description>http://tv.cctv.com/2013/07/02/VIDA1372753217540879.shtml</description>
     </item>
     <item>
      <title>一个简单的几种memcpy实现的性能测试对比</title>
      <link>https://dirtysalt.github.io/html/simple-memcpy-perf-comparison.html</link>
      <pubDate>202211</pubDate>
      <description></description>
     </item>
     <item>
      <title>一个简单的tcmalloc/jemalloc性能测试对比</title>
      <link>https://dirtysalt.github.io/html/simple-benchmark-on-jemalloc-and-tcmalloc.html</link>
      <pubDate>202211</pubDate>
      <description></description>
     </item>
     <item>
      <title>使用Chrome Trace Viewer来观察调度</title>
      <link>https://dirtysalt.github.io/html/use-chrome-trace-viewe-to-observe-schedule.html</link>
      <pubDate>202211</pubDate>
      <description>StarRocks增加了Pipeline功能之后，所有的query被拆解成为pipeline/operators，在固定大小的线程池上面进行调度。因为pipeline driver不在和线程绑定，那么就比较难观察pipeline driver具体执行的情况：什么时候被调度，什么时候开始，什么时候结束等等。</description>
     </item>
     <item>
      <title>Rob Pike's 5 Rules of Programming</title>
      <link>https://dirtysalt.github.io/html/rob-pike-5-rules-of-programming.html</link>
      <pubDate>202210</pubDate>
      <description>https://users.ece.utexas.edu/~adnan/pike.html</description>
     </item>
     <item>
      <title>Computing Performance 2021 What's On the Horizon</title>
      <link>https://dirtysalt.github.io/html/computing-performance-2021-whats-on-the-horizon.html</link>
      <pubDate>202210</pubDate>
      <description>https://www.youtube.com/watch?v=5nN1wjA_S30</description>
     </item>
     <item>
      <title>JIT-Compiling SQL Queries in PostgreSQL Using LLVM</title>
      <link>https://dirtysalt.github.io/html/jit-compiling-sql-queries-in-pgsql-using-llvm.html</link>
      <pubDate>202210</pubDate>
      <description>https://www.youtube.com/watch?v=ZNTeVt8V6PU</description>
     </item>
     <item>
      <title>Instruction Sets Want To Be Free: A Case for RISC-V</title>
      <link>https://dirtysalt.github.io/html/instruction-set-wants-to-be-free-riscv-case.html</link>
      <pubDate>202210</pubDate>
      <description>https://www.youtube.com/watch?v=mD-njD2QKN0</description>
     </item>
     <item>
      <title>How did you learn so much stuff about Oracle?</title>
      <link>https://dirtysalt.github.io/html/how-did-you-learn-so-much-stuff.html</link>
      <pubDate>202210</pubDate>
      <description>http://carymillsap.blogspot.com/2014/02/how-did-you-learn-so-much-stuff-about.html</description>
     </item>
     <item>
      <title>LeetCode 数字经济算法编程大赛 2022</title>
      <link>https://dirtysalt.github.io/html/leetcode-hhrc-2022.html</link>
      <pubDate>202210</pubDate>
      <description>https://leetcode.cn/contest/hhrc2022/</description>
     </item>
     <item>
      <title>南京大学 ICS-PA 总结</title>
      <link>https://dirtysalt.github.io/html/nju-ics-pa.html</link>
      <pubDate>202210</pubDate>
      <description>https://nju-projectn.github.io/ics-pa-gitbook/ics2021/index.html</description>
     </item>
     <item>
      <title>优化定长二进制串到整数变换</title>
      <link>https://dirtysalt.github.io/html/optimize-fixed-length-binary-to-integer.html</link>
      <pubDate>202210</pubDate>
      <description>在parquet格式的Decimal解析中，需要将fixed length binary转换成为整数，这个整数就是Decimal中的unscaledValue部分。这个过程可以看 https://github.com/apache/parquet-format/blob/master/LogicalTypes.md 里面的 <DECIMAL> 一节</description>
     </item>
     <item>
      <title>符号扩展的几种实现</title>
      <link>https://dirtysalt.github.io/html/how-to-sign-extend.html</link>
      <pubDate>202209</pubDate>
      <description>最近在看一些代码，里面要实现 “长度截断 + 符号扩展”，自带实现是下面这样的</description>
     </item>
     <item>
      <title>ScyllaDB’s New IO Scheduler</title>
      <link>https://dirtysalt.github.io/html/scylladb-new-io-scheduler-2021.html</link>
      <pubDate>202208</pubDate>
      <description>https://www.scylladb.com/2021/04/06/scyllas-new-io-scheduler/</description>
     </item>
     <item>
      <title>Designing a Userspace Disk I/O Scheduler for Modern Datastores: the ScyllaDB example</title>
      <link>https://dirtysalt.github.io/html/designing-userspace-diskio-scheduler-scylladb-example.html</link>
      <pubDate>202208</pubDate>
      <description>https://www.scylladb.com/2016/04/14/io-scheduler-1/</description>
     </item>
     <item>
      <title>Code Simplicity</title>
      <link>https://dirtysalt.github.io/html/code-simplicity.html</link>
      <pubDate>202208</pubDate>
      <description>https://www.codesimplicity.com/</description>
     </item>
     <item>
      <title>MEMORY DEEP DIVE: DDR4 MEMORY</title>
      <link>https://dirtysalt.github.io/html/memory-deep-dive-ddr4.html</link>
      <pubDate>202208</pubDate>
      <description>https://frankdenneman.nl/2015/02/25/memory-deep-dive-ddr4/</description>
     </item>
     <item>
      <title>MEMORY DEEP DIVE: OPTIMIZING FOR PERFORMANCE</title>
      <link>https://dirtysalt.github.io/html/memory-deep-dive-performance.html</link>
      <pubDate>202208</pubDate>
      <description>https://frankdenneman.nl/2015/02/20/memory-deep-dive/</description>
     </item>
     <item>
      <title>MEMORY DEEP DIVE: MEMORY SUBSYSTEM BANDWIDTH</title>
      <link>https://dirtysalt.github.io/html/memory-deep-dive-bandwidth.html</link>
      <pubDate>202208</pubDate>
      <description>https://frankdenneman.nl/2015/02/19/memory-deep-dive-memory-subsystem-bandwidth/</description>
     </item>
     <item>
      <title>MEMORY DEEP DIVE: MEMORY SUBSYSTEM ORGANISATION</title>
      <link>https://dirtysalt.github.io/html/memory-deep-dive-subsystem.html</link>
      <pubDate>202208</pubDate>
      <description>https://frankdenneman.nl/2015/02/18/memory-tech-primer-memory-subsystem-organization/</description>
     </item>
     <item>
      <title>优化数学函数案例 - Speeding up atan2f by 50x</title>
      <link>https://dirtysalt.github.io/html/optimize-math-function-case.html</link>
      <pubDate>202208</pubDate>
      <description>https://mazzo.li/posts/vectorized-atan2.html</description>
     </item>
     <item>
      <title>FizzBuzz程序优化</title>
      <link>https://dirtysalt.github.io/html/fizzbuzz-optimzied-program.html</link>
      <pubDate>202208</pubDate>
      <description>这个程序比赛是从之前帖子看过来的，https://codegolf.stackexchange.com/questions/215216/high-throughput-fizz-buzz/236630</description>
     </item>
     <item>
      <title>Building a Career in Technology</title>
      <link>https://dirtysalt.github.io/html/building-a-career-in-technology.html</link>
      <pubDate>202208</pubDate>
      <description>http://www.benstopford.com/2015/01/02/a-career-in-technology/</description>
     </item>
     <item>
      <title>优化Linux Pipe案例分析</title>
      <link>https://dirtysalt.github.io/html/optimize-linux-pipe-case.html</link>
      <pubDate>202208</pubDate>
      <description>https://mazzo.li/posts/fast-pipes.html</description>
     </item>
     <item>
      <title>NUMA DEEP DIVE PART 4: LOCAL MEMORY OPTIMIZATION</title>
      <link>https://dirtysalt.github.io/html/numa-deep-dive-part4-local-memory-optimization.html</link>
      <pubDate>202207</pubDate>
      <description>https://frankdenneman.nl/2016/07/13/numa-deep-dive-4-local-memory-optimization/</description>
     </item>
     <item>
      <title>NUMA DEEP DIVE PART 3: CACHE COHERENCY</title>
      <link>https://dirtysalt.github.io/html/numa-deep-dive-part3-cache-coherency.html</link>
      <pubDate>202207</pubDate>
      <description>https://frankdenneman.nl/2016/07/11/numa-deep-dive-part-3-cache-coherency/</description>
     </item>
     <item>
      <title>NUMA DEEP DIVE PART 2: SYSTEM ARCHITECTURE</title>
      <link>https://dirtysalt.github.io/html/numa-deep-dive-part2-system-architecture.html</link>
      <pubDate>202207</pubDate>
      <description>https://frankdenneman.nl/2016/07/08/numa-deep-dive-part-2-system-architecture/</description>
     </item>
     <item>
      <title>NUMA DEEP DIVE PART 1: FROM UMA TO NUMA</title>
      <link>https://dirtysalt.github.io/html/numa-deep-dive-part1-from-uma-to-numa.html</link>
      <pubDate>202207</pubDate>
      <description>https://frankdenneman.nl/2016/07/07/numa-deep-dive-part-1-uma-numa/</description>
     </item>
     <item>
      <title>王德峰【重读资本论】</title>
      <link>https://dirtysalt.github.io/html/wangdefeng-course-das-kapital.html</link>
      <pubDate>202207</pubDate>
      <description>https://www.bilibili.com/video/BV1wT4y1r78r</description>
     </item>
     <item>
      <title>Introduction to HTTP/2</title>
      <link>https://dirtysalt.github.io/html/introduction-to-http2.html</link>
      <pubDate>202206</pubDate>
      <description>https://web.dev/performance-http2/</description>
     </item>
     <item>
      <title>Relaxed Operator Fusion for In-Memory Databases</title>
      <link>https://dirtysalt.github.io/html/relaxed-operator-fusion-for-in-memory-databases.html</link>
      <pubDate>202206</pubDate>
      <description>文章提出一种ROF框架，可以将JIT，向量化以及预取综合起来：</description>
     </item>
     <item>
      <title>Inside the SQL Server Query Optimizer</title>
      <link>https://dirtysalt.github.io/html/inside-the-sql-server-query-optimizer.html</link>
      <pubDate>202206</pubDate>
      <description>https://www.red-gate.com/library/inside-the-sql-server-query-optimizer</description>
     </item>
     <item>
      <title>Facebook CacheLib 文档调研</title>
      <link>https://dirtysalt.github.io/html/facebook-cachelib-document-overview.html</link>
      <pubDate>202206</pubDate>
      <description>https://cachelib.org/</description>
     </item>
     <item>
      <title>为什么需要更多 8 位单片机?</title>
      <link>https://dirtysalt.github.io/html/what-more-8-bit-microcontrollers.html</link>
      <pubDate>202206</pubDate>
      <description>https://www.eejournal.com/article/what-more-8-bit-microcontrollers/</description>
     </item>
     <item>
      <title>东京一年</title>
      <link>https://dirtysalt.github.io/html/a-year-in-tokyo.html</link>
      <pubDate>202205</pubDate>
      <description>https://book.douban.com/subject/27074861/</description>
     </item>
     <item>
      <title>42 things I learned from building a production database</title>
      <link>https://dirtysalt.github.io/html/42-things-I-learned-from-building-a-production-database.html</link>
      <pubDate>202205</pubDate>
      <description>https://maheshba.bitbucket.io/blog/2021/10/19/42Things.html</description>
     </item>
     <item>
      <title>Data Processing at the Speed of 100 Gbps using Apache Crail</title>
      <link>https://dirtysalt.github.io/html/data-processing-at-the-speed-of-100gbps-using-apache-crail.html</link>
      <pubDate>202205</pubDate>
      <description>目标是高效地存储大量临时数据，比如MapReduce Job的中间数据，Pipeline中的临时数据等。</description>
     </item>
     <item>
      <title>MonetDB/X100: Hyper-Pipelining Query Execution</title>
      <link>https://dirtysalt.github.io/html/monetdb-x100-hyper-pipelining-query-execution.html</link>
      <pubDate>202205</pubDate>
      <description>设计思路：</description>
     </item>
     <item>
      <title>TinyLFU: A Highly Efficient Cache Admission Policy</title>
      <link>https://dirtysalt.github.io/html/tinylfu-highly-efficient-cache-admission-policy.html</link>
      <pubDate>202205</pubDate>
      <description></description>
     </item>
     <item>
      <title>Main Memory Database Systems: An Overview</title>
      <link>https://dirtysalt.github.io/html/main-memory-database-systems-an-overview.html</link>
      <pubDate>202205</pubDate>
      <description>https://dl.acm.org/doi/10.1109/69.180602</description>
     </item>
     <item>
      <title>Umbra: A Disk-Based System with In-Memory Performance</title>
      <link>https://dirtysalt.github.io/html/umbra-disk-based-system-with-in-memory-performance.html</link>
      <pubDate>202205</pubDate>
      <description>https://umbra-db.com/interface/</description>
     </item>
     <item>
      <title>Amazon Redshift Re-invented</title>
      <link>https://dirtysalt.github.io/html/amazon-redshift-reinvented-paper.html</link>
      <pubDate>202205</pubDate>
      <description></description>
     </item>
     <item>
      <title>PushdownDB: Accelerating a DBMS using S3 Computation</title>
      <link>https://dirtysalt.github.io/html/pushdowndb-accelerating-dbms-using-s3-computation.html</link>
      <pubDate>202205</pubDate>
      <description>简单地看了一下这篇论文，主要的东西就是如何将一些常用算子和S3 Select结合起来，而且其实结合的还有点别扭。 https://github.com/yxymit/s3filter</description>
     </item>
     <item>
      <title>Pocket: Elastic Ephemeral Storage for Serverless Analytics</title>
      <link>https://dirtysalt.github.io/html/pocket-elastic-ephemeral-storage-for-serverless-analytics.html</link>
      <pubDate>202205</pubDate>
      <description>https://www.usenix.org/conference/osdi18/presentation/klimovic</description>
     </item>
     <item>
      <title>Building An Elastic Query Engine on Disaggregated Storage</title>
      <link>https://dirtysalt.github.io/html/building-an-elastic-query-engine-on-disaggregated-storage.html</link>
      <pubDate>202205</pubDate>
      <description></description>
     </item>
     <item>
      <title>FlexPushdownDB: Hybrid Pushdown and Caching in a Cloud DBMS</title>
      <link>https://dirtysalt.github.io/html/flexpushdowndb-hybrid-pushdown-and-caching-in-cloud-dbms.html</link>
      <pubDate>202205</pubDate>
      <description></description>
     </item>
     <item>
      <title>Columnar Storage Optimization and Caching for Data Lakes</title>
      <link>https://dirtysalt.github.io/html/columnar-storage-optimization-and-caching-for-data-lakes.html</link>
      <pubDate>202205</pubDate>
      <description>Short Paper@2022 因为调研Data Lake下面的Caching所以看了一下这篇文论，感觉好像没啥特别的东西。</description>
     </item>
     <item>
      <title>垃圾回收的算法和实现</title>
      <link>https://dirtysalt.github.io/html/garbage-collect-algorithm-and-implementation-book.html</link>
      <pubDate>202205</pubDate>
      <description>https://book.douban.com/subject/26821357/</description>
     </item>
     <item>
      <title>Crystal: A Unified Cache Storage System for Analytical Databases</title>
      <link>https://dirtysalt.github.io/html/crystal-unified-cache-storage-system-for-analytical-databases.html</link>
      <pubDate>202205</pubDate>
      <description>这个东西的大致思想上是：</description>
     </item>
     <item>
      <title>Using Apache Arrow, Calcite, and Parquet to Build a Relational Cache</title>
      <link>https://dirtysalt.github.io/html/using-apache-arrow-caltice-parquet-to-build-relational-cache.html</link>
      <pubDate>202205</pubDate>
      <description>https://www.slideshare.net/dremio/using-apache-arrow-calcite-and-parquet-to-build-a-relational-cache-81440786</description>
     </item>
     <item>
      <title>Dremio C3效果分析</title>
      <link>https://dirtysalt.github.io/html/dremio-c3-effect.html</link>
      <pubDate>202205</pubDate>
      <description></description>
     </item>
     <item>
      <title>Dremio Reflections/Views文档说明</title>
      <link>https://dirtysalt.github.io/html/dremio-reflections-docs-summary.html</link>
      <pubDate>202205</pubDate>
      <description>如何创建Dataset Layers https://docs.dremio.com/cloud/data/datasets/#layering-datasets</description>
     </item>
     <item>
      <title>Barbarians at the Gateways</title>
      <link>https://dirtysalt.github.io/html/barbarians-at-gateways.html</link>
      <pubDate>202205</pubDate>
      <description>https://queue.acm.org/detail.cfm?id=2536492</description>
     </item>
     <item>
      <title>SWAR explained: parsing eight digits</title>
      <link>https://dirtysalt.github.io/html/swar-explained-parsing-eight-digits.html</link>
      <pubDate>202205</pubDate>
      <description>https://lemire.me/blog/2022/01/21/swar-explained-parsing-eight-digits/</description>
     </item>
     <item>
      <title>When the OS gets in the way - Mark Price</title>
      <link>https://dirtysalt.github.io/html/when-the-os-gets-in-the-way.html</link>
      <pubDate>202205</pubDate>
      <description>https://www.youtube.com/watch?v=1bUVbcvqBSA</description>
     </item>
     <item>
      <title>The H2O distributed K/V algorithm by Cliff Click</title>
      <link>https://dirtysalt.github.io/html/the-h2o-distributed-kv-algorithm.html</link>
      <pubDate>202204</pubDate>
      <description>https://www.youtube.com/watch?v=kTMQCEkf_AA</description>
     </item>
     <item>
      <title>A Crash Course in Modern Hardware by Cliff Click</title>
      <link>https://dirtysalt.github.io/html/crash-course-in-modern-hardware.html</link>
      <pubDate>202204</pubDate>
      <description>https://www.youtube.com/watch?v=OFgxAFdxYAQ</description>
     </item>
     <item>
      <title>CppCon 2016: Dan Saks “extern c: Talking to C Programmers about C++”</title>
      <link>https://dirtysalt.github.io/html/talking-to-c-programmers-about-cpp-dan-saks.html</link>
      <pubDate>202204</pubDate>
      <description>https://www.youtube.com/watch?v=D7Sd8A6_fYU</description>
     </item>
     <item>
      <title>Algorithmica Compilation &amp; Profiling</title>
      <link>https://dirtysalt.github.io/html/algorithmica-compilation-profiling.html</link>
      <pubDate>202204</pubDate>
      <description>https://en.algorithmica.org/hpc/compilation/flags/</description>
     </item>
     <item>
      <title>Algorithmica CompArch &amp; Language</title>
      <link>https://dirtysalt.github.io/html/algorithmica-comp-arch-and-language.html</link>
      <pubDate>202204</pubDate>
      <description>https://en.algorithmica.org/hpc/complexity/hardware/</description>
     </item>
     <item>
      <title>Algorithmica RAM &amp; CPU Caches</title>
      <link>https://dirtysalt.github.io/html/algorithmica-ram-cpu-caches.html</link>
      <pubDate>202204</pubDate>
      <description>https://en.algorithmica.org/hpc/cpu-cache/</description>
     </item>
     <item>
      <title>Algorithmica SIMD</title>
      <link>https://dirtysalt.github.io/html/algorithmica-simd.html</link>
      <pubDate>202204</pubDate>
      <description>https://en.algorithmica.org/hpc/simd/</description>
     </item>
     <item>
      <title>The Linux Scheduler: a Decade of Wasted Cores</title>
      <link>https://dirtysalt.github.io/html/the-linux-scheduler-decade-of-wasted-cores.html</link>
      <pubDate>202204</pubDate>
      <description>文章分析了几个Linux Scheduler里面的几个缺陷，分析了造成这些缺陷的原因，以及他们设计发现这些缺陷的工具（一个invariant检查工具类似assert, 一个是可视化调度工具这个好像用途比较大）。文章里面好多东西也看不太懂，本来读Paper这件事情就是凭缘分吧。</description>
     </item>
     <item>
      <title>F1 Query: Declarative Querying at Scale</title>
      <link>https://dirtysalt.github.io/html/f1-query-declarative-quqey-at-scale.html</link>
      <pubDate>202204</pubDate>
      <description>http://www.vldb.org/pvldb/vol11/p1835-samwel.pdf</description>
     </item>
     <item>
      <title>Architecture of a Database System</title>
      <link>https://dirtysalt.github.io/html/arch-of-dbms.html</link>
      <pubDate>202204</pubDate>
      <description></description>
     </item>
     <item>
      <title>Readings in Database Systems, 5th Edition (2015)</title>
      <link>https://dirtysalt.github.io/html/readings-dbms-fifth-edition.html</link>
      <pubDate>202204</pubDate>
      <description></description>
     </item>
     <item>
      <title>Data Center Computers: Modern Challenges in CPU Design</title>
      <link>https://dirtysalt.github.io/html/data-center-computers-modern-challenges-in-cpu-design.html</link>
      <pubDate>202203</pubDate>
      <description>https://www.youtube.com/watch?v=QBu2Ae8-8LM</description>
     </item>
     <item>
      <title>Go Scheduler: Implementing language with lightweight concurrency</title>
      <link>https://dirtysalt.github.io/html/go-scheduler-talk-dmitry-vyukov.html</link>
      <pubDate>202203</pubDate>
      <description>https://2019.hydraconf.com/2019/talks/7336ginp0kke7n4yxxjvld/</description>
     </item>
     <item>
      <title>log4j引起高CPU使用率的问题</title>
      <link>https://dirtysalt.github.io/html/high-cpu-utilization-by-log4j.html</link>
      <pubDate>202203</pubDate>
      <description></description>
     </item>
     <item>
      <title>Memory Ordering in Modern Microprocessors</title>
      <link>https://dirtysalt.github.io/html/memory-ordering-in-modern-microprocessors.html</link>
      <pubDate>202203</pubDate>
      <description>https://www.linuxjournal.com/article/8211 https://www.linuxjournal.com/article/8212</description>
     </item>
     <item>
      <title>优化读取小Stripe的ORC文件</title>
      <link>https://dirtysalt.github.io/html/optimize-reading-small-stripe-orc-file.html</link>
      <pubDate>202203</pubDate>
      <description>Optimize small read on ORC(small row group index/stripe/file) by dirtysalt · Pull Request #3962 · StarRocks/starrocks https://github.com/StarRocks/starrocks/pull/3962</description>
     </item>
     <item>
      <title>Delta Lake: High-Performance ACID Table Storage over Cloud Object Stores</title>
      <link>https://dirtysalt.github.io/html/delta-lake-paper.html</link>
      <pubDate>202203</pubDate>
      <description>数据湖面临两个问题，一个是元数据获取比较慢，一个则是一致性不太好保证。Delta Lake的办法没有使用特殊的Store，只是在写入协议上做文档：将元数据写入到特定的json文件里面，并且以类似Log的形式来合并元数据；一致性则利用object store某些原子操作特性加上optimistic CC来搞定。</description>
     </item>
     <item>
      <title>BPF Performance Tools</title>
      <link>https://dirtysalt.github.io/html/bpf-performance-tools.html</link>
      <pubDate>202203</pubDate>
      <description>Linux System and Application Observability</description>
     </item>
     <item>
      <title>Cloud Programming Simplified: A Berkeley View on Serverless Computing</title>
      <link>https://dirtysalt.github.io/html/ucb-cloud-programming-simplified.html</link>
      <pubDate>202203</pubDate>
      <description>Technical Report No. UCB/EECS-2019-3 http://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.html</description>
     </item>
     <item>
      <title>ASCII &amp; Hex codes</title>
      <link>https://dirtysalt.github.io/html/ascii-hex-codes.html</link>
      <pubDate>202203</pubDate>
      <description></description>
     </item>
     <item>
      <title>中国24节气</title>
      <link>https://dirtysalt.github.io/html/chn-24-season-times.html</link>
      <pubDate>202202</pubDate>
      <description></description>
     </item>
     <item>
      <title>编译和安装bcc/bpftrace</title>
      <link>https://dirtysalt.github.io/html/install-compiled-bcc-bpftrace.html</link>
      <pubDate>202202</pubDate>
      <description>在centos上最简单的办法就是找找yum有没有源，没有源的话可以使用snap这个东西。这个东西我不知道是怎么搞的，感觉像是基于docker或者是容器化技术搞的。</description>
     </item>
     <item>
      <title>1024cores.net lock-free section</title>
      <link>https://dirtysalt.github.io/html/1024-cores-lock-free-section.html</link>
      <pubDate>202202</pubDate>
      <description>各种Lock-Free Queue实现 https://www.1024cores.net/home/lock-free-algorithms/queues</description>
     </item>
     <item>
      <title>Feels Like Faster vs. Is Actually Faster</title>
      <link>https://dirtysalt.github.io/html/feels-like-faster-and-actually-faster.html</link>
      <pubDate>202202</pubDate>
      <description>https://medium.com/hackernoon/feels-like-faster-vs-makes-us-faster-828686facc7e</description>
     </item>
     <item>
      <title>晚明 - 檄文</title>
      <link>https://dirtysalt.github.io/html/wanming-war-declaration.html</link>
      <pubDate>202202</pubDate>
      <description>作者：小小峰 链接：https://www.zhihu.com/question/37159763/answer/142852125 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</description>
     </item>
     <item>
      <title>Lock-Based/Lock-Free/Wait-Free之间区别</title>
      <link>https://dirtysalt.github.io/html/diff-lock-free-and-wait-free.html</link>
      <pubDate>202202</pubDate>
      <description>摘自 《The Art of Writing Efficient Programs》 https://learning.oreilly.com/library/view/the-art-of/9781800208117/</description>
     </item>
     <item>
      <title>Task Scheduling Strategies</title>
      <link>https://dirtysalt.github.io/html/task-scheduling-strategies.html</link>
      <pubDate>202202</pubDate>
      <description>There are 4 main strategies for a fine-grained distributed dynamic task scheduling:</description>
     </item>
     <item>
      <title>Presto: SQL on Everything</title>
      <link>https://dirtysalt.github.io/html/presto-sql-on-everything.html</link>
      <pubDate>202202</pubDate>
      <description>Presto使用情况，看上去这个生态系统还是很不错的：</description>
     </item>
     <item>
      <title>Apache Calcite: A Foundational Framework for Optimized Query Processing Over Heterogeneous Data Sources</title>
      <link>https://dirtysalt.github.io/html/apache-calcite-paper.html</link>
      <pubDate>202202</pubDate>
      <description>文章副标题是 A Foundational Framework for Optimized Query Processing Over Heterogeneous Data Sources 为各种异构数据源做实现一套查询优化框架。</description>
     </item>
     <item>
      <title>CppCon 2017: Fedor Pikus “Read, Copy, Update, then what? RCU for non-kernel programmers”</title>
      <link>https://dirtysalt.github.io/html/rcu-for-non-kernel-programmers.html</link>
      <pubDate>202202</pubDate>
      <description>read/write lock性能上存在一些问题，reader性能在没有writer和一个writer情况下几乎是相同的，没有办法做到linear scale, 而read-only却可以做到linear scale. 这就有个问题是，我们为了可能偶尔出现的update, 而需要付出巨大的性能损失。</description>
     </item>
     <item>
      <title>Branchless Programming in C++ - Fedor Pikus - CppCon 2021</title>
      <link>https://dirtysalt.github.io/html/branchless-programming-in-cpp.html</link>
      <pubDate>202202</pubDate>
      <description>https://youtu.be/g-WPhYREFjk?t=2489</description>
     </item>
     <item>
      <title>CppCon 2017: Fedor Pikus “C++ atomics, from basic to advanced. What do they really do?”</title>
      <link>https://dirtysalt.github.io/html/cpp-atomics-basic-to-advanced.html</link>
      <pubDate>202202</pubDate>
      <description>https://youtu.be/ZQFzMfHIxng?t=1571 atomic性能比CAS/mutex都要好，但是和spinlock相比在低冲突时候有优势，高冲突情况下面则没有什么优势。具体性能最好进行实测，而不是猜测。</description>
     </item>
     <item>
      <title>阿里云带宽测试</title>
      <link>https://dirtysalt.github.io/html/test-aliyun-network-capacity.html</link>
      <pubDate>202201</pubDate>
      <description>一台机器上作为服务器 `iperf -s`, 一台机器作为客户端 `iperf -c 172.26.194.250 -t 300 -d -P 1/2/4/8`</description>
     </item>
     <item>
      <title>现代C++白皮书(C++ 2006-2020)</title>
      <link>https://dirtysalt.github.io/html/thriving-in-crowded-and-changing-world-cpp.html</link>
      <pubDate>202201</pubDate>
      <description></description>
     </item>
     <item>
      <title>搜索引擎很强大，还需要自己思考答案吗？</title>
      <link>https://dirtysalt.github.io/html/do-we-need-to-think-while-we-have-powerful-search-engine.html</link>
      <pubDate>202201</pubDate>
      <description>我在约翰霍普金斯大学读书时，经常下午5点钟在马路上跑步。有一天我跑步时，正好遇到一位同学开车经过，他看我跑得满头汗，就好心问要不要捎上我一段，我说我跑步就是为了出汗锻炼，他马上也就笑了。</description>
     </item>
     <item>
      <title>父母没有办法讲通道理，应该怎么办？</title>
      <link>https://dirtysalt.github.io/html/what-we-gonna-do-when-parents-are-unreasoanble.html</link>
      <pubDate>202201</pubDate>
      <description>但是，对于我们身边的人，特别是我们的父母，我们似乎管也不是，不管也不是，就比较犯难了。对此我有两个建议：</description>
     </item>
     <item>
      <title>为什么某个领域的英雄人物总是在某一个时期一起涌现呢？</title>
      <link>https://dirtysalt.github.io/html/why-heros-emerge-at-same-period.html</link>
      <pubDate>202201</pubDate>
      <description>https://www.dedao.cn/article/zl12vGeNAM0YVpPYZ2VdmxjOQBP5oL</description>
     </item>
     <item>
      <title>数据/信息/知识/智慧</title>
      <link>https://dirtysalt.github.io/html/data-info-knowledge-and-wisdom.html</link>
      <pubDate>202201</pubDate>
      <description>为了进一步理解模型，我们考虑一个认知上的金字塔。</description>
     </item>
     <item>
      <title>Examining applications that do not terminate on std::bad_alloc</title>
      <link>https://dirtysalt.github.io/html/apps-survive-on-bad-alloc.html</link>
      <pubDate>202112</pubDate>
      <description>https://www.youtube.com/watch?v=QIiFsqsb9HM</description>
     </item>
     <item>
      <title>Java at Speed</title>
      <link>https://dirtysalt.github.io/html/java-at-speed.html</link>
      <pubDate>202112</pubDate>
      <description>https://www.infoq.com/presentations/java-jvm-perf/</description>
     </item>
     <item>
      <title>Roaring Bitmap 序列化长度变化分析</title>
      <link>https://dirtysalt.github.io/html/roaring-bitmap-ser-size-unstable.html</link>
      <pubDate>202112</pubDate>
      <description></description>
     </item>
     <item>
      <title>How NOT to Measure Latency</title>
      <link>https://dirtysalt.github.io/html/how-not-to-measure-latency.html</link>
      <pubDate>202112</pubDate>
      <description>https://www.infoq.com/presentations/latency-response-time/ https://bravenewgeek.com/everything-you-know-about-latency-is-wrong/ http://hdrhistogram.org/</description>
     </item>
     <item>
      <title>"Performance Matters" by Emery Berger</title>
      <link>https://dirtysalt.github.io/html/performance-matters.html</link>
      <pubDate>202112</pubDate>
      <description>https://www.youtube.com/watch?v=r-TLSBdHe1A</description>
     </item>
     <item>
      <title>Multicore Optimization NOTUR 2009</title>
      <link>https://dirtysalt.github.io/html/multicore-opt-notur-2009.html</link>
      <pubDate>202112</pubDate>
      <description>感觉作者的背景主要是在高性能计算方面，里面提到了很多solver以及OpenMP,这些我都不是很了解。我只挑选了一些我看的懂的东西记录下来。</description>
     </item>
     <item>
      <title>Understanding Compiler Optimization in LLVM</title>
      <link>https://dirtysalt.github.io/html/understanding-compiler-optimization-in-llvm.html</link>
      <pubDate>202112</pubDate>
      <description>https://www.bilibili.com/video/BV1yE411y7Ac https://www.youtube.com/watch?v=FnGCDLhaxKU</description>
     </item>
     <item>
      <title>在Linux远程桌面里使用VTune</title>
      <link>https://dirtysalt.github.io/html/run-vtune-in-linux-remote-desktop.html</link>
      <pubDate>202112</pubDate>
      <description>UPDATE: vtune出了web server版本了，所以也不使用远程桌面去搞了。https://www.intel.com/content/www/us/en/develop/documentation/vtune-help/top/launch/web-server-ui.html</description>
     </item>
     <item>
      <title>Let’s talk locks!</title>
      <link>https://dirtysalt.github.io/html/lets-talk-locks.html</link>
      <pubDate>202112</pubDate>
      <description>https://www.infoq.com/presentations/go-locks/</description>
     </item>
     <item>
      <title>Patterns in confusing explanations</title>
      <link>https://dirtysalt.github.io/html/patterns-in-confusing-explanations.html</link>
      <pubDate>202111</pubDate>
      <description>https://jvns.ca/blog/confusing-explanations/</description>
     </item>
     <item>
      <title>How to get useful answers to your questions</title>
      <link>https://dirtysalt.github.io/html/how-to-get-useful-answers-to-your-questions.html</link>
      <pubDate>202111</pubDate>
      <description>https://jvns.ca/blog/2021/10/21/how-to-get-useful-answers-to-your-questions/</description>
     </item>
     <item>
      <title>What Every Engineer and Computer Scientist Should Know: The Biggest Contributor to Happiness</title>
      <link>https://dirtysalt.github.io/html/what-every-eng-should-know-biggest-contributor-to-happiness.html</link>
      <pubDate>202111</pubDate>
      <description>https://cacm.acm.org/opinion/articles/256926-what-every-engineer-and-computer-scientist-should-know/fulltext</description>
     </item>
     <item>
      <title>回抚州带姑姑去看病</title>
      <link>https://dirtysalt.github.io/html/back-fuzhou-take-care-aunt.html</link>
      <pubDate>202111</pubDate>
      <description>上上周，大约就是11.3号这天的样子，爸爸给我打电说，姑姑发现肛门附近有个硬块，正在去抚州市第一人民医院去做检查，拍个CT什么的。我爸可能已经觉得不太妙了，和我说一下可能就是让我有所准备。然后就是上周周一11.8的时候，我爸打电话说已经基本确认是直肠癌，并且发现在肺部有轻微的病灶，考虑转移，他自己动身从杭州回去带我姑姑办理住院，可能要动手术切除。因为离肛门距离比较近，如果没有办法保住肛门的话，那么之后只能使用瘘管进行排泄了。对于生活基本上不能自理的姑姑来说，可以这基本上没有办法生活了。可能是我爸也不怎么了解，或者是我爸也没有办法长期陪在身边，所以就接受了医生的建议在周三11.10号进行手术，并且安慰我姑姑有许多人都是带着篓生活的，只是我们平时没有看到而已。我姑姑自己也没有什么看法，所以全部交给我爸做决定。</description>
     </item>
     <item>
      <title>Disruptor Technical Paper</title>
      <link>https://dirtysalt.github.io/html/disruptor-tech-paper.html</link>
      <pubDate>202111</pubDate>
      <description>https://lmax-exchange.github.io/disruptor/disruptor.html</description>
     </item>
     <item>
      <title>Efficiently Compiling Efficient Query Plans for Modern Hardware</title>
      <link>https://dirtysalt.github.io/html/efficiently-compiling-efficient-query-plans-for-modern-hardware.html</link>
      <pubDate>202110</pubDate>
      <description>利用现代编译器LLVM，来编译查询计划，提升查询性能</description>
     </item>
     <item>
      <title>The LMAX Architecture</title>
      <link>https://dirtysalt.github.io/html/lmax-arch-martin-fowler.html</link>
      <pubDate>202110</pubDate>
      <description>https://martinfowler.com/articles/lmax.html https://www.infoq.com/presentations/LMAX/</description>
     </item>
     <item>
      <title>NUMA An Overview</title>
      <link>https://dirtysalt.github.io/html/numa-an-overview.html</link>
      <pubDate>202110</pubDate>
      <description>http://queue.acm.org/detail.cfm?id=2513149</description>
     </item>
     <item>
      <title>链接器与加载器(Beta2 / 20061107)</title>
      <link>https://dirtysalt.github.io/html/linker-and-loader.html</link>
      <pubDate>202110</pubDate>
      <description></description>
     </item>
     <item>
      <title>虚函数的额外开销</title>
      <link>https://dirtysalt.github.io/html/rethink-virtual-function-call-cost.html</link>
      <pubDate>202110</pubDate>
      <description>CK代码里面使用了获取虚函数地址的方式来减少虚函数调用开销</description>
     </item>
     <item>
      <title>一段奇怪的汇编代码</title>
      <link>https://dirtysalt.github.io/html/mysterious-memcpy-assembly-code.html</link>
      <pubDate>202110</pubDate>
      <description></description>
     </item>
     <item>
      <title>国庆在家的讨论小节</title>
      <link>https://dirtysalt.github.io/html/lessons-learned-in-national-days-2021.html</link>
      <pubDate>202110</pubDate>
      <description>平时需要关注的有：</description>
     </item>
     <item>
      <title>HashTable性能测试(CK/phmap/ska)</title>
      <link>https://dirtysalt.github.io/html/hashtable-perf-comparison.html</link>
      <pubDate>202110</pubDate>
      <description></description>
     </item>
     <item>
      <title>Top-down Microarchitecture Analysis Method</title>
      <link>https://dirtysalt.github.io/html/top-down-microarch-analysis-method.html</link>
      <pubDate>202109</pubDate>
      <description>https://software.intel.com/content/www/us/en/develop/documentation/vtune-cookbook/top/methodologies/top-down-microarchitecture-analysis-method.html</description>
     </item>
     <item>
      <title>Xor Filters: Faster and Smaller Than Bloom and Cuckoo</title>
      <link>https://dirtysalt.github.io/html/xor-filters-paper.html</link>
      <pubDate>202109</pubDate>
      <description>这名字也挺有意思的，之前Cuckoo filter文章名称叫做“Cuckoo Filter: Practically Better Than Bloom”. 这论文比较符合我的口味，至少我能看个7788，数学部分不多，也写了不少实现细节。</description>
     </item>
     <item>
      <title>Cuckoo Filter: Practically Better Than Bloom</title>
      <link>https://dirtysalt.github.io/html/cuckoo-filter-paper.html</link>
      <pubDate>202109</pubDate>
      <description>类似使用cuckoo hash table的方式，但是里面只存储了fingerprint/hashvaue. 然后hash table是由多个buckets组成的，而一个bucket里面可能存在很多个entries，类似与CPU cache associative ways. 比bloom filter的好处就是支持删除，性能的话直觉上看应该也还行。</description>
     </item>
     <item>
      <title>The 64 bit x86 C Calling Convention</title>
      <link>https://dirtysalt.github.io/html/ccc-x86-64.html</link>
      <pubDate>202109</pubDate>
      <description>重新看了一下x86-64 下面的c call convention. 这个可能对于debug core会有点帮助，看看参数是放在那些寄存器里面的。</description>
     </item>
     <item>
      <title>Efficient Query Processing with Optimistically Compressed Hash Tables &amp; Strings in the USSR</title>
      <link>https://dirtysalt.github.io/html/query-processing-opt-compressed-ht-and-ussr.html</link>
      <pubDate>202109</pubDate>
      <description>大致提出了3个在Hash Table和Strings上的优化思路，但是感觉每个都不是特别好应用起来，可能某些场景下可以使用起来：</description>
     </item>
     <item>
      <title>Graphics Programming Black Book</title>
      <link>https://dirtysalt.github.io/html/graphics-programming-black-book.html</link>
      <pubDate>202109</pubDate>
      <description>先从宏观改进，再做微观优化</description>
     </item>
     <item>
      <title>Zen of Assembly Language</title>
      <link>https://dirtysalt.github.io/html/zen-of-assembly-language.html</link>
      <pubDate>202109</pubDate>
      <description>Assume nothing. I cannot emphasize this strongly enough—when you care about performance, do your best to improve the code and then measure the improvement. If you don’t measure performance, you’re just guessing, and if you’re guessing, you’re not very likely to write top-notch code.</description>
     </item>
     <item>
      <title>各种HashMap的性能对比</title>
      <link>https://dirtysalt.github.io/html/hashmap-perf-comparison.html</link>
      <pubDate>202109</pubDate>
      <description>https://martin.ankerl.com/2019/04/01/hashmap-benchmarks-01-overview/</description>
     </item>
     <item>
      <title>Three fundamental flaws of SIMD</title>
      <link>https://dirtysalt.github.io/html/three-fundamental-flaws-of-simd.html</link>
      <pubDate>202108</pubDate>
      <description>https://www.bitsnbites.eu/three-fundamental-flaws-of-simd/</description>
     </item>
     <item>
      <title>Druid: A Real-time Analytical Data Store</title>
      <link>https://dirtysalt.github.io/html/druid-a-real-time-analytical-data-store.html</link>
      <pubDate>202108</pubDate>
      <description>https://dl.acm.org/doi/10.1145/2588555.2595631</description>
     </item>
     <item>
      <title>The Secrets of ClickHouse Performance Optimizations</title>
      <link>https://dirtysalt.github.io/html/the-secrets-of-ck-perf-opt.html</link>
      <pubDate>202108</pubDate>
      <description>https://presentations.clickhouse.tech/bdtc_2019/</description>
     </item>
     <item>
      <title>Benefitting Power and Performance Sleep Loops</title>
      <link>https://dirtysalt.github.io/html/benefitting-pow-and-performance-sleep-loops.html</link>
      <pubDate>202108</pubDate>
      <description>https://software.intel.com/content/www/us/en/develop/articles/benefitting-power-and-performance-sleep-loops.html</description>
     </item>
     <item>
      <title>A Scalable Concurrent malloc(3) Implementation for FreeBSD</title>
      <link>https://dirtysalt.github.io/html/jemalloc-paper.html</link>
      <pubDate>202108</pubDate>
      <description>这篇文章简单地介绍了jemalloc(Jason Evans)的实现。</description>
     </item>
     <item>
      <title>Low-Latency Compilation of SQL Queries to Machine Code</title>
      <link>https://dirtysalt.github.io/html/low-latency-compilation-of-sql-queries-to-machine-code.html</link>
      <pubDate>202108</pubDate>
      <description>这篇文章主要将如何优化SQL引擎中JIT的编译时间，对比对象是LLVM（庞然大物），实验证明在编译速度上可以提升100x。不过注意这仅仅是编译速度，不是执行速度。</description>
     </item>
     <item>
      <title>快速平方根倒数(talk pdf)</title>
      <link>https://dirtysalt.github.io/html/../images/fast-sqrt-inv.pdf</link>
      <pubDate>202108</pubDate>
      <description></description>
     </item>
     <item>
      <title>Clojure的外部性表现</title>
      <link>https://dirtysalt.github.io/html/look-clojure-from-outsider.html</link>
      <pubDate>202108</pubDate>
      <description>https://www.aspect-analytics.com/media/blog/2021-04-26-clojure-i-choose-you/</description>
     </item>
     <item>
      <title>设计良好的非加密Hash函数</title>
      <link>https://dirtysalt.github.io/html/design-a-good-non-crypt-hash-func.html</link>
      <pubDate>202108</pubDate>
      <description>http://ticki.github.io/blog/designing-a-good-non-cryptographic-hash-function/</description>
     </item>
     <item>
      <title>计算整数长度</title>
      <link>https://dirtysalt.github.io/html/compute-number-of-digits-of-an-integer.html</link>
      <pubDate>202108</pubDate>
      <description>比如 25 的长度就是2，1987 的长度就是4. 如果按照数学公式计算就是 floor(log10(x)). 通常我们的实现方式是会下面这样的。其中 `x = x | 1` 的作用是将0进行特殊处理。</description>
     </item>
     <item>
      <title>The Next Phase of Cloud Computing</title>
      <link>https://dirtysalt.github.io/html/the-next-phase-of-cloud-computing.html</link>
      <pubDate>202108</pubDate>
      <description>云计算很大程度上改变为使用机器和运维方式，但是却没有怎么改变编程方式。serveless computing算是一个对编程方式改变有影响的领域，但是目前接受程度依然不高。 这篇文章会分析serveless后面应该怎么搞，以及对于云计算后续发展的一些预测。</description>
     </item>
     <item>
      <title>Compilation in the Microsoft SQL Server Hekaton Engine</title>
      <link>https://dirtysalt.github.io/html/compilation-in-sqlserver-hekaton-engine.html</link>
      <pubDate>202108</pubDate>
      <description>主要是介绍了Hekaton引擎里面的编译部分。我觉得开头它这个设计考虑非常清晰：我们要在现有的OLTP上提升10X-100X的性能，但是实际测试下来发现从scalability（并发，设计latch-free的数据结构）和CPI（指令并行度）提升上最多只能得到3-4X的改进，所以必须在执行指令方面节省提升25X以上。</description>
     </item>
     <item>
      <title>Using Block Prefetch for Optimized Memory Performance</title>
      <link>https://dirtysalt.github.io/html/using-block-prefetch-for-optimized-memory-performance.html</link>
      <pubDate>202108</pubDate>
      <description>AMD_block_prefetch_paper.pdf 这篇文章比较早，2001年AMD公司写的。里面使用了两个例子来说明如何有效地进行block prefetch来优化内存性能。一个例子是memcpy, 另外一个则是将两个浮点数组相加，这里面就只说第一个例子。</description>
     </item>
     <item>
      <title>On the Impact of Memory Allocation on High-Performance Query Processing</title>
      <link>https://dirtysalt.github.io/html/memory-allocation-impact-on-high-perf-query-processing.html</link>
      <pubDate>202108</pubDate>
      <description>对比了几个内存分配器在OLAP系统上的效果，估计这个OLAP就是Hyper.</description>
     </item>
     <item>
      <title>The Vertica Analytic Database: C-Store 7 Years Later</title>
      <link>https://dirtysalt.github.io/html/the-vertica-analytic-database.html</link>
      <pubDate>202107</pubDate>
      <description>2012年的文章，讲述从C-Store这种学术demo性质的分析数据库，到转换为商业产品Vertica的重大变化。</description>
     </item>
     <item>
      <title>Piccolo: Building Fast, Distributed Programs with Partitioned Tables</title>
      <link>https://dirtysalt.github.io/html/piccolo-builing-fast-distributed-programs-with-partitioned-tables.html</link>
      <pubDate>202107</pubDate>
      <description>2010年的文章，许多分布式技术放在现在不算是什么，所以似乎也没啥好写的。 看上去Spark似乎可以完全取代这个系统，并且还支持比较细粒度的fault-tolerant。</description>
     </item>
     <item>
      <title>Everything You Always Wanted to Know About Compiled and Vectorized Queries But Were Afraid to Ask</title>
      <link>https://dirtysalt.github.io/html/compiled-and-vectorized-query-comparison.html</link>
      <pubDate>202106</pubDate>
      <description>基于Compiled和基于Vectorized实现的查询引擎（后面简称CV），优劣势分别是什么？它们之间差距可以有多大？结论就是：C方式生成的CPU指令更少，比较适合处理可以全部放在cache中的数据。而V方式生成的CPU指令更多，并且因为是向量化处理，所以IPC更高更容易躲避cache miss延迟。V方式还有一个问题就是，如果在做多个列join时候，可能需要将这些列都进行物化，这个cost不能忽略。两者各有优劣，不过我感觉是，总的来说C方式效率略高，但是在调试以及生成代码上比较复杂。</description>
     </item>
     <item>
      <title>Column-Stores vs. Row-Stores: How Different Are They Really?</title>
      <link>https://dirtysalt.github.io/html/column-stores-vs-row-stores-how-different.html</link>
      <pubDate>202106</pubDate>
      <description>这篇文章分析了，CS和RS本质区别在什么地方。虽然RS可以通过某些方式，比如拆分列，对列进行索引，以及做视图物化，来“逼近”CS。但是实际测量依然会发现有很大的性能gap，这些gap的来源是什么呢？</description>
     </item>
     <item>
      <title>Integrating Compression and Execution in Column-Oriented Database Systems</title>
      <link>https://dirtysalt.github.io/html/integrating-compression-and-execution-in-cstore.html</link>
      <pubDate>202106</pubDate>
      <description>这篇文章讲的是如何在C-Store上对压缩数据（更准确地将是编码后数据）进行查询。解码或者解压缩对于CPU开销都是比较大的，所以如果可以直接在原始数据上查询，可以节省不少CPU时间。</description>
     </item>
     <item>
      <title>C-Store: A Column-oriented DBMS</title>
      <link>https://dirtysalt.github.io/html/cstore-paper.html</link>
      <pubDate>202106</pubDate>
      <description>C-Store按照列进行存储，但是为了加速分析，对列进行了replication. 多个列可以归为到一个projection下面，然后可以存储多种projection. 这种方式的好处是，一方面可以提高数据的可靠性，另外一方面如果query正好只需要查询这几列，那么data footprint就非常少，相应的overhead也就非常少。</description>
     </item>
     <item>
      <title>两个ascii字符串中相同字符数量</title>
      <link>https://dirtysalt.github.io/html/counting-number-of-matching-chars-in-ascii-strings.html</link>
      <pubDate>202106</pubDate>
      <description>https://lemire.me/blog/2021/05/21/counting-the-number-of-matching-characters-in-two-ascii-strings/</description>
     </item>
     <item>
      <title>Voltnisky字符串搜索算法</title>
      <link>https://dirtysalt.github.io/html/voltnisky-string-search.html</link>
      <pubDate>202106</pubDate>
      <description>https://clickhouse.tech/codebrowser/html_report/ClickHouse/src/Common/Volnitsky.h.html</description>
     </item>
     <item>
      <title>Cache-, Hash- and Space-Efficient Bloom Filters</title>
      <link>https://dirtysalt.github.io/html/cache-hash-space-efficient-bloom-filters.html</link>
      <pubDate>202106</pubDate>
      <description>主要思想就是将bloom filter进行分块(block). 每个块可以使用一个或者几个SIMD指令覆盖到比如32字节/64字节，这样每次set bits的话可以使用几条指令就完成。并且因为64字节是cache line大小，在申请的时候注意和cache line对齐，这样可以做到cache efficient.</description>
     </item>
     <item>
      <title>Notes on Programming</title>
      <link>https://dirtysalt.github.io/html/notes-on-programming.html</link>
      <pubDate>202106</pubDate>
      <description>by Alexander Stepanov</description>
     </item>
     <item>
      <title>CMU DB: Database Logging &amp; Crash Recovery</title>
      <link>https://dirtysalt.github.io/html/cmudb-logging-and-crash-recovery.html</link>
      <pubDate>202106</pubDate>
      <description>在这里Logging的主要用途就是为了事务故障恢复，所以就把两者放在一起写吧，关联性还是蛮强的。</description>
     </item>
     <item>
      <title>有效地进行bit-unpacking</title>
      <link>https://dirtysalt.github.io/html/efficient-bit-unpacking.html</link>
      <pubDate>202106</pubDate>
      <description>ORC文件使用了bit-packing技术来对整数进行编码 https://orc.apache.org/specification/ORCv1/</description>
     </item>
     <item>
      <title>关于压缩算法的选择和使用场景</title>
      <link>https://dirtysalt.github.io/html/selection-and-scenario-of-compression-algorithm.html</link>
      <pubDate>202106</pubDate>
      <description>看了两篇关于压缩算法选择和使用场景的文章：</description>
     </item>
     <item>
      <title>Volcano - An Extensible and Parallel Query Evaluation System</title>
      <link>https://dirtysalt.github.io/html/vocalno-extensible-parallel-query-system.html</link>
      <pubDate>202106</pubDate>
      <description>文章时间有点长了，可能在那个年代大家都不知道怎么做一个可扩展的并行查询系统，都处于摸索阶段。可能大家都各自实现了自己的并行查询系统，但是缺点就是自立门户，许多问题也没有完全搞清楚，很难形成合力或者是共识。这篇文章告诉大家，只要加上一个exchange operator就可以很容易地解决并行问题，然后这些operator接口也可以规范起来(iterator, open/next/close). 有了清晰的抽象才能有良好的实现。</description>
     </item>
     <item>
      <title>Large-scale cluster management at Google with Borg</title>
      <link>https://dirtysalt.github.io/html/google-borg-paper.html</link>
      <pubDate>202106</pubDate>
      <description>这个资源管理系统在Google据说使用很多年了，但是直到2015年才公开论文。并且此时Omega以及k8s都已经出来了。文章里面没有说什么具体的调度算法，但是说到了资源调度的需求，问题以及这些问题的解决办法。</description>
     </item>
     <item>
      <title>Albis: High-Performance File Format for Big Data Systems</title>
      <link>https://dirtysalt.github.io/html/albis-high-perf-file-format-for-big-data-sys.html</link>
      <pubDate>202105</pubDate>
      <description>文章有个假设就是现阶段CPU/IO之间的差距出现了变化，随着100Gbps网卡以及NVMe存储设备的出现，IO速度越来越高，反而CPU处理上出现瓶颈。所以文章认为在文件格式设计上，应该尽可能地减少CPU的处理时间（解压缩以及解码的时间），不使用复杂的编码/压缩方法，另外就是直接使用二进制存储，减少反序列化的时间。最终设计出来的文件格式好像没有什么意思，按照列进行切分，本质上还是row-based format. 每行上所有的column都是使用类似内存的二进制方式紧凑存储的。我觉得文章对我启发最大的点，在于如何说明CPU而非IO开始成为瓶颈。</description>
     </item>
     <item>
      <title>CMU DB Multi-Version Concurrency Control</title>
      <link>https://dirtysalt.github.io/html/cmudb-mvcc.html</link>
      <pubDate>202105</pubDate>
      <description>MVCC不仅仅是个CC，具体的CC实现是用的还是前面几节讲的内容。除此之外好包括：版本管理，GC，以及索引管理。</description>
     </item>
     <item>
      <title>Better bitmap performance with Roaring bitmaps</title>
      <link>https://dirtysalt.github.io/html/better-bitmap-perf-with-roaring-bitmaps.html</link>
      <pubDate>202105</pubDate>
      <description>这篇文章对标的两个实现是：WAH以及CONCISE. 两者的实现思路都差不多，都是将n个bits进行压缩，压缩单元为word(假设w个bits). WAH实现方式是，一个word里面只使用w-1bits, msb用来标记这个word属性：0 的话就表示literal word, 1的话下一个bit表示具体值，剩下的(w-2)bits表示长度，类似RLE的方法。CONCISE在这个基础上做了点改进，就是允许增加一个flip word，以便更好应对偶然的flip bit情况。</description>
     </item>
     <item>
      <title>CMU DB: Concurrency Control Theory</title>
      <link>https://dirtysalt.github.io/html/cmudb-concurrency-control-theory.html</link>
      <pubDate>202105</pubDate>
      <description>并发控制主要是为了实现事务，在实现上分为悲观和乐观控制两种方式：悲观假设所有的事务会相互冲突，实现出来支持的吞吐量不搞；乐观假设事务是不会相互冲突的，可以同时执行，直到发生实际冲突。</description>
     </item>
     <item>
      <title>Orca: A Modular Query Optimizer Architecture for Big Data</title>
      <link>https://dirtysalt.github.io/html/orca-a-modular-query-optimizer.html</link>
      <pubDate>202105</pubDate>
      <description>这个系统是用来替换GP/Pivotal原来的Planner的，强调如何实现一个模块化的Query Optimizer，关注于包括：模块化，扩展性，利用多核，可验证性（或者说可调试性），以及性能几个方面。</description>
     </item>
     <item>
      <title>Automated Locality Optimization Based on the Reuse Distance of String Operations</title>
      <link>https://dirtysalt.github.io/html/automated-locality-opt-based-on-reuse-dist-of-string-ops.html</link>
      <pubDate>202105</pubDate>
      <description>这个论文的思路非常简单，就是分析某个对象的temporal locality, 决定本地操作这个对象是应该采用temporal write/read还是non-temporal write/read. 文章以memcpy函数举例，但是可以扩展到许多个string operations的函数上。思路虽然简单，但是实现上有许多坑，而且都是系统级别的坑，所以好多也看不太懂。</description>
     </item>
     <item>
      <title>Push vs. Pull-Based Loop Fusion in Query Engines</title>
      <link>https://dirtysalt.github.io/html/push-vs-pull-based-loop-fusion-in-query-engines.html</link>
      <pubDate>202105</pubDate>
      <description>参考文章： http://justinjaffray.com/query-engines-push-vs.-pull/</description>
     </item>
     <item>
      <title>观察Memory Ordering效果</title>
      <link>https://dirtysalt.github.io/html/watch-memory-ordering-effect.html</link>
      <pubDate>202105</pubDate>
      <description>代码 参考了这篇文章 https://preshing.com/20120515/memory-reordering-caught-in-the-act/</description>
     </item>
     <item>
      <title>Morsel-Driven Parallelism: A NUMA-Aware Query Evaluation Framework for the Many-Core Age</title>
      <link>https://dirtysalt.github.io/html/morsel-driven-parallelism-framework.html</link>
      <pubDate>202104</pubDate>
      <description>https://db.in.tum.de/~leis/papers/morsels.pdf</description>
     </item>
     <item>
      <title>fast memcpy/memcmp中的SIMD</title>
      <link>https://dirtysalt.github.io/html/fast-memcmp-and-memcpy-simd.html</link>
      <pubDate>202104</pubDate>
      <description>memcpy这个话题我是从 怎样写出一个更快的 memset/memcpy ？ - 知乎 这里看到的。skywind写了个FastMemcpy的实现，并且用几篇文章做了说明</description>
     </item>
     <item>
      <title>CMUDB: Sort + Agg + Join</title>
      <link>https://dirtysalt.github.io/html/cmudb-sort-agg-join.html</link>
      <pubDate>202104</pubDate>
      <description>通常外排都会使用多路排序，我们首先计算需要多少趟(phase):</description>
     </item>
     <item>
      <title>int64数组转为int8数组的矢量化方式</title>
      <link>https://dirtysalt.github.io/html/convert-array-int64-to-int8.html</link>
      <pubDate>202104</pubDate>
      <description>背景就不说了，目标就是把int64数组转为int8数组，不用考虑overflow的情况。</description>
     </item>
     <item>
      <title>CMU DB: Index Concurrency Control</title>
      <link>https://dirtysalt.github.io/html/cmudb-index-concurrency-control.html</link>
      <pubDate>202104</pubDate>
      <description>Lock & Latch: Lock在DBMS里面特指在事务方面的锁，而Latch则指操作系统层面上的锁比如mutex.</description>
     </item>
     <item>
      <title>CMU DB: Tree Indexes</title>
      <link>https://dirtysalt.github.io/html/cmudb-tree-indexes.html</link>
      <pubDate>202104</pubDate>
      <description>主要就是介绍BTree/B+Tree. 通常来说我们遇到的都是B+Tree, 就是中间节点只是存放指针信息，只有在叶子节点上才存放真正的数据。只不过因为B+Tree太广泛使用了，所以有时候认为这个才是BTree.</description>
     </item>
     <item>
      <title>CMU DB: Hash Index</title>
      <link>https://dirtysalt.github.io/html/cmudb-hash-index.html</link>
      <pubDate>202104</pubDate>
      <description>关于HashFunction选择，选择XXHash和FarmHash基本上没有啥问题</description>
     </item>
     <item>
      <title>DDB入职当天</title>
      <link>https://dirtysalt.github.io/html/firstday-ddb.html</link>
      <pubDate>202104</pubDate>
      <description>入职前天还去取了一下体检报告，有好几个指标都不太乐观：双侧淋巴结肿大，甘油三脂和血尿酸偏高，窦性心律过缓，甲状腺左侧叶结节，胆囊息肉，幽门口杆菌，双侧动脉弹性稍差。一个原因是因为缺少锻炼，另外一个原因则是因为吃主食（米饭）太多，还有就是饮食时间不规律。主食太多了会转换成为脂肪，导致超重和甘油三脂提高。血尿酸偏高可能是和家族遗传史有关系，我记得父亲经常痛风，所以他的血尿酸可能也偏高。胆囊息肉和油脂过高以及饮食时间不规律，以及睡眠时间太晚有习惯。息肉的原因很可能是因为胆汁没有办法分泌，积累下来就成为了息肉。</description>
     </item>
     <item>
      <title>C语言switch表格跳转的汇编实现</title>
      <link>https://dirtysalt.github.io/html/c-switch-table-in-asm.html</link>
      <pubDate>202104</pubDate>
      <description>最近在看 https://github.com/skywind3000/FastMemcpy/ 这个超快的memcpy实现，里面有段代码让我想到了一个困惑很久的问题，就是据说switch如果分支很多的话，那么会实现表格跳转实现来生成代码，但是我始终不太清楚这个汇编实现是什么样子的。今天看了一下这段汇编代码，好像也不是特别复杂。</description>
     </item>
     <item>
      <title>GCC-10.3.0优化器在处理类型强转时的bug</title>
      <link>https://dirtysalt.github.io/html/gcc-10-optimzation-bug-on-type-based-aliasing.html</link>
      <pubDate>202104</pubDate>
      <description>下面代码使用-O2和-O3编译会得到不同的结果</description>
     </item>
     <item>
      <title>快速平方根倒数(Fast Inverse Square Root)</title>
      <link>https://dirtysalt.github.io/html/fast-inverse-sqrt-quake.html</link>
      <pubDate>202104</pubDate>
      <description>https://www.youtube.com/watch?v=p8u_k2LIZyo</description>
     </item>
     <item>
      <title>CMU DB: Buffer Pools</title>
      <link>https://dirtysalt.github.io/html/cmudb-buffer-pools.html</link>
      <pubDate>202104</pubDate>
      <description>https://15445.courses.cs.cmu.edu/fall2020/schedule.html</description>
     </item>
     <item>
      <title>CMU DB: Query Planning</title>
      <link>https://dirtysalt.github.io/html/cmudb-query-planning.html</link>
      <pubDate>202103</pubDate>
      <description>https://15445.courses.cs.cmu.edu/fall2020/schedule.html</description>
     </item>
     <item>
      <title>CMU DB: Database Storage</title>
      <link>https://dirtysalt.github.io/html/cmudb-database-storage.html</link>
      <pubDate>202103</pubDate>
      <description>https://15445.courses.cs.cmu.edu/fall2020/schedule.html</description>
     </item>
     <item>
      <title>CMU DB: Query Processing</title>
      <link>https://dirtysalt.github.io/html/cmudb-query-processing.html</link>
      <pubDate>202103</pubDate>
      <description>https://15445.courses.cs.cmu.edu/fall2020/schedule.html</description>
     </item>
     <item>
      <title>Scaling Memcache at Facebook</title>
      <link>https://dirtysalt.github.io/html/scaling-memcache-at-facebook.html</link>
      <pubDate>202103</pubDate>
      <description>FB内部是如何利用和改进Memcache集群的。在FB内部，memcache被集中管理起来分为3个层次：</description>
     </item>
     <item>
      <title>Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing</title>
      <link>https://dirtysalt.github.io/html/spark-rdd-paper.html</link>
      <pubDate>202103</pubDate>
      <description>https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf @ 2012</description>
     </item>
     <item>
      <title>Bitcoin: A Peer-to-Peer Electronic Cash System</title>
      <link>https://dirtysalt.github.io/html/bitcoin.html</link>
      <pubDate>202103</pubDate>
      <description></description>
     </item>
     <item>
      <title>Spark SQL: Relational Data Processing in Spark</title>
      <link>https://dirtysalt.github.io/html/spark-sql-paper.html</link>
      <pubDate>202103</pubDate>
      <description>这个东西在Spark的生态中特别有用，尤其是在ML领域。读下来的感觉就是，这个东西的亮点主要是在接口设计上，计算实现则完全依赖于Spark计算引擎：</description>
     </item>
     <item>
      <title>Impala: A Modern, Open-Source SQL Engine for Hadoop</title>
      <link>https://dirtysalt.github.io/html/impala-paper.html</link>
      <pubDate>202103</pubDate>
      <description>系统有这么几个特点：</description>
     </item>
     <item>
      <title>Dremel: Interactive Analysis of Web-Scale Datasets</title>
      <link>https://dirtysalt.github.io/html/dremel.html</link>
      <pubDate>202103</pubDate>
      <description></description>
     </item>
     <item>
      <title>There’s plenty of room at the Top: What will drive computer performance after Moore’s law?</title>
      <link>https://dirtysalt.github.io/html/performance-at-top-after-moore-law.html</link>
      <pubDate>202103</pubDate>
      <description>https://www.researchgate.net/publication/341939320_There's_plenty_of_room_at_the_Top_What_will_drive_computer_performance_after_Moore's_law</description>
     </item>
     <item>
      <title>《不可能的技艺》4：超人怎样学</title>
      <link>https://dirtysalt.github.io/html/how-to-learn-in-systematic-way.html</link>
      <pubDate>202103</pubDate>
      <description>这个方法分为五步。</description>
     </item>
     <item>
      <title>Procella: Unifying serving and analytical data at YouTube</title>
      <link>https://dirtysalt.github.io/html/youtube-procella.html</link>
      <pubDate>202103</pubDate>
      <description>Procella的需要包括下面这几个（我觉得可以说是对一个数据分析系统几乎所有的需求了）</description>
     </item>
     <item>
      <title>Kudu: Storage for Fast Analytics on Fast Data</title>
      <link>https://dirtysalt.github.io/html/apache-kudu-paper.html</link>
      <pubDate>202103</pubDate>
      <description>在Apache生态下面，比较适合数据分析的文件结构有Avro/Parquet. 但是这些文件结构如果放在HDFS上的话，就没有办法做到快速更新和随机查询。HBase/C*倒是适合快速更新和随机查询，但是存储结构又不太适合用于数据分析（不知道SQL on HBase性能如何，估计做某些复杂查询的时候可能力不从心）所以需要这么一个存储系统: 分布式的，允许快速更新和查询，能提供大吞吐量的，适合数据分析的。Kudu就是这么一个东西，可以认为是改良版的Avro/Parquet on HDFS，但绝对不是简单的组合。</description>
     </item>
     <item>
      <title>Mesa: Geo-Replicated, Near Real-Time, Scalable Data Warehousing</title>
      <link>https://dirtysalt.github.io/html/google-mesa.html</link>
      <pubDate>202103</pubDate>
      <description>Mesa有几个比较重要的Requirements:</description>
     </item>
     <item>
      <title>搜索引擎很强大，还需要自己思考答案吗？</title>
      <link>https://dirtysalt.github.io/html/why-we-think-when-we-have-search-engine.html</link>
      <pubDate>202102</pubDate>
      <description>我在约翰霍普金斯大学读书时，经常下午5点钟在马路上跑步。有一天我跑步时，正好遇到一位同学开车经过，他看我跑得满头汗，就好心问要不要捎上我一段，我说我跑步就是为了出汗锻炼，他马上也就笑了。</description>
     </item>
     <item>
      <title>杨樾老师的育儿直播</title>
      <link>https://dirtysalt.github.io/html/some-thoughts-about-child-education.html</link>
      <pubDate>202103</pubDate>
      <description>微博友人 @地理老师宋学超 整理的 @杨樾杨樾 老师的育儿直播要点总结. http://weibo.com/2531050621/E6dUrd2em</description>
     </item>
     <item>
      <title>The Almanack of Naval Ravikant</title>
      <link>https://dirtysalt.github.io/html/the-almanack-of-naval-ravikant.html</link>
      <pubDate>202102</pubDate>
      <description>https://www.yuque.com/qingmiyang/naval</description>
     </item>
     <item>
      <title>投资中最简单的事</title>
      <link>https://dirtysalt.github.io/html/the-simplest-things-in-investment.html</link>
      <pubDate>202102</pubDate>
      <description>https://book.douban.com/subject/26163553/</description>
     </item>
     <item>
      <title>Performance Analysis and Tuning on Modern CPUs</title>
      <link>https://dirtysalt.github.io/html/perf-analysis-and-tuning-on-modern-cpus.html</link>
      <pubDate>202102</pubDate>
      <description>https://easyperf.net/</description>
     </item>
     <item>
      <title>Doris Hash Index 分析</title>
      <link>https://dirtysalt.github.io/html/doris-hash-index.html</link>
      <pubDate>202102</pubDate>
      <description>https://github.com/apache/incubator-doris/commit/73999974332362a3874bedb7d64cbd3f177718ec</description>
     </item>
     <item>
      <title>出卖了我的灵魂，换得了学生贷款</title>
      <link>https://dirtysalt.github.io/html/sold-my-soul-for-a-student-load.html</link>
      <pubDate>202102</pubDate>
      <description>我的穷学生在债务陷阱中爬不出来，每星期打工30多个小时。我怎么教他们呢？</description>
     </item>
     <item>
      <title>SIMD代码片段分析</title>
      <link>https://dirtysalt.github.io/html/few-simd-code-snippets.html</link>
      <pubDate>202102</pubDate>
      <description>过去一直想收集些自己曾经看过的SIMD代码，觉得这些代码写出来都非常有意思。按照我粗浅的理解，SIMD设计初衷有两个：数据并行化以及减少分支操作。数据并行化这个自不必说，在许多代码下面如果分支预测不好的话，CPU的深度流水线就没有什么用途，造成的misprediction penalty是非常高的。所以在设计和使用SIMD指令的时候，脑子里面一定要将程序设计里面的分支跳转全部忘掉，而是想如何能够使用mask, and, or这些bit操作技巧来得到计算结果。</description>
     </item>
     <item>
      <title>代码之美(Beautiful Code)</title>
      <link>https://dirtysalt.github.io/html/beautiful-code.html</link>
      <pubDate>202101</pubDate>
      <description>https://book.douban.com/subject/3224524/</description>
     </item>
     <item>
      <title>近期《精英日课》的几篇文章</title>
      <link>https://dirtysalt.github.io/html/few-blogs-of-elite-course.html</link>
      <pubDate>202101</pubDate>
      <description>为什么新闻没有好消息？</description>
     </item>
     <item>
      <title>几个PopCount的实现</title>
      <link>https://dirtysalt.github.io/html/popcount-functions.html</link>
      <pubDate>202101</pubDate>
      <description>从 《Beautiful Code》这本书里面看到的一章《The Quest for an Accelerated Population Count》by Henrry S.Warren, Jr.他也是《Hacker Delight》的作者，那本书里面也收集了各种计算技巧，有时间可以拿来翻翻。这篇文章讲的就是如何计算一个整数中bit=1的数量。</description>
     </item>
     <item>
      <title>Optimizing software in C++</title>
      <link>https://dirtysalt.github.io/html/optimizing-software-in-cpp.html</link>
      <pubDate>202101</pubDate>
      <description>http://www.agner.org/optimize/</description>
     </item>
     <item>
      <title>矩阵转置的cache分析</title>
      <link>https://dirtysalt.github.io/html/matrix-transpose-cache-analysis.html</link>
      <pubDate>202101</pubDate>
      <description>最近在看一本关于C/C++性能优化的书，里面用矩阵转置说明了cpu cache使用效率问题，我也按照这个例子自己做了一个实验并进行了分析。完整的代码和说明也都放在 Github, 这里就把说明直接搬过来吧。</description>
     </item>
     <item>
      <title>不要在一点停留太久（关于交流，优化和挑战）</title>
      <link>https://dirtysalt.github.io/html/dont-stay-for-too-long.html</link>
      <pubDate>202101</pubDate>
      <description>细想起来，过去十多年，我觉得我的部分成功得益于一个良好的习惯，就是喜欢不断地探索工具。我当时2007年在山东大学读书，相比于北京同学来说，信息相对比较闭塞。所以这类探索给我带来了不少的好处，比如接触到了Linux/Unix这样的操作系统，会使用Perl/Python这样比较奇怪的语言。同时我还比较喜欢看一些在当时同学看来（虽然他们也是计算机系的）比较奇怪的书籍，比如《编译器构造》，《现代操作系统》等等，其他同学则比较务实一些比如看一些Java/J2EE/Oracle这类书籍，都喜欢使用Windows/Eclipse/Java这样的组合。这类探索大大开阔了我的眼界，让我知道还有外面还有更好的东西。从毕业之后，我就继续沿着这样的路径走了下来，直到现在。</description>
     </item>
     <item>
      <title>百年孤独(Cien años de soledad)</title>
      <link>https://dirtysalt.github.io/html/one-hundred-years-of-solitude.html</link>
      <pubDate>202101</pubDate>
      <description>https://book.douban.com/subject/6082808/</description>
     </item>
     <item>
      <title>Certificate Transparency</title>
      <link>https://dirtysalt.github.io/html/certificate-transparency.html</link>
      <pubDate>202101</pubDate>
      <description>https://www.certificate-transparency.org/what-is-ct https://www.certificate-transparency.org/how-ct-works https://research.swtch.com/tlog</description>
     </item>
     <item>
      <title>Spanner: Google's Globally-Distributed Database</title>
      <link>https://dirtysalt.github.io/html/spanner.html</link>
      <pubDate>202101</pubDate>
      <description></description>
     </item>
     <item>
      <title>Don’t Settle for Eventual: Scalable Causal Consistency for Wide-Area Storage with COPS</title>
      <link>https://dirtysalt.github.io/html/cops-causal-consistency.html</link>
      <pubDate>202101</pubDate>
      <description>https://pdos.csail.mit.edu/6.824/papers/cops.pdf</description>
     </item>
     <item>
      <title>错误的自我评价</title>
      <link>https://dirtysalt.github.io/html/incorrect-self-eval.html</link>
      <pubDate>202101</pubDate>
      <description>过去几年，受惠于移动互联网的快速发展，期间加入了一家做移动App统计的创业公司，获得了一些成绩。于是在被收购的第二年，开始雄心勃勃地想，以自己的能力，要是加入一个更加早期的创业公司，那岂不能赚更多的钱？那是2016年，移动互联网的热潮还没有褪去，许多上一波创业成功的人，还想继续复制之前的成功，于是更多的创业公司出来了，我便选择加入其中一家公司。</description>
     </item>
     <item>
      <title>短期主义者和长期主义者</title>
      <link>https://dirtysalt.github.io/html/short-termer-and-long-termer.html</link>
      <pubDate>202101</pubDate>
      <description>https://www.dedao.cn/article/wgpMLla6Py4qK25qp8XYmvNzjd2Zx1</description>
     </item>
     <item>
      <title>战胜一切市场的人(A Man for All Markest)</title>
      <link>https://dirtysalt.github.io/html/a-man-for-all-markets.html</link>
      <pubDate>202101</pubDate>
      <description>https://book.douban.com/subject/33406377/</description>
     </item>
     <item>
      <title>从跑步想到生活</title>
      <link>https://dirtysalt.github.io/html/from-running-to-life.html</link>
      <pubDate>202101</pubDate>
      <description>最近一段时间跑步，每次开始都是有点不太情愿，有主观也有客观原因，比如昨晚上没有睡好觉，或者是单纯地觉得身体有点皱皱巴巴的。不过最后都是，喝了一碗黑芝麻糊，刷了一会微博之后，带上装备又出去跑步了。刚开始，身体或多或少有点不适，身体感觉没有力气，换气也有点不太顺畅，于是就刻意地降低速度下来。我给自己的目标是，今天只要跑完4km-5km即可，至于跑多久没有要求。跑步的目的就是为了可以让一天充满精力地应对工作和生活，也不是为了刷成绩或者什么的，所以想怎么跑就怎么跑，只要能坚持下来就行。</description>
     </item>
     <item>
      <title>微软中国入职当天</title>
      <link>https://dirtysalt.github.io/html/firstday-at-china-microsoft.html</link>
      <pubDate>202101</pubDate>
      <description>原以为amazon的工作环境（特指开发环境）已经够糟糕的了，但是来了微软之后才知道什么才是更加糟糕的。清一色的windows操作系统，开发和生产环境都是windows. 说几个从mac系统切换到windows系统的几个不适应的地方吧。</description>
     </item>
     <item>
      <title>为什么新闻没有好消息？</title>
      <link>https://dirtysalt.github.io/html/why-no-good-news.html</link>
      <pubDate>202101</pubDate>
      <description>https://www.dedao.cn/article/ml9WNdP1QvaeKYda3RXAzx82Dyog0B</description>
     </item>
     <item>
      <title>“想要”还是“喜欢”：什么是上瘾</title>
      <link>https://dirtysalt.github.io/html/what-is-addict-want-or-like.html</link>
      <pubDate>202101</pubDate>
      <description>https://www.dedao.cn/article/Lpy0edZAG5mnK0wv11XzD9BkoajY4x</description>
     </item>
     <item>
      <title>“苦”没有价值</title>
      <link>https://dirtysalt.github.io/html/just-pain-is-useless.html</link>
      <pubDate>202101</pubDate>
      <description>https://www.dedao.cn/article/ov5WgnrDGd8bKNdLkEJMNRm1wO264y</description>
     </item>
     <item>
      <title>代孕的伦理：我们担心的到底是什么？</title>
      <link>https://dirtysalt.github.io/html/morality-of-surrogacy-and-what-we-concern.html</link>
      <pubDate>202101</pubDate>
      <description>https://www.dedao.cn/article/a8QZdRM1OmLxVvGDW7JG69rgYPjqWp</description>
     </item>
     <item>
      <title>从国内亚马逊离职</title>
      <link>https://dirtysalt.github.io/html/leaving-from-china-amazon.html</link>
      <pubDate>202012</pubDate>
      <description>这次离职过程可以说是极其不顺利。</description>
     </item>
     <item>
      <title>MSR FaRM: distributed transactions with consistency, availability, and performance</title>
      <link>https://dirtysalt.github.io/html/msr-farm.html</link>
      <pubDate>202012</pubDate>
      <description>https://pdos.csail.mit.edu/6.824/papers/farm-2015.pdf</description>
     </item>
     <item>
      <title>Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases</title>
      <link>https://dirtysalt.github.io/html/amazon-aurora-paper.html</link>
      <pubDate>202012</pubDate>
      <description>Aurora本质上还是一个类MySQL的数据库，读写压力都在单机上，而不是一个真正意义上的分布式数据库。对于有副本(replica)的单机数据库而言，瓶颈通常可能不是CPU或者是内存，而是因为同步需要网络IO而造成的延迟。Aurora做的事情，就是将这个同步延迟降低到最低，同时保证可用性。另外Aurora采用了计算和存储分离的架构，这个架构首先是在Snowflake上看到的，我挺喜欢这个架构的。它比较符合云趋势，因为通常来说很难保证CPU/Memory/Storage能够最好地匹配起来。对于云厂商来说，这种架构也比较像他们内部开发分工，计算资源归计算部分，存储资源归存储部门。</description>
     </item>
     <item>
      <title>Writing a simple os from scratch</title>
      <link>https://dirtysalt.github.io/html/writing-a-simple-os-from-scratch.html</link>
      <pubDate>202012</pubDate>
      <description>https://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf</description>
     </item>
     <item>
      <title>刷新(Hit Refresh)</title>
      <link>https://dirtysalt.github.io/html/hit-refresh.html</link>
      <pubDate>202012</pubDate>
      <description>https://book.douban.com/subject/27614523/</description>
     </item>
     <item>
      <title>只有偏执狂才能生存</title>
      <link>https://dirtysalt.github.io/html/only-the-paranoid-survive.html</link>
      <pubDate>202012</pubDate>
      <description>https://book.douban.com/subject/1002474/</description>
     </item>
     <item>
      <title>若为自由故(Free as in Freedom)</title>
      <link>https://dirtysalt.github.io/html/rms-autobiography-free-as-in-freedom.html</link>
      <pubDate>202012</pubDate>
      <description>笔记本导出 若为自由故——自由软件之父理查德·斯托曼传（异步图书） Sam Williams</description>
     </item>
     <item>
      <title>香农传(A Mind at Play)</title>
      <link>https://dirtysalt.github.io/html/claude-shannon-autobiography-a-mind-at-play.html</link>
      <pubDate>202012</pubDate>
      <description>https://book.douban.com/subject/30320103/</description>
     </item>
     <item>
      <title>当我谈跑步时我谈些什么</title>
      <link>https://dirtysalt.github.io/html/what-we-talk-about-when-we-talk-about-running.html</link>
      <pubDate>202012</pubDate>
      <description>https://book.douban.com/subject/3369600/</description>
     </item>
     <item>
      <title>经济学的思维方式(Basic Economics : A Common Sense Guide to the Economy)</title>
      <link>https://dirtysalt.github.io/html/basic-economics.html</link>
      <pubDate>202012</pubDate>
      <description>https://book.douban.com/subject/30274068/</description>
     </item>
     <item>
      <title>我编程，我快乐(The Passionate Programmer)</title>
      <link>https://dirtysalt.github.io/html/the-passionate-programmer.html</link>
      <pubDate>202012</pubDate>
      <description>https://book.douban.com/subject/4923179/</description>
     </item>
     <item>
      <title>程序员的自我修养</title>
      <link>https://dirtysalt.github.io/html/programmer-self-cultivation.html</link>
      <pubDate>202012</pubDate>
      <description>Programmer's Self Cultivation</description>
     </item>
     <item>
      <title>曾国藩的六戒！</title>
      <link>https://dirtysalt.github.io/html/zengguofan-six-rules.html</link>
      <pubDate>202011</pubDate>
      <description>第一戒：久利之事勿为，众争之地勿往</description>
     </item>
     <item>
      <title>咨询行业和Best Practice</title>
      <link>https://dirtysalt.github.io/html/consultant-and-best-practice.html</link>
      <pubDate>202011</pubDate>
      <description>https://weibo.com/2658151684/JvMmsfCUW</description>
     </item>
     <item>
      <title>爱，金钱和孩子（Love, Money, and Parenting）</title>
      <link>https://dirtysalt.github.io/html/love-money-and-parenting.html</link>
      <pubDate>202011</pubDate>
      <description>https://book.douban.com/subject/33462451/</description>
     </item>
     <item>
      <title>上瘾五百年(Forces of Habit)</title>
      <link>https://dirtysalt.github.io/html/forces-of-habit.html</link>
      <pubDate>202011</pubDate>
      <description>https://book.douban.com/subject/25908552/</description>
     </item>
     <item>
      <title>数学家妙谈股市(A Mathematician Plays the Stock Market)</title>
      <link>https://dirtysalt.github.io/html/a-mathematician-plays-the-stock-market.html</link>
      <pubDate>202011</pubDate>
      <description>https://book.douban.com/subject/1083994/</description>
     </item>
     <item>
      <title>NoSQL数据库笔谈</title>
      <link>https://dirtysalt.github.io/html/nosql-database-notes.html</link>
      <pubDate>202010</pubDate>
      <description>OLAP报表产品最大的难点在哪里？</description>
     </item>
     <item>
      <title>SRE Google运维解密(SRE: How Google Runs Production Systems)</title>
      <link>https://dirtysalt.github.io/html/sre-how-google-runs-production-systems.html</link>
      <pubDate>202010</pubDate>
      <description>https://book.douban.com/subject/26875239/</description>
     </item>
     <item>
      <title>策略思维(Thinking Strategically)</title>
      <link>https://dirtysalt.github.io/html/thinking-strategically.html</link>
      <pubDate>202010</pubDate>
      <description>https://book.douban.com/subject/1084435/</description>
     </item>
     <item>
      <title>系统性能：企业与云计算(Systems Performance: Enterprise and the Cloud)</title>
      <link>https://dirtysalt.github.io/html/systems-performance-enterprise-and-the-cloud.html</link>
      <pubDate>202010</pubDate>
      <description>http://www.brendangregg.com/blog/2020-07-15/systems-performance-2nd-edition.html</description>
     </item>
     <item>
      <title>The Snowflake Elastic Data Warehouse</title>
      <link>https://dirtysalt.github.io/html/snowflake-paper.html</link>
      <pubDate>202010</pubDate>
      <description>https://dl.acm.org/doi/pdf/10.1145/2882903.2903741</description>
     </item>
     <item>
      <title>Frangipani: A Scalable Distributed File System</title>
      <link>https://dirtysalt.github.io/html/frangipani.html</link>
      <pubDate>202010</pubDate>
      <description>https://pdos.csail.mit.edu/6.824/papers/thekkath-frangipani.pdf</description>
     </item>
     <item>
      <title>Linearizability versus Serializability</title>
      <link>https://dirtysalt.github.io/html/lz-vs-sz.html</link>
      <pubDate>202010</pubDate>
      <description>http://www.bailis.org/blog/linearizability-versus-serializability/</description>
     </item>
     <item>
      <title>Object Storage on CRAQ</title>
      <link>https://dirtysalt.github.io/html/object-storage-on-craq.html</link>
      <pubDate>202009</pubDate>
      <description>https://pdos.csail.mit.edu/6.824/papers/craq.pdf</description>
     </item>
     <item>
      <title>Reinventing virtualization with the AWS Nitro System</title>
      <link>https://dirtysalt.github.io/html/reinventing-virtualization-with-aws-nitro.html</link>
      <pubDate>202009</pubDate>
      <description>https://www.allthingsdistributed.com/2020/09/reinventing-virtualization-with-aws-nitro.html</description>
     </item>
     <item>
      <title>The Google File System</title>
      <link>https://dirtysalt.github.io/html/gfs.html</link>
      <pubDate>202009</pubDate>
      <description>http://research.google.com/archive/gfs.html @ 2003</description>
     </item>
     <item>
      <title>MapReduce: Simplified Data Processing on Large Clusters</title>
      <link>https://dirtysalt.github.io/html/mapreduce.html</link>
      <pubDate>202009</pubDate>
      <description>http://research.google.com/archive/mapreduce.html @ 2004</description>
     </item>
     <item>
      <title>ZooKeeper: Wait-free coordination for Internet-scale systems</title>
      <link>https://dirtysalt.github.io/html/zookeeper.html</link>
      <pubDate>202009</pubDate>
      <description>http://research.yahoo.com/pub/3280 @ 2010</description>
     </item>
     <item>
      <title>Raft(A consensus algorithm)</title>
      <link>https://dirtysalt.github.io/html/raft.html</link>
      <pubDate>202009</pubDate>
      <description>参考链接</description>
     </item>
     <item>
      <title>一小段关于linearizability的解释</title>
      <link>https://dirtysalt.github.io/html/words-on-linearizability.html</link>
      <pubDate>202009</pubDate>
      <description>https://pdos.csail.mit.edu/6.824/notes/l-raft2.txt</description>
     </item>
     <item>
      <title>The Design of a Practical System for Fault-Tolerant Virtual Machines</title>
      <link>https://dirtysalt.github.io/html/the-design-of-a-practical-system-for-ft-vm.html</link>
      <pubDate>202008</pubDate>
      <description>https://pdos.csail.mit.edu/6.824/papers/vm-ft.pdf</description>
     </item>
     <item>
      <title>40 Tips that will change your coding skills forever</title>
      <link>https://dirtysalt.github.io/html/40-tips-that-will-change-your-coding-skills-forever.html</link>
      <pubDate>202007</pubDate>
      <description>https://medium.com/swlh/40-tips-that-will-change-your-coding-skills-forever-bf9d6b936ccc</description>
     </item>
     <item>
      <title>禅与摩托车维修艺术(Zen and the Arts of Motorcycle Maintenance)</title>
      <link>https://dirtysalt.github.io/html/zen-and-the-arts-of-motorcycle-maintenance.html</link>
      <pubDate>202006</pubDate>
      <description>https://book.douban.com/subject/6811366/</description>
     </item>
     <item>
      <title>程序员健康指南(The Healthy Programmer)</title>
      <link>https://dirtysalt.github.io/html/the-healthy-programmer.html</link>
      <pubDate>202006</pubDate>
      <description>https://book.douban.com/subject/25981248/</description>
     </item>
     <item>
      <title>人月神话(The Mythical Man-Month)</title>
      <link>https://dirtysalt.github.io/html/the-mythical-man-month.html</link>
      <pubDate>202006</pubDate>
      <description>https://book.douban.com/subject/1102259/</description>
     </item>
     <item>
      <title>PLAI笔记</title>
      <link>https://dirtysalt.github.io/html/plai-notes.html</link>
      <pubDate>202006</pubDate>
      <description>我看的是中文版本 https://lotuc.gitbooks.io/plai-cn/content/ 可以下载到英文版本。这本书使用的语言是Racket plai-typed方言，我在自己的DrRacket里面没有找到，所以好多例子也没有跑。我感觉这本书写的比较松散，不太适合作为自学材料。我简单地翻了一下每节，我觉得自己对程序语言里面的大部分议题都稍微有所了解。书中对宏，CPS以及类型系统有单独三章来讲述，而且篇幅都比较长，应该是比较重要的内容。我对这些议题都是浅尝辄止，大概知道怎么回事，稍微深入就不行。但是我也不打算去深入学习它，脱离实际语言来学习这些东西，我觉得有点头晕。</description>
     </item>
     <item>
      <title>设计模式Head First</title>
      <link>https://dirtysalt.github.io/html/design-patterns-head-first.html</link>
      <pubDate>202006</pubDate>
      <description>https://book.douban.com/subject/2243615/</description>
     </item>
     <item>
      <title>Spring实战第三版</title>
      <link>https://dirtysalt.github.io/html/spring-in-action-v3.html</link>
      <pubDate>202006</pubDate>
      <description>https://book.douban.com/subject/24714203/</description>
     </item>
     <item>
      <title>二分图最大匹配算法</title>
      <link>https://dirtysalt.github.io/html/bipartite-maximum-matching.html</link>
      <pubDate>202006</pubDate>
      <description>我觉得链接文章写得非常好，看这一篇就足够了。匈牙利算法的本质思想，还是不断地寻找增广路径。 对于 网络最大流问题 来说，增广路径就是在残留图上寻找s->t的可行路径，而对于二分图来说，增广路径是 "一条s,t分别是未匹配节点，中间所经过的节点都是匹配节点的路径"。</description>
     </item>
     <item>
      <title>欧拉定理和费马小定理</title>
      <link>https://dirtysalt.github.io/html/euler-and-fermat-little-theorem.html</link>
      <pubDate>202006</pubDate>
      <description>这个定理是我做codeforces题目上了解到的，这题目可以分解成为两个问题：</description>
     </item>
     <item>
      <title>硅谷王川电子书第一卷</title>
      <link>https://dirtysalt.github.io/html/sv-wangchuan-investguru-v1.html</link>
      <pubDate>202005</pubDate>
      <description>https://zhuanlan.zhihu.com/p/20252392</description>
     </item>
     <item>
      <title>Braifuck的JIT编译器</title>
      <link>https://dirtysalt.github.io/html/brainfuck-jit-compiler.html</link>
      <pubDate>202004</pubDate>
      <description>最近这段时间对JIT有点兴趣（主要是前些时间看到luajit, 听说这个东西执行速度非常快），想深入了解一下，找到了好几个资源：</description>
     </item>
     <item>
      <title>计算三角形面积</title>
      <link>https://dirtysalt.github.io/html/area-of-triangle.html</link>
      <pubDate>202004</pubDate>
      <description>这个问题是今天在做 https://leetcode-cn.com/problems/largest-triangle-area/ 题目时候遇到的。我隐约地记得，两个向量的叉乘，是这两个向量围成的面积。所以如果三角形的两个向量进行叉乘的话，其结果绝对值的1/2就是三角形的面积。</description>
     </item>
     <item>
      <title>华容道/滑块问题算法改进</title>
      <link>https://dirtysalt.github.io/html/klotski-or-sliding-puzzle-revised.html</link>
      <pubDate>202003</pubDate>
      <description>https://leetcode.com/problems/sliding-puzzle/</description>
     </item>
     <item>
      <title>把树装进数组里面</title>
      <link>https://dirtysalt.github.io/html/put-tree-in-array.html</link>
      <pubDate>202003</pubDate>
      <description>昨天看到 https://www.youtube.com/watch?v=rF13507mRp8 这个视频，这个作者写的区间树太优雅了。 把树放进数组里面高效且实现简单，遍历起来也特别容易。这个模式总结下来有：</description>
     </item>
     <item>
      <title>Boyer–Moore majority vote algorithm</title>
      <link>https://dirtysalt.github.io/html/boyer-moore-majority-vote-algorithm.html</link>
      <pubDate>202003</pubDate>
      <description>https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm</description>
     </item>
     <item>
      <title>micro.mu 项目解析</title>
      <link>https://dirtysalt.github.io/html/micro-mu-project-overview.html</link>
      <pubDate>202003</pubDate>
      <description>官网地址在 https://micro.mu/docs/index.html 开发文档在 https://micro.github.io/development/</description>
     </item>
     <item>
      <title>rolling hashsh的两种实现</title>
      <link>https://dirtysalt.github.io/html/rolling-hash-in-two-ways.html</link>
      <pubDate>202002</pubDate>
      <description>我想以leetcode这道题目来讲讲rolling hash的两种实现 https://leetcode.com/problems/longest-duplicate-substring/</description>
     </item>
     <item>
      <title>使用扩展欧几里得算法求解整数二元一次不定方程</title>
      <link>https://dirtysalt.github.io/html/extended-gcd.html</link>
      <pubDate>202002</pubDate>
      <description>问题：形如ax+by=c(a,b均不为0)的方程，a,b,c都是整数，求(x,y)整数解。</description>
     </item>
     <item>
      <title>来自eval/apply的启发</title>
      <link>https://dirtysalt.github.io/html/some-thoughts-from-eval-and-apply.html</link>
      <pubDate>202002</pubDate>
      <description>SICP 这本书里面有一章专门讨论如何编写解释器，最终将解释器本质归纳成为两个函数：eval/apply.</description>
     </item>
     <item>
      <title>解决问题和学习底层知识的平衡</title>
      <link>https://dirtysalt.github.io/html/balance-of-solving-problem-and-learn-knowledge.html</link>
      <pubDate>202002</pubDate>
      <description>问题：为什么我总想了解编程中更底层的知识，而不是问题的解决？</description>
     </item>
     <item>
      <title>学习历史的一种方法</title>
      <link>https://dirtysalt.github.io/html/a-way-to-learn-history.html</link>
      <pubDate>202002</pubDate>
      <description>偶尔想到一种教娃历史的方法，念叨一下。</description>
     </item>
     <item>
      <title>A Guide to Making Your Science Matter</title>
      <link>https://dirtysalt.github.io/html/a-guide-to-making-your-science-matter.html</link>
      <pubDate>202001</pubDate>
      <description>https://www.goodreads.com/book/show/8690080-escape-from-the-ivory-tower</description>
     </item>
     <item>
      <title>一种更好的学习数学的方式</title>
      <link>https://dirtysalt.github.io/html/a-better-way-to-learn-math.html</link>
      <pubDate>202001</pubDate>
      <description>码农·美妙的数学（第23期）-图书-图灵社区</description>
     </item>
     <item>
      <title>正则表达式的Python实现</title>
      <link>https://dirtysalt.github.io/html/regexp-in-python.html</link>
      <pubDate>202001</pubDate>
      <description>参考文章 Regular Expression Matching Can Be Simple And Fast, 实现代码在 这里</description>
     </item>
     <item>
      <title>泊松分布和指数分布的关系</title>
      <link>https://dirtysalt.github.io/html/poisson-and-exp-distribution.html</link>
      <pubDate>202001</pubDate>
      <description>参考链接</description>
     </item>
     <item>
      <title>LZW算法的Python实现</title>
      <link>https://dirtysalt.github.io/html/lzw-algorithm-in-python.html</link>
      <pubDate>202001</pubDate>
      <description>为什么想到要实现一下lzw, 还是因为最近看到云风的一篇文章 云风的 BLOG: 基于TCP数据流的压缩，觉得这个很有意思。</description>
     </item>
     <item>
      <title>随机数的随机性</title>
      <link>https://dirtysalt.github.io/html/randomness-of-random-number.html</link>
      <pubDate>202001</pubDate>
      <description>云风有两篇关于随机性的文章，我觉得挺有意思的：</description>
     </item>
     <item>
      <title>云风的 BLOG: 随机数有多随机？</title>
      <link>https://dirtysalt.github.io/html/https://blog.codingnow.com/2007/11/random.html</link>
      <pubDate>202001</pubDate>
      <description></description>
     </item>
     <item>
      <title>错排问题(derangement)</title>
      <link>https://dirtysalt.github.io/html/derangement-problem.html</link>
      <pubDate>202001</pubDate>
      <description>问题来自于 云风的 BLOG: 会抽到自己的那张吗？，我这里写写自己的做法。评论里面说这是 错排问题，也叫做伯努利-欧拉装错信封问题。</description>
     </item>
     <item>
      <title>云风的 BLOG: 会抽到自己的那张吗？</title>
      <link>https://dirtysalt.github.io/html/https://blog.codingnow.com/2008/05/probability_e.html</link>
      <pubDate>202001</pubDate>
      <description></description>
     </item>
     <item>
      <title>序列化和设计权衡</title>
      <link>https://dirtysalt.github.io/html/serialization-and-design-tradeoff.html</link>
      <pubDate>202001</pubDate>
      <description>最近几天又重新翻翻 zeromq guide. 大概在2011年的时候看过一阵子，但是当时对网络编程不熟悉，也没有做过太多系统设计方面的工作， 所以总是想把zeromq硬套在我当时理解的RPC模型上。不是说zeromq不能做RPC或者是做的不好，zeromq可以很好地完成rpc工作，但是它还有许多其他设计模式和应用场景， 这点是我当时忽略的。最近几天又从几个不同途径看到zeromq(我也知道作者放弃zmq做nanomsg了， 我也知道作者现在去世了，还是安乐死去世的)， 所以觉得有必要在翻翻。</description>
     </item>
     <item>
      <title>ZeroMQ Guide</title>
      <link>https://dirtysalt.github.io/html/http://zguide.zeromq.org/page:all</link>
      <pubDate>202001</pubDate>
      <description></description>
     </item>
     <item>
      <title>Throttle的Python实现</title>
      <link>https://dirtysalt.github.io/html/throttle-in-python.html</link>
      <pubDate>201912</pubDate>
      <description>参考文章和实现有：</description>
     </item>
     <item>
      <title>10 连抽保底的概率模型</title>
      <link>https://dirtysalt.github.io/html/lottery-and-exp-dist.html</link>
      <pubDate>201912</pubDate>
      <description>这篇文章是看到云风 云风的 BLOG: 10 连抽保底的概率模型 所想到的。</description>
     </item>
     <item>
      <title>云风的 BLOG: 10 连抽保底的概率模型</title>
      <link>https://dirtysalt.github.io/html/https://blog.codingnow.com/2017/01/exponential_distribution.html</link>
      <pubDate>201912</pubDate>
      <description></description>
     </item>
     <item>
      <title>各个击破，取众家之精华</title>
      <link>https://dirtysalt.github.io/html/break-it-and-absorb-everything-to-learn.html</link>
      <pubDate>201912</pubDate>
      <description>https://weibo.com/6347862377/Iq7eTmCdj</description>
     </item>
     <item>
      <title>XOR双向链表</title>
      <link>https://dirtysalt.github.io/html/xor-doubly-linked-list.html</link>
      <pubDate>201911</pubDate>
      <description>这个东西的好处有：</description>
     </item>
     <item>
      <title>健康还是第一位的（记二宝的满月住院）</title>
      <link>https://dirtysalt.github.io/html/health-comes-first.html</link>
      <pubDate>201911</pubDate>
      <description>这几天陪二宝去做一个简单的新生儿手术。虽然这个手术比较简单，但是因为是新生儿，所以还是被安排进了外科新生儿重症监护室。这个监护室不让陪床，每周只有周一三五下午4点安排病情答疑。二宝还要在里面待个一周，确认伤口基本愈合之后，才能安排出院。</description>
     </item>
     <item>
      <title>内存分配之伙伴系统</title>
      <link>https://dirtysalt.github.io/html/memory-allocation-buddy-system.html</link>
      <pubDate>201911</pubDate>
      <description>最近看了云风写的 伙伴系统 有点启发，把一些值得学习的点记录下来。此外帖子里面还有 @wuwenbin 的 实现，比云风的 实现 更简单高效，也一起记录下来。</description>
     </item>
     <item>
      <title>宝宝出生了2</title>
      <link>https://dirtysalt.github.io/html/have-a-baby2.html</link>
      <pubDate>201911</pubDate>
      <description>@2019-12-11 两次突破预期的生产</description>
     </item>
     <item>
      <title>非规格浮点数带来的性能下降</title>
      <link>https://dirtysalt.github.io/html/performance-degradation-by-denormal-floating-point.html</link>
      <pubDate>201910</pubDate>
      <description>最近同事推荐我一篇文章 一个有趣的实验，用0.1f替换0，性能提升7倍，看完对 浮点数的表示形式 和 非规格浮点数 有了更加深入的理解。然后如果想看浮点数二进制表示的话，可以使用这个 在线工具.</description>
     </item>
     <item>
      <title>一个有趣的实验，用0.1f替换0，性能提升7倍</title>
      <link>https://dirtysalt.github.io/html/https://www.toutiao.com/a6763437360362291723</link>
      <pubDate>201910</pubDate>
      <description></description>
     </item>
     <item>
      <title>socket的端口范围和链接数量限制</title>
      <link>https://dirtysalt.github.io/html/socket-port-range-and-conn-limit.html</link>
      <pubDate>201909</pubDate>
      <description>系统对TCP链接的标识是通过4元组确定的(src ip, src port, dst ip, dst port), 一个4元组确定一条TCP链接。系统内部也是通过规则这个决定，端口是否可以被分配。</description>
     </item>
     <item>
      <title>乘法，除法，开方的简单实现</title>
      <link>https://dirtysalt.github.io/html/math-mul-div-sqrt-impl.html</link>
      <pubDate>201909</pubDate>
      <description>这些实现方法都是基于二进制来完成的，很容易用计算机的简单指令实现。</description>
     </item>
     <item>
      <title>Java语言设计好的一面</title>
      <link>https://dirtysalt.github.io/html/the-good-side-of-java-lang.html</link>
      <pubDate>201909</pubDate>
      <description>太阳公司的前技术主管，埃里克施密特，后来此人当了Google公司的CEO，对此的评价是：Java的天才之处，在于詹姆斯的借鉴和创新，都恰到好处。(说点题外话：网络上对Java的嘲笑，不绝于耳，很多人也质疑高斯林的成就，以前我就看过一篇文章，上面列举了Java的技术思想，早在Java出生十年前，甚至二十年前就出现了，所以，Java根本不是什么新生事物。但是我认为，所有的创新都是递增的，都是以原有的知识为基础，高斯林的过人之处在于，他将，原有的知识重新汇总，进行全新的组织，来满足网络时代对安全的要求，Java语言是一种为了实用而设计的计算机语言。)90%的程序员，都是技术水平一般的普通人，Java语言一开始，就是创造一种，“没有锋利边缘的编程语言，这样，人们就不会因为编程语言的问题，而伤害自己”。当时已经有了C语言以及C++语言，这两种语言足够强大，C 语言程序就像一群拿着刀的人，在刚刚打过蜡的地板上快速的跳舞。C++的作者也说过：C 很容易让你朝自己的脚开枪。在 C++ 中，这么做变的困难了，但是你要不注意，就会崩掉自己的整条腿。高斯林这么评价自己的Java: Java 就是去掉了枪炮，刀剑，还有黑帮的 C++。</description>
     </item>
     <item>
      <title>TK(tombkeeper)谈个人成长</title>
      <link>https://dirtysalt.github.io/html/tombkeeper-on-career.html</link>
      <pubDate>201909</pubDate>
      <description>一位老师问我当年自学时看的是什么书，想推荐给他的学生。十几年前国内安全方面的书不多，选择余地很小。而且我那时啥都不懂，对书也没什么鉴别能力，基本是看到就买，买来就学。所以我把在实验室内部给新同学们讲安全研究者个人成长的 PPT 发给了他，这对同学们来说可能比推荐几本书更有价值。</description>
     </item>
     <item>
      <title>你尽力了吗？</title>
      <link>https://dirtysalt.github.io/html/did-you-ever-try-your-best.html</link>
      <pubDate>201908</pubDate>
      <description>这篇文章贴出来到今天差不多二十年了，仍然大有意义。因为技术一直在变，人却从来没变过。永远只有少数人能精通一门手艺，因为永远只有少数人会尽力。</description>
     </item>
     <item>
      <title>prolog for fun</title>
      <link>https://dirtysalt.github.io/html/little-prolog-code.html</link>
      <pubDate>201908</pubDate>
      <description>研究生阶段接触过Prolog编程，写的程序都比较简单。当时它给我留下很深的印象，你只需要描述规则和行为特征，然后再提出问题，它就会帮助你求解。 当时我对这种东西不以为然，因为这种求解器肯定没有专门的求解器高效，只能当做玩具使用。现在看起来这种观点的确很幼稚。首先自己的实现不一定就有 Prolog本身实现高效，这点可以参考SQL语句和自己查询DBMS；此外许多实验性质的项目，实验人员需要的是快速实验和得到反馈，他们不在乎速度差个50%或者是200%； 但是考虑自己实现一个通用的快速的求解器的时候，那么你得到又是一个Prolog实现。</description>
     </item>
     <item>
      <title>软件的真实质量</title>
      <link>https://dirtysalt.github.io/html/true-quality-of-software.html</link>
      <pubDate>201907</pubDate>
      <description>https://www.joelonsoftware.com/2007/12/03/talk-at-yale-part-1-of-3/ 中文摘自阮一峰翻译的《软件随想录》</description>
     </item>
     <item>
      <title>How To Build Good Software</title>
      <link>https://dirtysalt.github.io/html/how-to-build-good-software.html</link>
      <pubDate>201907</pubDate>
      <description>https://www.csc.gov.sg/articles/how-to-build-good-software</description>
     </item>
     <item>
      <title>Li HongYi</title>
      <link>https://dirtysalt.github.io/html/https://www.linkedin.com/in/hongyi-li-16183230/</link>
      <pubDate>201907</pubDate>
      <description></description>
     </item>
     <item>
      <title>Career Path(职业规划的迷思)</title>
      <link>https://dirtysalt.github.io/html/career-path-myth.html</link>
      <pubDate>201907</pubDate>
      <description>https://zhuanlan.zhihu.com/p/21233881</description>
     </item>
     <item>
      <title>gunicorn spawn worker exception</title>
      <link>https://dirtysalt.github.io/html/gunicorn-spawn-worker-exception.html</link>
      <pubDate>201907</pubDate>
      <description></description>
     </item>
     <item>
      <title>As a software engineer, why did you receive a promotion?</title>
      <link>https://dirtysalt.github.io/html/as-a-software-engineer-why-did-you-receive-a-promotion.html</link>
      <pubDate>201907</pubDate>
      <description>https://www.quora.com/As-a-software-engineer-why-did-you-receive-a-promotion</description>
     </item>
     <item>
      <title>Lua Application Programming</title>
      <link>https://dirtysalt.github.io/html/lua-applicaiton-programming.html</link>
      <pubDate>201907</pubDate>
      <description>https://hisham.hm/papers/talks/hisham-lap-luaconf2017.pdf</description>
     </item>
     <item>
      <title>MCTS精简版代码</title>
      <link>https://dirtysalt.github.io/html/mcts-shortest-version.html</link>
      <pubDate>201907</pubDate>
      <description>https://int8.io/monte-carlo-tree-search-beginners-guide/</description>
     </item>
     <item>
      <title>A*算法寻求最短路</title>
      <link>https://dirtysalt.github.io/html/a-star-to-find-shortest-path.html</link>
      <pubDate>201907</pubDate>
      <description>Wikipedia code on github</description>
     </item>
     <item>
      <title>生成迷宫图</title>
      <link>https://dirtysalt.github.io/html/generate-maze.html</link>
      <pubDate>201907</pubDate>
      <description>http://code.activestate.com/recipes/578356-random-maze-generator/</description>
     </item>
     <item>
      <title>alpha-beta剪枝技术</title>
      <link>https://dirtysalt.github.io/html/alpha-beta-pruning.html</link>
      <pubDate>201907</pubDate>
      <description>https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning</description>
     </item>
     <item>
      <title>简单的treap</title>
      <link>https://dirtysalt.github.io/html/simple-treap.html</link>
      <pubDate>201907</pubDate>
      <description>code on github</description>
     </item>
     <item>
      <title>伸展树(splay tree)的可视化</title>
      <link>https://dirtysalt.github.io/html/splay-tree-visualization.html</link>
      <pubDate>201907</pubDate>
      <description>参考书籍 《[数据结构与算法分析_Java语言描述(第2版)].韦斯》code on github</description>
     </item>
     <item>
      <title>拓扑排序和强连通分量</title>
      <link>https://dirtysalt.github.io/html/topsort-and-scc.html</link>
      <pubDate>201907</pubDate>
      <description>我这里参考的书籍是 《[数据结构与算法分析_Java语言描述(第2版)].韦斯》，甚至代码里面的例子都是书里面的。</description>
     </item>
     <item>
      <title>图的各种边和割点计算</title>
      <link>https://dirtysalt.github.io/html/graph-edge-type-and-articulation-node.html</link>
      <pubDate>201907</pubDate>
      <description>如果对图进行DFS，按照访问节点的各个顺序，那么可以将边进行分类。其中无向图包括 1. 树边(tree-edge) 和 2. 反向边(backward-edge). 有向图相比无向图多了两类： 3. 正向边(forward-edge) 和 4. 交叉边(cross-edge). 关于这些边如何定义，可以参考任何一本算法和数据结构的书。</description>
     </item>
     <item>
      <title>Redis跳表(skip list)实现</title>
      <link>https://dirtysalt.github.io/html/redis-skip-list-impl.html</link>
      <pubDate>201907</pubDate>
      <description>Redis用跳表来实现什么数据结构：支持点查询和范围查询额有序集合。https://redisbook.readthedocs.io/en/latest/internal-datastruct/skiplist.html</description>
     </item>
     <item>
      <title>利用Ford-Fulkerson算法求解网络流问题</title>
      <link>https://dirtysalt.github.io/html/ford-fulkerson-network-flow-problem.html</link>
      <pubDate>201907</pubDate>
      <description>code on github 这个算法我是从 《[数据结构与算法分析_Java语言描述(第2版)].韦斯》这本书里面学习的。</description>
     </item>
     <item>
      <title>Ten Years of Erlang</title>
      <link>https://dirtysalt.github.io/html/ten-years-of-erlang.html</link>
      <pubDate>201906</pubDate>
      <description>https://ferd.ca/ten-years-of-erlang.html</description>
     </item>
     <item>
      <title>Things You Should Never Do, Part I</title>
      <link>https://dirtysalt.github.io/html/things-you-should-never-do-part1.html</link>
      <pubDate>201906</pubDate>
      <description>https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/</description>
     </item>
     <item>
      <title>iPhone + Charles(on Mac)的HTTP代理问题</title>
      <link>https://dirtysalt.github.io/html/iphone-charles-http-proxy-issue.html</link>
      <pubDate>201906</pubDate>
      <description>使用iphone + charles(on mac)发现一个奇怪的问题</description>
     </item>
     <item>
      <title>Why Lisp Failed</title>
      <link>https://dirtysalt.github.io/html/why-lisp-failed.html</link>
      <pubDate>201906</pubDate>
      <description>https://locklessinc.com/articles/why_lisp_failed/</description>
     </item>
     <item>
      <title>Google's Secret and Linear Algebra</title>
      <link>https://dirtysalt.github.io/html/google-secret-and-linear-algebra.html</link>
      <pubDate>201906</pubDate>
      <description>http://verso.mat.uam.es/~pablo.fernandez/ems63-pablo-fernandez_final.pdf</description>
     </item>
     <item>
      <title>The Law of Leaky Abstractions</title>
      <link>https://dirtysalt.github.io/html/the-law-of-leaky-abstractions.html</link>
      <pubDate>201906</pubDate>
      <description>https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/</description>
     </item>
     <item>
      <title>Statistics for Hackers</title>
      <link>https://dirtysalt.github.io/html/stats-for-hackers.html</link>
      <pubDate>201905</pubDate>
      <description>https://speakerdeck.com/jakevdp/statistics-for-hackers</description>
     </item>
     <item>
      <title>Church Counter(邱奇计数)</title>
      <link>https://dirtysalt.github.io/html/church-counter.html</link>
      <pubDate>201905</pubDate>
      <description>我们把zero带入add-1</description>
     </item>
     <item>
      <title>田春（冰河）日记节选</title>
      <link>https://dirtysalt.github.io/html/binghe-blogs-notes.html</link>
      <pubDate>201905</pubDate>
      <description>20061023</description>
     </item>
     <item>
      <title>Alleged RC4</title>
      <link>https://dirtysalt.github.io/html/alleged-rc4.html</link>
      <pubDate>201905</pubDate>
      <description>这个算法是在阅读 shc 项目里面发现的，我为这个项目fork了一个注释 版本。</description>
     </item>
     <item>
      <title>A page about call/cc</title>
      <link>https://dirtysalt.github.io/html/a-page-about-call-cc.html</link>
      <pubDate>201905</pubDate>
      <description>http://www.madore.org/~david/computers/callcc.html</description>
     </item>
     <item>
      <title>盖茨是这样培养的</title>
      <link>https://dirtysalt.github.io/html/showing-up-for-life.html</link>
      <pubDate>201905</pubDate>
      <description>https://book.douban.com/subject/4199479/</description>
     </item>
     <item>
      <title>Bayesian Methods for Hackers</title>
      <link>https://dirtysalt.github.io/html/bayesian-methods-for-hackers.html</link>
      <pubDate>201905</pubDate>
      <description>http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/</description>
     </item>
     <item>
      <title>Python线程安全的抱怨</title>
      <link>https://dirtysalt.github.io/html/python-thread-safe-complaint.html</link>
      <pubDate>201905</pubDate>
      <description>Python许多开源组件都没有清晰表明是否线程安全的，所以在使用的时候很容易出现奇怪的问题。所以用这些开源组件之前， 一定要了解这些组件是否是线程安全的，allocate新的对象开销是不是很大，是否有pool的实现。如果没有Pool实现并且不是线程安全的话， 那么就需要加一个锁（mutex或者是读写锁）。</description>
     </item>
     <item>
      <title>12个软件工程经典错误</title>
      <link>https://dirtysalt.github.io/html/12-classic-mistakes.html</link>
      <pubDate>201905</pubDate>
      <description>https://stevemcconnell.com/articles/classic-mistakes/</description>
     </item>
     <item>
      <title>JavaScript原型链测试代码</title>
      <link>https://dirtysalt.github.io/html/javascript-prototype-chain-tests.html</link>
      <pubDate>201905</pubDate>
      <description>"js中__proto__和prototype的区别和关系？"</description>
     </item>
     <item>
      <title>JavaScript语言精粹</title>
      <link>https://dirtysalt.github.io/html/javascript-the-good-parts.html</link>
      <pubDate>201904</pubDate>
      <description>JavaScript只有一个单一的数字类型(Number)。它在内部被表示为64位的浮点数，和Java的double一样。不像大多数其他的编程语言，它没有分离出整数类型，所以1和1.0是相同的值。这提供了很大的方便，因为它完全避免了短整数的溢出问题，并且你需要知道的关于数字的一切就是它是一种数字。这样就避免了一大类因数字类型导致的错误。</description>
     </item>
     <item>
      <title>Joe Duffy's Software Leadership Series</title>
      <link>https://dirtysalt.github.io/html/joe-duffy-software-leadership-series.html</link>
      <pubDate>201904</pubDate>
      <description>http://joeduffyblog.com/2013/02/17/software-leadership-series/</description>
     </item>
     <item>
      <title>凯恩斯大战哈耶克</title>
      <link>https://dirtysalt.github.io/html/keynes-vs-hayek.html</link>
      <pubDate>201904</pubDate>
      <description>下面是歌词，视频看起来凯恩斯的思想在一开始就被接受，而大家对哈耶斯的自由市场理论最开始并不感冒。</description>
     </item>
     <item>
      <title>Codehaus宣言</title>
      <link>https://dirtysalt.github.io/html/codehaus-manifesto.html</link>
      <pubDate>201903</pubDate>
      <description>https://github.com/oldratlee/translations/blob/master/codehaus-manifesto/README.md</description>
     </item>
     <item>
      <title>nginx正确的logrotate配置</title>
      <link>https://dirtysalt.github.io/html/logrotate-conf-for-nginx.html</link>
      <pubDate>201903</pubDate>
      <description>nginx默认的logrotate配置如下</description>
     </item>
     <item>
      <title>法国阿尔斯通高管皮耶鲁齐写的《美国陷阱》</title>
      <link>https://dirtysalt.github.io/html/the-american-trap-notes.html</link>
      <pubDate>201903</pubDate>
      <description>https://www.weibo.com/6120483044/Hw0V6g5WE?ref=collection</description>
     </item>
     <item>
      <title>比特币挖矿的泊松分布问题(指数分布)</title>
      <link>https://dirtysalt.github.io/html/poission-distribution-in-bitcoin-mining.html</link>
      <pubDate>201903</pubDate>
      <description>https://twitter.com/SatoshiLite/status/978913057999998976</description>
     </item>
     <item>
      <title>图片解压缩炸弹问题(image decompression bomb)</title>
      <link>https://dirtysalt.github.io/html/image-decompression-bomb.html</link>
      <pubDate>201902</pubDate>
      <description>https://huzheyang.cn/2018/02/python%E5%9B%BE%E5%BD%A2%E5%BA%93%E5%A4%84%E7%90%86%E5%A4%A7%E5%9E%8B%E5%9B%BE%E7%89%87%E7%9A%84%E6%9C%89%E5%85%B3%E9%97%AE%E9%A2%98/</description>
     </item>
     <item>
      <title>Polyplot Persistence</title>
      <link>https://dirtysalt.github.io/html/polyglot-persistence.html</link>
      <pubDate>201901</pubDate>
      <description>https://martinfowler.com/bliki/PolyglotPersistence.html</description>
     </item>
     <item>
      <title>我当时认为治霾这事很简单，结果走一走发现不对劲，然后恍然大悟 | 陶光远 一席第###位讲者</title>
      <link>https://dirtysalt.github.io/html/lessons-learned-from-fighting-against-haze.html</link>
      <pubDate>201812</pubDate>
      <description>https://v.qq.com/txp/iframe/player.html?vid=s0855xb6cd4</description>
     </item>
     <item>
      <title>StranglerApplication</title>
      <link>https://dirtysalt.github.io/html/strangler-application.html</link>
      <pubDate>201812</pubDate>
      <description>https://www.martinfowler.com/bliki/StranglerApplication.html</description>
     </item>
     <item>
      <title>Instagram Under the Hood</title>
      <link>https://dirtysalt.github.io/html/instagram-under-the-hood.html</link>
      <pubDate>201811</pubDate>
      <description>https://speakerdeck.com/carljm/instagram-under-the-hood</description>
     </item>
     <item>
      <title>在AWS EC2上启动Sentry</title>
      <link>https://dirtysalt.github.io/html/running-sentry-on-ec2.html</link>
      <pubDate>201811</pubDate>
      <description>利用AMI来创建服务是最方面的。AMI和Docker很像，Docker比AMI更加轻量，但是AMI比Docker要更加灵活。 Sentry是提供SAAS的，但是也有on-premise的open source版本。我看了一下自己搭建所需要的requirements还是比较多的，不如使用AMI在ec2起个服务试试看。</description>
     </item>
     <item>
      <title>春节逛圈故宫</title>
      <link>https://dirtysalt.github.io/html/tour-of-forbidden-city-on-festival-day.html</link>
      <pubDate>201811</pubDate>
      <description>@2019-02-13T08:14:27</description>
     </item>
     <item>
      <title>Instagram Engineering’s 3 rules to a scalable cloud application architecture</title>
      <link>https://dirtysalt.github.io/html/instagram-engineering-3-rules-to-a-scalable-cloud-application-architecture.html</link>
      <pubDate>201811</pubDate>
      <description>https://medium.com/@DataStax/instagram-engineerings-3-rules-to-a-scalable-cloud-application-architecture-c44afed31406</description>
     </item>
     <item>
      <title>形而上下的定义</title>
      <link>https://dirtysalt.github.io/html/definition-of-meta-physics.html</link>
      <pubDate>201811</pubDate>
      <description>形而上(metaphysics), 形而下(physics).</description>
     </item>
     <item>
      <title>nginx日志解析器优化</title>
      <link>https://dirtysalt.github.io/html/nginx-log-parser-opt.html</link>
      <pubDate>201810</pubDate>
      <description>过去很长一段时间，我们在用 ngxtop 这个模块里面的log parser对nginx日志进行分析。但是很快发现， 这个解析器的效率不行，正好组里面一位同学学习Go语言，所以用go语言重写了一版，效率提高了接近10倍。</description>
     </item>
     <item>
      <title>Why I Quit Google to Work for Myself</title>
      <link>https://dirtysalt.github.io/html/why-i-quit-google-to-work-for-myself.html</link>
      <pubDate>201810</pubDate>
      <description>Why I Quit Google to Work for Myself - mtlynch.io - https://mtlynch.io/why-i-quit-google/</description>
     </item>
     <item>
      <title>{Ask HN}What's the largest amount of bad code you have ever seen work?</title>
      <link>https://dirtysalt.github.io/html/whats-the-largest-amount-of-bad-code-you-have-ever-seen-work.html</link>
      <pubDate>201810</pubDate>
      <description>https://news.ycombinator.com/item?id=18442637</description>
     </item>
     <item>
      <title>Interview with Gmail Creator Paul Buchheit</title>
      <link>https://dirtysalt.github.io/html/interview-with-gmail-creator-and-y-combinator-partner-paul-buchheit.html</link>
      <pubDate>201810</pubDate>
      <description>https://triplebyte.com/blog/interview-with-gmail-creator-and-y-combinator-partner-paul-buchheit</description>
     </item>
     <item>
      <title>The economics of getting hired as a data scientist</title>
      <link>https://dirtysalt.github.io/html/the-economics-of-getting-hired-as-a-data-scientist.html</link>
      <pubDate>201810</pubDate>
      <description>https://towardsdatascience.com/the-economics-of-getting-hired-as-a-data-scientist-e3882933b43c</description>
     </item>
     <item>
      <title>Keras之父写给年轻程序员的33条忠告</title>
      <link>https://dirtysalt.github.io/html/keras-author-on-software-engineering.html</link>
      <pubDate>201810</pubDate>
      <description>英文：https://medium.com/s/story/notes-to-myself-on-software-engineering-c890f16f4e4d</description>
     </item>
     <item>
      <title>Writing system software: code comments</title>
      <link>https://dirtysalt.github.io/html/writing-system-software-code-comments.html</link>
      <pubDate>201810</pubDate>
      <description>Writing system software: code comments. - <antirez></description>
     </item>
     <item>
      <title>GitHub Flow</title>
      <link>https://dirtysalt.github.io/html/github-flow.html</link>
      <pubDate>201810</pubDate>
      <description>GitHub Flow – Scott Chacon - http://scottchacon.com/2011/08/31/github-flow.html</description>
     </item>
     <item>
      <title>Fallacies of Distributed Computing Explained</title>
      <link>https://dirtysalt.github.io/html/fallacies-of-distributed-computing-explained.html</link>
      <pubDate>201810</pubDate>
      <description>设计分布式计算/系统的几种误区</description>
     </item>
     <item>
      <title>What's a senior engineer's job?</title>
      <link>https://dirtysalt.github.io/html/whats-a-senior-engineers-job.html</link>
      <pubDate>201809</pubDate>
      <description>What's a senior engineer's job? - Julia Evans</description>
     </item>
     <item>
      <title>深度好文：混在县城</title>
      <link>https://dirtysalt.github.io/html/living-in-county.html</link>
      <pubDate>201809</pubDate>
      <description>https://mp.weixin.qq.com/s/qvtB1FHUnAdlPPWm3-LdXw</description>
     </item>
     <item>
      <title>Avoiding burnout: lessons learned from a 19th century philosopher</title>
      <link>https://dirtysalt.github.io/html/avoiding-burnout.html</link>
      <pubDate>201809</pubDate>
      <description>https://codewithoutrules.com/2018/09/27/avoiding-burnout/</description>
     </item>
     <item>
      <title>去大公司的各种考虑</title>
      <link>https://dirtysalt.github.io/html/pros-and-cons-in-tech-monopoly.html</link>
      <pubDate>201809</pubDate>
      <description>我在过去的10年里面，待过一家大公司（百度），一家成功创业的公司（友盟）和一家正在创业的公司（castbox）。现在我有点想回大公司，部分原因是觉得在小公司如果发展出现瓶颈业务增长乏力的时候，则没有办法持续地锻炼和提高自己的技术水平。</description>
     </item>
     <item>
      <title>Find LCA using RMQ</title>
      <link>https://dirtysalt.github.io/html/find-lca-using-rmq.html</link>
      <pubDate>201809</pubDate>
      <description>https://www.geeksforgeeks.org/find-lca-in-binary-tree-using-rmq/</description>
     </item>
     <item>
      <title>数独程序求解(Sudoku)</title>
      <link>https://dirtysalt.github.io/html/sudoku-solving.html</link>
      <pubDate>201809</pubDate>
      <description>code on github</description>
     </item>
     <item>
      <title>学会示弱 - 职场和做人的道理</title>
      <link>https://dirtysalt.github.io/html/know-how-to-show-weakness.html</link>
      <pubDate>201808</pubDate>
      <description>https://weibo.com/3764674343/GyHsWEP9m</description>
     </item>
     <item>
      <title>求解RMQ的线段树实现</title>
      <link>https://dirtysalt.github.io/html/segment-tree-for-rmq.html</link>
      <pubDate>201808</pubDate>
      <description>很早做题的时候就听到过线段树，但是因为课本上没有，所以觉得这个东西用的应该比较少，没有太关注。最近这段时间接触到很多题目，都用到了线段树，并且发现其实线段树可以用来有效地解决许多和区间相关的问题，比如查询区间最大最小值(RMQ)以及查询区间和。</description>
     </item>
     <item>
      <title>华容道程序求解</title>
      <link>https://dirtysalt.github.io/html/klotski-solving.html</link>
      <pubDate>201808</pubDate>
      <description>code on github</description>
     </item>
     <item>
      <title>配置TopCoder环境</title>
      <link>https://dirtysalt.github.io/html/configure-topcoder-env.html</link>
      <pubDate>201808</pubDate>
      <description>UPDATE@2017-10-06: 下面这些插件还不支持Python, 所以我开始使用另外一个插件 https://github.com/shivawu/topcoder-greed. 这个插件是一个整合包，配置起来更加方便。</description>
     </item>
     <item>
      <title>业余做研究的经验</title>
      <link>https://dirtysalt.github.io/html/experience-of-research-from-outsider.html</link>
      <pubDate>201808</pubDate>
      <description>天下什么样的观点都有，但有用的思路并不多。做研究是要分析，哪些思路能拧成 一股绳，哪些其实本质上相互矛盾，哪些需要妥协甚至放弃，哪些则是毫不动摇的 真理。把这些整理出来变成协调一致的理论，才能算是有了成果。要做到这个，是 需要有长久的积累功夫的。思路要系统化理论化，把每天想到的都放在一个大背景 和大框架下，时常拿出来反复思量推敲，慢慢地去粗存精，取本舍末，才能见别人 所未见。发别人所未发。</description>
     </item>
     <item>
      <title>如何学习理工科</title>
      <link>https://dirtysalt.github.io/html/how-to-study-stem-efficiently.html</link>
      <pubDate>201807</pubDate>
      <description>理工科也是一样，说穿了就是大自然千百年来玩的不变把戏，不理解的人认为其神 秘，只是因为肉眼凡胎，被各种纷繁的表面现象所迷惑，或是掌握的台前幕后的信 息不足，而没能看见隐藏在现象之后的关键原因。一旦明白和理解其机理之后，都 会有“原来如此，其实说穿了十分简单”的感悟，就像魔术师的把戏被揭穿了一样。</description>
     </item>
     <item>
      <title>Etsy Activity Feeds Architecture</title>
      <link>https://dirtysalt.github.io/html/etsy-activity-feeds-architecture.html</link>
      <pubDate>201807</pubDate>
      <description>https://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture</description>
     </item>
     <item>
      <title>Protobuf Encoding</title>
      <link>https://dirtysalt.github.io/html/protobuf-encoding.html</link>
      <pubDate>201807</pubDate>
      <description>https://developers.google.com/protocol-buffers/docs/encoding</description>
     </item>
     <item>
      <title>YouTube Scalability</title>
      <link>https://dirtysalt.github.io/html/youtube-scalability.html</link>
      <pubDate>201807</pubDate>
      <description>https://www.youtube.com/watch?v=w5WVu624fY8</description>
     </item>
     <item>
      <title>SIT / Boost your tech career</title>
      <link>https://dirtysalt.github.io/html/sit-boost-your-tech-career.html</link>
      <pubDate>201807</pubDate>
      <description>https://www.youtube.com/playlist?list=PLA8lYuzFlBqCnvkSNeM7AYIy9AkTVjEJs</description>
     </item>
     <item>
      <title>[职场感言] [周末码字时间]审简历得到的一点成长小心得</title>
      <link>https://dirtysalt.github.io/html/some-thoughts-during-review-resumes.html</link>
      <pubDate>201807</pubDate>
      <description>http://www.1point3acres.com/bbs/thread-435871-1-1.html</description>
     </item>
     <item>
      <title>如何进行算法设计面试</title>
      <link>https://dirtysalt.github.io/html/algorithm-design-steps-in-interview.html</link>
      <pubDate>201807</pubDate>
      <description>https://www.hiredintech.com/courses/algorithm-design</description>
     </item>
     <item>
      <title>如何进行系统设计面试</title>
      <link>https://dirtysalt.github.io/html/system-design-steps-in-interview.html</link>
      <pubDate>201806</pubDate>
      <description>https://www.hiredintech.com/courses/system-design</description>
     </item>
     <item>
      <title>语言检测和编码检测</title>
      <link>https://dirtysalt.github.io/html/lang-detect-and-encoding-detect.html</link>
      <pubDate>201806</pubDate>
      <description>今天想到一个问题，网络抓取的时候经常会抓到很多乱码数据。通常来说这些乱码数据能只是因为错误的编码方式才呈现乱码，如果使用另外的编码方式或许就会得到有意义的文本。是否可以自动地进行编码检测呢？</description>
     </item>
     <item>
      <title>Amazon DynamoDB</title>
      <link>https://dirtysalt.github.io/html/amazon-dynamodb.html</link>
      <pubDate>201806</pubDate>
      <description>https://www.allthingsdistributed.com/2012/01/amazon-dynamodb.html</description>
     </item>
     <item>
      <title>5 Lessons We’ve Learned Using AWS</title>
      <link>https://dirtysalt.github.io/html/5-lessons-we-have-learned-using-aws.html</link>
      <pubDate>201806</pubDate>
      <description>https://medium.com/netflix-techblog/5-lessons-weve-learned-using-aws-1f2a28588e4c</description>
     </item>
     <item>
      <title>How to write a good software design doc</title>
      <link>https://dirtysalt.github.io/html/how-to-write-a-good-software-design-doc.html</link>
      <pubDate>201805</pubDate>
      <description>https://medium.freecodecamp.org/how-to-write-a-good-software-design-document-66fcf019569c</description>
     </item>
     <item>
      <title>oh, I’ve seen this idea before</title>
      <link>https://dirtysalt.github.io/html/oh-i-have-seen-this-idea-before.html</link>
      <pubDate>201805</pubDate>
      <description>https://threadreaderapp.com/thread/1017843958330818561.html</description>
     </item>
     <item>
      <title>aws region code</title>
      <link>https://dirtysalt.github.io/html/aws-region-code-explain.html</link>
      <pubDate>201805</pubDate>
      <description>https://docs.amazonaws.cn/AmazonS3/latest/dev/aws-usage-report-understand.html</description>
     </item>
     <item>
      <title>香港的未来-江南愤青</title>
      <link>https://dirtysalt.github.io/html/the-future-of-hongkong.html</link>
      <pubDate>201805</pubDate>
      <description>一个微信朋友发给我的。结合我的写在李嘉诚退休的文章。挺有意思。</description>
     </item>
     <item>
      <title>Binary Indexed Tree(Fenwick Tree)</title>
      <link>https://dirtysalt.github.io/html/binary-indexed-tree.html</link>
      <pubDate>201805</pubDate>
      <description>https://www.geeksforgeeks.org/binary-indexed-tree-or-fenwick-tree-2/</description>
     </item>
     <item>
      <title>面试心理技巧(Psychological Tricks)</title>
      <link>https://dirtysalt.github.io/html/interview-psychological-tricks.html</link>
      <pubDate>201805</pubDate>
      <description>https://github.com/yangshun/tech-interview-handbook/blob/master/non-technical/psychological-tricks.md</description>
     </item>
     <item>
      <title>为运行而生的代码</title>
      <link>https://dirtysalt.github.io/html/write-the-code-for-run.html</link>
      <pubDate>201805</pubDate>
      <description>代码天生就是为了运行而存在的。</description>
     </item>
     <item>
      <title>An Impact Guide for Engineers</title>
      <link>https://dirtysalt.github.io/html/an-impact-guide-for-engineers.html</link>
      <pubDate>201805</pubDate>
      <description>https://medium.com/@erand/we-are-all-product-owners-an-impact-guide-for-engineers-76a2b4342c74</description>
     </item>
     <item>
      <title>在Linux上配置CUDA环境</title>
      <link>https://dirtysalt.github.io/html/config-cuda-env-on-linux.html</link>
      <pubDate>201805</pubDate>
      <description>https://www.tensorflow.org/install/install_linux</description>
     </item>
     <item>
      <title>scipy几种稀疏矩阵表示</title>
      <link>https://dirtysalt.github.io/html/types-of-scipy-sparse-matrix.html</link>
      <pubDate>201804</pubDate>
      <description>scipy.sparse里面有几种稀疏矩阵的表示：</description>
     </item>
     <item>
      <title>西藏(林芝-波密-拉萨)游记</title>
      <link>https://dirtysalt.github.io/html/tibet-travel.html</link>
      <pubDate>201804</pubDate>
      <description>大致形成安排：</description>
     </item>
     <item>
      <title>精英日课解读《利益悠关》</title>
      <link>https://dirtysalt.github.io/html/skin-in-the-game-dedao.html</link>
      <pubDate>201803</pubDate>
      <description>那现代社会的利益攸关应该怎么把握呢？</description>
     </item>
     <item>
      <title>寻常问题的精英解法-如何学习</title>
      <link>https://dirtysalt.github.io/html/mastering-study.html</link>
      <pubDate>201803</pubDate>
      <description>“学习”是一个我们常常提到的词，有人认为它很简单，有人觉得它很难，有人认为它等同于读书，有人感觉它无处不在；有人在大学毕业就停止了，有人决心要坚持一辈子。</description>
     </item>
     <item>
      <title>计算机领域大人物：艾伦·图灵牛在哪？</title>
      <link>https://dirtysalt.github.io/html/why-turing-is-master.html</link>
      <pubDate>201803</pubDate>
      <description>为什么我将最重要的图灵放在最后呢？因为他的工作大家了解得比较多，不需要过多地说明，只需要做一些深度的分析。这样也可以留出篇幅来对这五个人做总结。</description>
     </item>
     <item>
      <title>为什么学习历史</title>
      <link>https://dirtysalt.github.io/html/why-study-history.html</link>
      <pubDate>201803</pubDate>
      <description>首先，学习历史是为了清楚我们自己所处的位置，并且看清楚未来的方向，以便在一个大规模的时间和空间内看待问题。也就是说，学习历史首先是学习看问题的方法论。</description>
     </item>
     <item>
      <title>ssh proxycommand on ssr</title>
      <link>https://dirtysalt.github.io/html/ssh-proxycommand-on-ssr.html</link>
      <pubDate>201803</pubDate>
      <description>如果你想ssh到某个国外机器上的话，因为一些众所周知的原因，链接会非常不稳定或者是被切断。ssh有个"proxycommand"选项，允许配置代理来完成连接。</description>
     </item>
     <item>
      <title>搭建ELK + Beat(用于日志收集和指标收集)</title>
      <link>https://dirtysalt.github.io/html/getting-started-elk-beat.html</link>
      <pubDate>201802</pubDate>
      <description>之前接触到ELK这套架构，觉得可以找个时间在本地run看看效果。Beat是ELK的外围组件，可以让ELK这套以存储数据+检索数据+分析数据的架构找到更多可以落地的场景。Beat的作用就是尽可能地收集人们感兴趣的数据，然后将这些数据灌入ELK，通过libbeat这个库来和ELK交互。</description>
     </item>
     <item>
      <title>nginx的https重定向循环问题</title>
      <link>https://dirtysalt.github.io/html/nginx-https-redirect-loop.html</link>
      <pubDate>201802</pubDate>
      <description>TL;DR https重定向循环问题有可能是因为aws elb配置不当造成的。</description>
     </item>
     <item>
      <title>What habits make a programmer great?</title>
      <link>https://dirtysalt.github.io/html/what-habits-make-a-programmer-great.html</link>
      <pubDate>201802</pubDate>
      <description>https://news.ycombinator.com/item?id=14709076</description>
     </item>
     <item>
      <title>How to build your own AlphaZero AI using Python and Keras</title>
      <link>https://dirtysalt.github.io/html/how-to-build-your-own-alpha-zero-ai.html</link>
      <pubDate>201801</pubDate>
      <description>原文链接 https://medium.com/applied-data-science/how-to-build-your-own-alphazero-ai-using-python-and-keras-7f664945c188. 文章里面还给出了另外两个链接：</description>
     </item>
     <item>
      <title>On Being A Senior Engineer</title>
      <link>https://dirtysalt.github.io/html/on-being-a-senior-engineer.html</link>
      <pubDate>201801</pubDate>
      <description>https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/</description>
     </item>
     <item>
      <title>How The Economic Machine Works By Ray Dalio</title>
      <link>https://dirtysalt.github.io/html/how-the-economic-machine-works-by-ray-dalio.html</link>
      <pubDate>201801</pubDate>
      <description>这两天看Ray Dalio的《原则》这本书，里面说到他制作了一个30分钟 视频 (中文) 帮助初学者来理解经济学。知乎 上面也有关于这个视频和相关文章的讨论。</description>
     </item>
     <item>
      <title>你在哪一刻体验到了真正的贫富差距？</title>
      <link>https://dirtysalt.github.io/html/difference-between-poor-rich-on-zhihu.html</link>
      <pubDate>201801</pubDate>
      <description>https://www.zhihu.com/question/56322619/answer/287877210</description>
     </item>
     <item>
      <title>Python 的低性能问题是无法忽视的</title>
      <link>https://dirtysalt.github.io/html/python-weak-perf-matters.html</link>
      <pubDate>201801</pubDate>
      <description>我看的是公众号上的 译文, 原文在 这里. 我觉得作者有个观点很正确，就是如果某个编程语言的流行度不断提高，那么它的低性能则是个不容忽视的问题，所有的使用者都在使用缓慢的版本，大量的资源被浪费。尤其可怕的是，如果社区把这种浪费当做是理所当然，或者是争辩说"相比机器开发效率更加重要"，那么就是在刻意回避这个问题。</description>
     </item>
     <item>
      <title>管理其实是个工程学</title>
      <link>https://dirtysalt.github.io/html/management-actually-is-engineering.html</link>
      <pubDate>201801</pubDate>
      <description>我通读了达里奥的这本书，发现一个非常有意思的情况：书中很少谈论员工奖金的事儿，几乎没说过如何激励员工、完全没提到什么调动员工积极性之类的内容。一本面面俱到讲管理的书，为什么不谈员工激励呢？</description>
     </item>
     <item>
      <title>WebSocket和Socket.IO</title>
      <link>https://dirtysalt.github.io/html/websocket-and-socketio.html</link>
      <pubDate>201801</pubDate>
      <description>下面是一些有用的链接：</description>
     </item>
     <item>
      <title>量子计算机初探</title>
      <link>https://dirtysalt.github.io/html/intro-quantum-computing.html</link>
      <pubDate>201801</pubDate>
      <description>一直对量子计算机比较好奇，这个东西究竟是什么运作的。我觉得这个视频系列挺不错的：量子计算机初探 , 对了解量子计算机很有帮助。</description>
     </item>
     <item>
      <title>微信跳一跳的自动化</title>
      <link>https://dirtysalt.github.io/html/wechat-auto-jump.html</link>
      <pubDate>201712</pubDate>
      <description>https://zhuanlan.zhihu.com/p/32636329 大概一两个月前看到这篇文章的吧，当时对这个东西没有怎么在意。前些时间突然想起来这篇文章，也很好奇如何通过代码控制iOS设备，所以就回头看了看这篇文章。</description>
     </item>
     <item>
      <title>Python Requests库编码问题</title>
      <link>https://dirtysalt.github.io/html/python-requests-encoding-issue.html</link>
      <pubDate>201712</pubDate>
      <description>多语言爬虫很重要的一个问题就是编码，如何根据请求以及网页内容判断出正确的编码，还是一个比较麻烦的事情。</description>
     </item>
     <item>
      <title>Minimal WSGI App in Pyton</title>
      <link>https://dirtysalt.github.io/html/minimal-wsgi-app-in-python.html</link>
      <pubDate>201712</pubDate>
      <description>UPDATE@201801: 很早的两篇文章，从 Python 文档里面摘取出来放到一起，这样可以有个整体认识。另外现在使用native wsgi API来编写wsgi app似乎也不太多了，大多数情况都是使用比较成熟的wsgi framework来写，比如flask, django. 文章里面使用uwsgi来启动wsgi app, 也可以考虑 gunicorn</description>
     </item>
     <item>
      <title>Reading Excel in Python</title>
      <link>https://dirtysalt.github.io/html/reading-excel-in-python.html</link>
      <pubDate>201712</pubDate>
      <description>UPDATE@201801: 好早的文章，从 Python 这个文档里面移出来。</description>
     </item>
     <item>
      <title>Find 10 digits prime in consecutive digits of e</title>
      <link>https://dirtysalt.github.io/html/find-10-digits-prime-in-consecutive-digits-of-e.html</link>
      <pubDate>201712</pubDate>
      <description>这是很早的Google面试题目，我是从吴军的《浪潮之巅》里面关于Google公司的章节里面看到的。当时Google将这个题目挂在广告牌上用来招募人才，非常具有创意。我相信这道题目肯定有更加巧妙的数学解法。</description>
     </item>
     <item>
      <title>26 Lessons From Being a Developer at a Startup</title>
      <link>https://dirtysalt.github.io/html/26-lessons-from-being-a-developer-at-a-startup.html</link>
      <pubDate>201712</pubDate>
      <description>https://blog.stephanbehnke.com/26-lessons-from-being-a-developer-at-a-startup/</description>
     </item>
     <item>
      <title>Scaling the GitLab Database</title>
      <link>https://dirtysalt.github.io/html/scaling-the-gitlab-database.html</link>
      <pubDate>201712</pubDate>
      <description>https://about.gitlab.com/2017/10/02/scaling-the-gitlab-database/?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website</description>
     </item>
     <item>
      <title>Geoffrey Hinton Interview in Coursera</title>
      <link>https://dirtysalt.github.io/html/geoffrey-hinton-interview-in-coursera.html</link>
      <pubDate>201712</pubDate>
      <description>https://www.coursera.org/learn/neural-networks-deep-learning/lecture/dcm5r/geoffrey-hinton-interview</description>
     </item>
     <item>
      <title>市井雄心 Cities and Ambition</title>
      <link>https://dirtysalt.github.io/html/cities-and-ambition.html</link>
      <pubDate>201712</pubDate>
      <description>http://www.paulgraham.com/cities.html</description>
     </item>
     <item>
      <title>How to Read Mathematics</title>
      <link>https://dirtysalt.github.io/html/math-read.html</link>
      <pubDate>201712</pubDate>
      <description>http://www.people.vcu.edu/~dcranston/490/handouts/math-read.html</description>
     </item>
     <item>
      <title>查找TCP端口被哪个进程占用</title>
      <link>https://dirtysalt.github.io/html/find-which-process-use-tcp-port.html</link>
      <pubDate>201712</pubDate>
      <description>没有办法在0.0.0.0:15004这个地址上面启动</description>
     </item>
     <item>
      <title>shadowsocksr + kcptun</title>
      <link>https://dirtysalt.github.io/html/shaodowsocks-under-kcptun.html</link>
      <pubDate>201712</pubDate>
      <description>shadowsocksr/ssr https://github.com/shadowsocksrr/shadowsocksr 是在ss基础上增加了流量混淆 ssr的客户端(ssr-local)我们都有叫做ShadowsocksX-NG-R8</description>
     </item>
     <item>
      <title>搭建一个可用的DNS</title>
      <link>https://dirtysalt.github.io/html/make-a-workable-dns.html</link>
      <pubDate>201712</pubDate>
      <description>我发现即便是用ShadowsocksNX全局打开的话，在console下面也不能正常访问一些网站。我想到了有可能这是DNS被污染的原因。</description>
     </item>
     <item>
      <title>The Language of the System</title>
      <link>https://dirtysalt.github.io/html/the-language-of-the-system.html</link>
      <pubDate>201712</pubDate>
      <description>这个talk找不到slides, 在 github 上有个transcripts. youtube 链接地址在 这里.</description>
     </item>
     <item>
      <title>Love Your Bugs</title>
      <link>https://dirtysalt.github.io/html/love-your-bugs.html</link>
      <pubDate>201712</pubDate>
      <description>http://akaptur.com/blog/2017/11/12/love-your-bugs/</description>
     </item>
     <item>
      <title>Code in Space</title>
      <link>https://dirtysalt.github.io/html/code-in-space.html</link>
      <pubDate>201712</pubDate>
      <description>挺有意思的一个talk https://www.youtube.com/watch?v=ETgNLF_XpEM&list=WL&index=10</description>
     </item>
     <item>
      <title>Timeline at Scale in Twitter</title>
      <link>https://dirtysalt.github.io/html/timeline-at-scale-in-twitter.html</link>
      <pubDate>201711</pubDate>
      <description>https://www.infoq.com/presentations/Real-Time-Delivery-Twitter @ 2013</description>
     </item>
     <item>
      <title>Simple Made Easy</title>
      <link>https://dirtysalt.github.io/html/simple-made-easy.html</link>
      <pubDate>201711</pubDate>
      <description>https://www.infoq.com/presentations/Simple-Made-Easy</description>
     </item>
     <item>
      <title>Probability Paradox by Norvig</title>
      <link>https://dirtysalt.github.io/html/probability-paradox-by-peter-norvig.html</link>
      <pubDate>201711</pubDate>
      <description>https://github.com/norvig/pytudes/blob/master/ipynb/ProbabilityParadox.ipynb</description>
     </item>
     <item>
      <title>等额本金和等额本息的计算</title>
      <link>https://dirtysalt.github.io/html/ways-of-paying-mortgage.html</link>
      <pubDate>201711</pubDate>
      <description>等额本金是：每次偿还的本金是相同的，但是由于利息逐渐递减，所以每次偿还的全部金额是依次递减的。</description>
     </item>
     <item>
      <title>Nobody ever got fired for buying a cluster</title>
      <link>https://dirtysalt.github.io/html/nobody-ever-got-fired-for-buying-a-cluster.html</link>
      <pubDate>201711</pubDate>
      <description>https://www.microsoft.com/en-us/research/publication/nobody-ever-got-fired-for-buying-a-cluster/ @ 2013</description>
     </item>
     <item>
      <title>流媒体基础知识(sonos)</title>
      <link>https://dirtysalt.github.io/html/sonos-streaming-basics.html</link>
      <pubDate>201710</pubDate>
      <description>http://musicpartners.sonos.com/node/465</description>
     </item>
     <item>
      <title>Ten Rules for Negotiating a Job Offer</title>
      <link>https://dirtysalt.github.io/html/ten-rules-for-negotiating-a-job-offer.html</link>
      <pubDate>201710</pubDate>
      <description>part1: https://medium.freecodecamp.org/ten-rules-for-negotiating-a-job-offer-ee17cccbdab6</description>
     </item>
     <item>
      <title>解放生产力的工具</title>
      <link>https://dirtysalt.github.io/html/tool-is-to-free-people.html</link>
      <pubDate>201710</pubDate>
      <description>这几天折腾了不少工具，有翻墙工具(ss, ssr, kcptun)，有编辑器(emacs, evernote, vscode, pycharm)，也有一些workflow(dash, be focused), 还有存储工具（dropbox, icloud, git etc），还有一些电子工具（比如我之前的mab book air以及ipad2，很长时间都没有使用了）。</description>
     </item>
     <item>
      <title>Software 2.0</title>
      <link>https://dirtysalt.github.io/html/software-2.html</link>
      <pubDate>201710</pubDate>
      <description>https://medium.com/@karpathy/software-2-0-a64152b37c35</description>
     </item>
     <item>
      <title>Getting Real About Distributed System Reliability</title>
      <link>https://dirtysalt.github.io/html/getting-real-about-distributed-system-reliability.html</link>
      <pubDate>201709</pubDate>
      <description>http://blog.empathybox.com/post/19574936361/getting-real-about-distributed-system-reliability</description>
     </item>
     <item>
      <title>PyPy实现方式</title>
      <link>https://dirtysalt.github.io/html/pypy-impl.html</link>
      <pubDate>201709</pubDate>
      <description>关于PyPy的实现晚上看了一个帖子，觉得PyPy这个东西挺有意思的。</description>
     </item>
     <item>
      <title>现实生活中的负反馈</title>
      <link>https://dirtysalt.github.io/html/negative-feedback-and-trap-in-real-life.html</link>
      <pubDate>201709</pubDate>
      <description>一个穷人，为了生存每天想办法去如何节省钱，以致于没有时间去考虑如何去赚取更多的钱来改善当前的生活状态；</description>
     </item>
     <item>
      <title>一些MongoDB的实践建议</title>
      <link>https://dirtysalt.github.io/html/few-tips-of-mongodb-best-practice.html</link>
      <pubDate>201709</pubDate>
      <description>https://www.mongodb.com/basics/best-practices</description>
     </item>
     <item>
      <title>升级到MongoDB 3.4出现的性能问题</title>
      <link>https://dirtysalt.github.io/html/mongodb34-perf-issue-checkpoint.html</link>
      <pubDate>201708</pubDate>
      <description>TL;DR 因为checkpoint出现了瞬时的大量磁盘写入导致响应时间出现了尖峰。可以修改wiredtiger的checkpoint写入策略，加快checkpoint写入频率可以让整个磁盘写入比较平顺，从而削平延迟尖峰。</description>
     </item>
     <item>
      <title>在Mac下面制作USB启动盘</title>
      <link>https://dirtysalt.github.io/html/make-startup-usb-stick-under-mac.html</link>
      <pubDate>201708</pubDate>
      <description>自己的Ubuntu系统一直不太稳定，但是忍着用了下来。但是前几天因为想切换到Python3.6, 看到自己Ubuntu里面带了一个Python3.4觉得特别碍眼，所以就 `apt-get remove python3` 删除掉这个组件。我记得当时apt提示了一大串依赖于这个python3的组件，不过我没有上心直接就回车，直到删除的过程中出现了一些问题比如桌面好像发生一些奇怪的变化才反应过来，但是那个时候python3已经卸载了。重启之后登录发现自己的ubuntu desktop已经没有了边框和通知栏了。在网上找了很多帖子但是好像有不太管用，心想干脆重装系统得了。因为我大部分数据和安装软件都是放在单独的partition下面的，所以重装的话没有任何问题。（这次得到的教训是，不要随便删除软件，而且删除之前一定要看看影响的范围）</description>
     </item>
     <item>
      <title>补丁式的软件开发方法</title>
      <link>https://dirtysalt.github.io/html/patch-oriented-software-development.html</link>
      <pubDate>201708</pubDate>
      <description>这几天我在重构一段代码，大致是将database里面某个字段分离出去，存储到另外一个cache table里面，并且在写回到database的时候进行判断，如果内容和之前完全一样的话就不再写入，减少database的写入压力。</description>
     </item>
     <item>
      <title>How to build your personal brand as a new developer</title>
      <link>https://dirtysalt.github.io/html/how-to-build-your-personal-brand-as-a-new-developer.html</link>
      <pubDate>201708</pubDate>
      <description>https://medium.freecodecamp.org/building-your-personal-brand-as-a-new-web-developer-f6d4150fd217</description>
     </item>
     <item>
      <title>Narrow Python Build</title>
      <link>https://dirtysalt.github.io/html/narrow-python-build.html</link>
      <pubDate>201708</pubDate>
      <description>最近线上遇到了一个问题，是在访问 https://feed.awesound.com/pysva 这个URL时候出现的。重现过程非常简单</description>
     </item>
     <item>
      <title>语言文字反应你的潜意识</title>
      <link>https://dirtysalt.github.io/html/lang-reflects-your-subconscious.html</link>
      <pubDate>201707</pubDate>
      <description>今天听吴军的硅谷来信《卡尼曼的经济学课-上》，里面提到了人类许多非理性思维带来的问题。中间说到了一个例子，是关于如何写报告的。</description>
     </item>
     <item>
      <title>朋友，益友，狐朋狗友</title>
      <link>https://dirtysalt.github.io/html/barely-friend-and-close-friend.html</link>
      <pubDate>201707</pubDate>
      <description>选择朋友的第一个前提就是拒绝酒肉朋友，这点是显而易见的。可是除去酒肉朋友之外，还有一些朋友就比较难以归类了：平时工作的时候你和他关系不错，可是私下的时候却交往不多却保持的不错。如果你觉得你们私下关系还行，尝试透露一些秘密给他们的话，他们的嘴巴却不那么严实。如果你完全相信他的话，最后结果只有失望。</description>
     </item>
     <item>
      <title>痛苦，思考，改变</title>
      <link>https://dirtysalt.github.io/html/pain-think-and-change.html</link>
      <pubDate>201707</pubDate>
      <description>写在30岁生日的前一天</description>
     </item>
     <item>
      <title>珍惜空余时间</title>
      <link>https://dirtysalt.github.io/html/good-to-have-slack-time.html</link>
      <pubDate>201707</pubDate>
      <description>从上周到现在基本没有什么空余时间，而这个东西其实还是蛮重要的，空余时间决定了自己的思维能扩展到什么地方，能够决定自己今后5-10年的发展如何。没有空余时间的话，每天只能是忙于许多繁琐的任务上，没有办法空出时间让自己去接触其他的事情，让自己去思考和感受。</description>
     </item>
     <item>
      <title>搭建一个小网站基本费用估算</title>
      <link>https://dirtysalt.github.io/html/basic-cost-of-building-a-small-website.html</link>
      <pubDate>201707</pubDate>
      <description>服务器方面可以有两种访问方式: IP访问和域名访问. IP访问只需要购买服务器；域名访问不仅仅需要购买服务器，还需要通过域名商(比如GoDaddy)购买域名然后将域名和IP绑定。除去一些比较热的域名外，普通域名每年的费用大约在100-1000人民币不等。</description>
     </item>
     <item>
      <title>The Feynman Technique: The Best Way to Learn Anything</title>
      <link>https://dirtysalt.github.io/html/the-feynman-technique-the-best-way-to-learn-anything.html</link>
      <pubDate>201707</pubDate>
      <description>https://www.farnamstreetblog.com/2012/04/learn-anything-faster-with-the-feynman-technique/</description>
     </item>
     <item>
      <title>Scaling to Billions on Top of DigitalOcean</title>
      <link>https://dirtysalt.github.io/html/scaling-to-billions-on-top-of-digital-ocean.html</link>
      <pubDate>201707</pubDate>
      <description>https://www.digitalocean.com/customers/io/</description>
     </item>
     <item>
      <title>Search at Slack</title>
      <link>https://dirtysalt.github.io/html/search-at-slack.html</link>
      <pubDate>201707</pubDate>
      <description>https://slack.engineering/search-at-slack-431f8c80619e</description>
     </item>
     <item>
      <title>Why Did So Many Startups Choose NoSQL?</title>
      <link>https://dirtysalt.github.io/html/why-did-so-many-startups-choose-nosql.html</link>
      <pubDate>201707</pubDate>
      <description>https://www.nemil.com/mongo/1.html</description>
     </item>
     <item>
      <title>MacOS X Rootless Mode</title>
      <link>https://dirtysalt.github.io/html/macosx-rootless-mode.html</link>
      <pubDate>201706</pubDate>
      <description>https://www.zhihu.com/question/36108835</description>
     </item>
     <item>
      <title>能做什么和该做什么</title>
      <link>https://dirtysalt.github.io/html/what-you-can-do-and-what-you-should-do.html</link>
      <pubDate>201706</pubDate>
      <description>最近一段搞的有点头昏脑胀，感觉有点不太对。做了很多事情，不能说这些事情不重要，属于可做和可不做的范畴。做了肯定会有点帮助，但是感觉效果有限。</description>
     </item>
     <item>
      <title>Reducing Image File Size at Etsy</title>
      <link>https://dirtysalt.github.io/html/reducing-image-file-size-at-esty.html</link>
      <pubDate>201706</pubDate>
      <description>https://codeascraft.com/2017/05/30/reducing-image-file-size-at-etsy/</description>
     </item>
     <item>
      <title>Making Photos Smaller Without Quality Loss</title>
      <link>https://dirtysalt.github.io/html/making-photos-smaller.html</link>
      <pubDate>201706</pubDate>
      <description>https://engineeringblog.yelp.com/2017/06/making-photos-smaller.html</description>
     </item>
     <item>
      <title>HTTP流媒体的代理实现</title>
      <link>https://dirtysalt.github.io/html/proxy-on-http-streaming.html</link>
      <pubDate>201705</pubDate>
      <description>一直很好奇是如何用HTTP协议实现流媒体传输的，尤其是当需要拖动到某个时间点的时候，后台是如何响应的。正好最近需要实现一个流媒体的代理，所以就整理一下这方面的东西。</description>
     </item>
     <item>
      <title>SSH Permission Denied(Public Key)</title>
      <link>https://dirtysalt.github.io/html/ssh-permission-denied.html</link>
      <pubDate>201705</pubDate>
      <description>昨天在ec2上遇到了一个问题，我在进行正常操作的时候连接就断开了，紧接着尝试再次登录的时候出现了经典的permission denied(public key).</description>
     </item>
     <item>
      <title>The Evolution of Code Deploys at Reddit</title>
      <link>https://dirtysalt.github.io/html/the-evolution-of-code-deploys-at-reddit.html</link>
      <pubDate>201705</pubDate>
      <description>https://redditblog.com/2017/06/02/the-evolution-of-code-deploys-at-reddit/</description>
     </item>
     <item>
      <title>Python程序性能分析</title>
      <link>https://dirtysalt.github.io/html/on-python-profiling.html</link>
      <pubDate>201705</pubDate>
      <description>profiler 分为两类：a. Deterministic（确定性） b. Sampling（采样性）.</description>
     </item>
     <item>
      <title>44 engineering management lessons</title>
      <link>https://dirtysalt.github.io/html/44-eng-mag-lessons.html</link>
      <pubDate>201705</pubDate>
      <description>http://www.defmacro.org/2014/10/03/engman.html</description>
     </item>
     <item>
      <title>用Emacs Org-Mode来建站</title>
      <link>https://dirtysalt.github.io/html/use-emacs-org-mode-to-build-site.html</link>
      <pubDate>201705</pubDate>
      <description>很多朋友问到我这个站点是怎么搭建出来的。不过我的感觉是，他们可能更多地是对我积累了这么多文章感到好奇，而不仅仅是这个站点的搭建感兴趣。 因为其实只要有个简单的Wordpress或者是Github Pages也能做到这样，唯一的差别还是是否愿意长期往这个站点里面添加文章和内容。 说来惭愧，我的这个站点里面大部分的内容都不是原创的，东抄一点西抄一点，抄别人的文章，翻译别人的文章和论文等等。</description>
     </item>
     <item>
      <title>What to do when Your Colleague Creates Spaghetti Code</title>
      <link>https://dirtysalt.github.io/html/colleague-creates-spaghetti-code.html</link>
      <pubDate>201704</pubDate>
      <description>https://blog.ndepend.com/colleague-creates-spaghetti-code/</description>
     </item>
     <item>
      <title>How Yelp Runs Millions of Tests Every Day</title>
      <link>https://dirtysalt.github.io/html/how-yelp-runs-millions-of-tests-every-day.html</link>
      <pubDate>201704</pubDate>
      <description>https://engineeringblog.yelp.com/2017/04/how-yelp-runs-millions-of-tests-every-day.html</description>
     </item>
     <item>
      <title>SSH Tunneling in Python</title>
      <link>https://dirtysalt.github.io/html/ssh-tunneling-python.html</link>
      <pubDate>201704</pubDate>
      <description>原理可以看这篇 文章, 里面的配图一目了然.</description>
     </item>
     <item>
      <title>Retry-After字段带来的问题</title>
      <link>https://dirtysalt.github.io/html/issue-of-retry-after-field.html</link>
      <pubDate>201703</pubDate>
      <description>前段时间我发现公司的爬虫程序出了一些问题，会莫名地挂起。因为爬虫程序是使用worker方式起来的，从taskQ里面获取要抓取的URL，所以现象就是taskQ的size一直增长。</description>
     </item>
     <item>
      <title>职场上的四个误区和四个破法</title>
      <link>https://dirtysalt.github.io/html/wujun-thoughts-on-career.html</link>
      <pubDate>201703</pubDate>
      <description>今天我们来聊聊职场中的一些误区，它们会妨碍一个员工成为主管，陷入这种误区的人，即使经过长期努力被提拔成团队的管理人员，依然难以独当一面。</description>
     </item>
     <item>
      <title>利用WiFi热点来定位</title>
      <link>https://dirtysalt.github.io/html/use-wifi-aps-to-identify-location.html</link>
      <pubDate>201703</pubDate>
      <description>前几天看到一个项目很有意思 whereami "Uses WiFi signals and machine learning to predict where you are"</description>
     </item>
     <item>
      <title>U of T, Geoffrey Hinton</title>
      <link>https://dirtysalt.github.io/html/u-of-t-professor-geoffrey-hiton.html</link>
      <pubDate>201702</pubDate>
      <description>https://beta.theglobeandmail.com/news/toronto/u-of-t-professor-geoffrey-hinton-hailed-as-guru-of-new-era-of-computing/article34639148/</description>
     </item>
     <item>
      <title>Scaling your API with rate limiters</title>
      <link>https://dirtysalt.github.io/html/scaling-your-api-with-rate-limiters.html</link>
      <pubDate>201702</pubDate>
      <description>https://stripe.com/blog/rate-limiters code</description>
     </item>
     <item>
      <title>在老家的几天</title>
      <link>https://dirtysalt.github.io/html/a-few-days-at-village.html</link>
      <pubDate>201702</pubDate>
      <description>@20170402 晴</description>
     </item>
     <item>
      <title>Software Engineering at Google</title>
      <link>https://dirtysalt.github.io/html/software-engineering-at-google.html</link>
      <pubDate>201702</pubDate>
      <description></description>
     </item>
     <item>
      <title>推荐系统的可能实现</title>
      <link>https://dirtysalt.github.io/html/a-possible-impl-of-reco-sys.html</link>
      <pubDate>201701</pubDate>
      <description>推荐系统大致分为两个部分：召回(recall)和排序(sort). 其中召回是获取推荐项目的候选集合，而排序则是对这些候选集合进行排序。</description>
     </item>
     <item>
      <title>实事求是谈金融报告自动化 – 文因互联</title>
      <link>https://dirtysalt.github.io/html/automation-on-finacial-report.html</link>
      <pubDate>201701</pubDate>
      <description>http://blog.memect.cn/?p=2928</description>
     </item>
     <item>
      <title>通过TCP BBR为ShadowSocks加速</title>
      <link>https://dirtysalt.github.io/html/boost-shadowsocks-with-tcp-bbr.html</link>
      <pubDate>201701</pubDate>
      <description>大约一两月之前看到篇 知乎文章 ，说通过将TCP的拥塞控制策略修改成为BBR，传输效率提升了很多。今天突然想到是否可以将这个和shadowsocks一起使用，因为说实话大部分时候没有下载大文件的需求，并且TCP BBR需要在server端打开这个是我们没有办法控制的。但是翻墙是我们每天进行的活动，而且也经常抱怨浏览youtube或者是instagram, 又或者是从Google Play上面安装应用，速度太慢了，而这些shadowsocks正好又是我们自己搭建的，有完全的控制权，所以正好适合实验。</description>
     </item>
     <item>
      <title>VPN的智能加速原理</title>
      <link>https://dirtysalt.github.io/html/principle-of-smart-route-in-vpn.html</link>
      <pubDate>201701</pubDate>
      <description>参考的是 云梯 的智能加速方案。原理其实很简单，就是对国内站点网段走默认网关，其他的才会走VPN.</description>
     </item>
     <item>
      <title>创业/小公司的优点和缺点</title>
      <link>https://dirtysalt.github.io/html/my-thoughts-on-startup.html</link>
      <pubDate>201612</pubDate>
      <description>自由，包括工作时间以及工作内容。前提是在团队里面要有很强的话语权，至少是最开始的几个人 。自由有它的代价，自由需要人们有高度的自律性，不然外部给予限制会更好。曾经有一段时间我是一个远程工作者，我对那份工作内容兴趣不是很大，并且加上一些语言和交流问题，很快我便在工作上没有太多的激情。所以每次打开电脑，都会花很长时间看看网页或者是视频（不一定是很大块的时间，但是加在一起应该是不少时间了）。这段工作经历对我的负面影响非常大，让我意识到自己可能并不太适合远程工作。我个人很喜欢自由的生活和工作，但是同时也需要有一个office的环境大家可以每周在一起工作个1~2天。</description>
     </item>
     <item>
      <title>被放弃的概率权</title>
      <link>https://dirtysalt.github.io/html/abandoned-probabilistic-option.html</link>
      <pubDate>201612</pubDate>
      <description>原始链接</description>
     </item>
     <item>
      <title>Boots of Spanish Leather</title>
      <link>https://dirtysalt.github.io/html/boots-of-spanish-leather.html</link>
      <pubDate>201610</pubDate>
      <description>第一次听到这首歌的时候，有些想流泪的感觉。旋律很优美，唱法也比较朴实，像是在写信或是和朋友讲自己的故事，用词也相当的考究。</description>
     </item>
     <item>
      <title>Is there a simple algorithm for intelligence?</title>
      <link>https://dirtysalt.github.io/html/is-there-a-simple-algorithm-for-intelligence.html</link>
      <pubDate>201610</pubDate>
      <description>http://neuralnetworksanddeeplearning.com/sai.html</description>
     </item>
     <item>
      <title>On the future of neural networks</title>
      <link>https://dirtysalt.github.io/html/on-the-future-of-neural-networks.html</link>
      <pubDate>201610</pubDate>
      <description>http://neuralnetworksanddeeplearning.com/chap6.html#on_the_future_of_neural_networks</description>
     </item>
     <item>
      <title>On stories in neural networks</title>
      <link>https://dirtysalt.github.io/html/on-stories-in-neural-networks.html</link>
      <pubDate>201610</pubDate>
      <description>http://neuralnetworksanddeeplearning.com/chap3.html#on_stories_in_neural_networks</description>
     </item>
     <item>
      <title>dlib's face landmark detection</title>
      <link>https://dirtysalt.github.io/html/face-landmark-detection-dlib.html</link>
      <pubDate>201610</pubDate>
      <description>http://dlib.net/face_landmark_detection.py.html</description>
     </item>
     <item>
      <title>Tensorflow Neural Art</title>
      <link>https://dirtysalt.github.io/html/tensorflow-neural-art.html</link>
      <pubDate>201610</pubDate>
      <description>之前用 mxnet 试过生成neural art, 处理一副图片大约需要2min(在g2.2xlarge实例上). 今天看到这么一个项目 fast-style-transfer README里面写只需要100ms就能处理好一副图片 (当然训练style图片需要很长时间，"Training takes 4-6 hours on a Maxwell Titan X.", 不过训练这个style图片是离线的，所以处理时间长也没有问题). 这个项目是用tensorflow写的，所以顺便也学习一下tf的安装。</description>
     </item>
     <item>
      <title>The Times They Are A-Changin'</title>
      <link>https://dirtysalt.github.io/html/the-times-they-are-changing.html</link>
      <pubDate>201610</pubDate>
      <description></description>
     </item>
     <item>
      <title>The Effective Engineer</title>
      <link>https://dirtysalt.github.io/html/the-effective-engineer-by-edmond-lau.html</link>
      <pubDate>201610</pubDate>
      <description>youtube</description>
     </item>
     <item>
      <title>Taking PHP Seriously</title>
      <link>https://dirtysalt.github.io/html/taking-php-seriously.html</link>
      <pubDate>201609</pubDate>
      <description>https://slack.engineering/taking-php-seriously-cf7a60065329#.9b02c655s</description>
     </item>
     <item>
      <title>Becoming CTO</title>
      <link>https://dirtysalt.github.io/html/becoming-cto.html</link>
      <pubDate>201609</pubDate>
      <description>https://juokaz.com/blog/becoming-a-cto</description>
     </item>
     <item>
      <title>在RapidSSL上购买SSL证书</title>
      <link>https://dirtysalt.github.io/html/purchase-on-rapidssl.html</link>
      <pubDate>201609</pubDate>
      <description>https://www.myssl.cn/ 这个应该是RapidSSL在中国的代理商. 这里有一些SSL相关的 工具</description>
     </item>
     <item>
      <title>Vinod Khosla: Failure does not matter. Success matters.</title>
      <link>https://dirtysalt.github.io/html/vinod-khosla-talk.html</link>
      <pubDate>201608</pubDate>
      <description>youtube 挺喜欢这个老爷子的发音，虽然也是印度口音，但是不至于满是咖喱味。</description>
     </item>
     <item>
      <title>Silicon Valley Etiquette</title>
      <link>https://dirtysalt.github.io/html/silicon-valley-etiquette.html</link>
      <pubDate>201608</pubDate>
      <description>https://medium.com/@romainserman/silicon-valley-etiquette-6934cf6f8f73</description>
     </item>
     <item>
      <title>成都天府之旅</title>
      <link>https://dirtysalt.github.io/html/chengdu-travel.html</link>
      <pubDate>201608</pubDate>
      <description>国庆节没什么事情，想带着小胖出去转转。老婆之前去过一趟成都，对那边的印象非常不错：美食，饮茶，麻将，还有悠闲的生活，所以希望再去一次。但是因为带着小胖去，所以就范围限定在了市区里面。</description>
     </item>
     <item>
      <title>MXNet Neural Art</title>
      <link>https://dirtysalt.github.io/html/mxnet-neural-art.html</link>
      <pubDate>201607</pubDate>
      <description>一直想试试自己搞一个类似Primsa的东西，但是因为各种原因耽搁了很久，一方面也是因为没有找到很好的这方面的教程。 直到前几天 @phunter_lau 在 微博 上贴出了这篇 文章. 很早就听说mxnet这个项目，据说性能和易用性都非常棒，所以下决心用mxnet试试。 安装mxnet非常顺利，运行过程也很快：用ec2上g2.2xlarge跑300epochs的话大约就在2分钟左右。</description>
     </item>
     <item>
      <title>A Little Architecture</title>
      <link>https://dirtysalt.github.io/html/a-little-architecture.html</link>
      <pubDate>201606</pubDate>
      <description>http://blog.cleancoder.com/uncle-bob/2016/01/04/ALittleArchitecture.html</description>
     </item>
     <item>
      <title>Laws of Performant Software</title>
      <link>https://dirtysalt.github.io/html/laws-of-performant-software.html</link>
      <pubDate>201606</pubDate>
      <description>http://tagide.com/blog/advice/laws-of-peformant-software/</description>
     </item>
     <item>
      <title>关于工作，人生，以及最近做的梦</title>
      <link>https://dirtysalt.github.io/html/some-daydream.html</link>
      <pubDate>201606</pubDate>
      <description>@2016-08-15</description>
     </item>
     <item>
      <title>The Future of Programming</title>
      <link>https://dirtysalt.github.io/html/the-future-of-programming.html</link>
      <pubDate>201606</pubDate>
      <description>http://worrydream.com/dbx/</description>
     </item>
     <item>
      <title>What Makes A Great Software Engineer?</title>
      <link>https://dirtysalt.github.io/html/what-makes-a-great-software-engineer.html</link>
      <pubDate>201606</pubDate>
      <description>http://elliot.land/what-makes-a-great-software-engineer</description>
     </item>
     <item>
      <title>Life is just a Moment</title>
      <link>https://dirtysalt.github.io/html/life-is-just-a-moment.html</link>
      <pubDate>201606</pubDate>
      <description>A man died… 有个人死了</description>
     </item>
     <item>
      <title>只剩美国:我们眼睁睁看着末日的降临</title>
      <link>https://dirtysalt.github.io/html/america-alone-talk.html</link>
      <pubDate>201606</pubDate>
      <description>欧洲的低人口增长率以及为了维持高福利，必然要求引入新的人口，而现在穆斯林国家的人口增长率是最高的。现在欧洲每一个家庭平均是1.3个孩子，而穆斯林国家平均是3.5个孩子。如果一个欧洲国家里面有10%的穆斯林人口的话，那么两代下来穆斯林人口比例就会超过传统欧洲人口。国家人口结构变化导致政治，社会，教育，文化，甚至对待历史的方式都要发生相应的变化。</description>
     </item>
     <item>
      <title>Top 10 Things that Makes You a Good Programmer</title>
      <link>https://dirtysalt.github.io/html/top-10-things-that-makes-you-a-good-programmer.html</link>
      <pubDate>201606</pubDate>
      <description>http://infocreeds.com/top-10-things-that-makes-you-a-good-programmer/</description>
     </item>
     <item>
      <title>"I know how to program, but I don't know what to program"</title>
      <link>https://dirtysalt.github.io/html/dont-know-what-to-program.html</link>
      <pubDate>201606</pubDate>
      <description>http://www.devdungeon.com/content/i-know-how-program-i-dont-know-what-program</description>
     </item>
     <item>
      <title>How to Pick Your Battles on a Software Team</title>
      <link>https://dirtysalt.github.io/html/how-to-pick-your-battles-on-a-software-team.html</link>
      <pubDate>201606</pubDate>
      <description>https://spin.atomicobject.com/2016/06/21/pick-battles-software-team/</description>
     </item>
     <item>
      <title>为什么MIT停止教授SICP</title>
      <link>https://dirtysalt.github.io/html/why-mit-stopped-teaching-SICP.html</link>
      <pubDate>201606</pubDate>
      <description>ref: Programming by poking: why MIT stopped teaching SICP</description>
     </item>
     <item>
      <title>軟體工程師的創業陷阱-接案</title>
      <link>https://dirtysalt.github.io/html/trap-of-startup-side-project.html</link>
      <pubDate>201606</pubDate>
      <description>ref: 軟體工程師的創業陷阱-接案</description>
     </item>
     <item>
      <title>Facebook NewsFeed</title>
      <link>https://dirtysalt.github.io/html/on-facebook-newsfeed.html</link>
      <pubDate>201606</pubDate>
      <description>ref: 关于 Facebook NewsFeed，看这一篇就够了！</description>
     </item>
     <item>
      <title>Getting Things Done When You're Only a Grunt</title>
      <link>https://dirtysalt.github.io/html/getting-things-done-when-you-are-only-a-grunt.html</link>
      <pubDate>201605</pubDate>
      <description>http://www.joelonsoftware.com/articles/fog0000000332.html</description>
     </item>
     <item>
      <title>10 Lessons from 10 Years of Amazon Web Services</title>
      <link>https://dirtysalt.github.io/html/10-lessons-from-10-years-of-aws.html</link>
      <pubDate>201605</pubDate>
      <description>http://www.allthingsdistributed.com/2016/03/10-lessons-from-10-years-of-aws.html</description>
     </item>
     <item>
      <title>Religulous</title>
      <link>https://dirtysalt.github.io/html/religulous.html</link>
      <pubDate>201605</pubDate>
      <description>https://movie.douban.com/subject/2133390/ 我怀疑这个词是Religion & Ridiculous的结合.</description>
     </item>
     <item>
      <title>How_the_Great_Firewall_discovers_hidden_circumvention_servers</title>
      <link>https://dirtysalt.github.io/html/how-gfw-discovers-hidden-circumvention-servers.html</link>
      <pubDate>201605</pubDate>
      <description>标题也是这个视频的名称, 为了方便我就直接粘贴过来了. 视频里面提到了gfw如何使用active probe(主动检测)技术来发现隐藏服务器.</description>
     </item>
     <item>
      <title>心中的邪火</title>
      <link>https://dirtysalt.github.io/html/fidgety-mind-and-thought.html</link>
      <pubDate>201605</pubDate>
      <description>这阵邪火在我心中有好一阵子了。大约是从14年年末开始吧，主要表现就是焦躁不安。你若问要是我为什么会这样，我可能会恶狠狠地盯着你，然后用黑人英语给你来句"fuck off". 但是对老婆不能这么回答。我给我老婆的回答通常有这么几个：1. "感觉自己在家里没有什么人交流" 2. ”没有机会参加创业公司来钱不够快" 3. "对自己的前途发展缺少规划也缺乏安全感". 这些回答，现在依我来看，都只是真实答案的碎片，合在一起才有可能真正地解释我为什么焦躁不安。可是我老婆也不是福尔摩斯，没有那么多耐心去把这些碎片一片片地拼起来。</description>
     </item>
     <item>
      <title>Anacoda High Performance Solution</title>
      <link>https://dirtysalt.github.io/html/anaconda-high-perf-solution.html</link>
      <pubDate>201605</pubDate>
      <description>下了他们一本白皮书看，名字叫做 "HIGH PERFORMANCE PYTHON FOR OPEN DATA SCIENCE". 主要是看Anaconda做Scale up和Scale out的方案.</description>
     </item>
     <item>
      <title>Facebook公司内部PPT分享:如何高效工作</title>
      <link>https://dirtysalt.github.io/html/work-efficiently-in-facebook.html</link>
      <pubDate>201605</pubDate>
      <description>很早之前看过这篇文章，但是不是特别在意，现在重新阅读起来，和里面许多观点很有共鸣。</description>
     </item>
     <item>
      <title>关于工作年限和管理的问题</title>
      <link>https://dirtysalt.github.io/html/on-career-and-management.html</link>
      <pubDate>201605</pubDate>
      <description>by nullgate</description>
     </item>
     <item>
      <title>个人开发者接私活的要点</title>
      <link>https://dirtysalt.github.io/html/notes-on-side-project.html</link>
      <pubDate>201605</pubDate>
      <description>ref: 科普技术贴：个人开发者的那些赚钱方式</description>
     </item>
     <item>
      <title>要与野心人为伍</title>
      <link>https://dirtysalt.github.io/html/you-should-be-with-ambitious-people.html</link>
      <pubDate>201604</pubDate>
      <description>ref: 高盛CEO讲述穷困经历：“要与野心人为伍”</description>
     </item>
     <item>
      <title>专访荔枝fm技术团队</title>
      <link>https://dirtysalt.github.io/html/talk-with-lizhi-tech-team.html</link>
      <pubDate>201604</pubDate>
      <description>ref: 专访｜荔枝FM技术团队：当我们谈论声音时究竟应谈论什么</description>
     </item>
     <item>
      <title>用VC的方法炒股票</title>
      <link>https://dirtysalt.github.io/html/play-stock-in-vc-way.html</link>
      <pubDate>201604</pubDate>
      <description>ref: 用VC的方法炒股票</description>
     </item>
     <item>
      <title>傲慢与偏见之 - 谷歌中国逆袭史</title>
      <link>https://dirtysalt.github.io/html/true-history-of-google-cn.html</link>
      <pubDate>201604</pubDate>
      <description>ref: 傲慢与偏见之 - 谷歌中国逆袭史</description>
     </item>
     <item>
      <title>环境于个人的影响</title>
      <link>https://dirtysalt.github.io/html/how-env-impacts-on-person.html</link>
      <pubDate>201604</pubDate>
      <description>ref: 陈欧和他的斯坦福同学们 - 今日头条(TouTiao.com)</description>
     </item>
     <item>
      <title>参观Google北京</title>
      <link>https://dirtysalt.github.io/html/tour-of-google-beijing.html</link>
      <pubDate>201604</pubDate>
      <description>@2016-05-21</description>
     </item>
     <item>
      <title>Facebook上最近传开了一组漫画，深深戳中咱中国家庭的痛点</title>
      <link>https://dirtysalt.github.io/html/https://www.evernote.com/shard/s81/sh/74babb59-ffb0-4858-a8e2-c157b973b7d1/b43c2ee7fc50363efb47daba78a9d59e</link>
      <pubDate>201604</pubDate>
      <description></description>
     </item>
     <item>
      <title>用squid做http/https正向代理</title>
      <link>https://dirtysalt.github.io/html/squid-https-forwarding-proxy.html</link>
      <pubDate>201604</pubDate>
      <description>之前用nginx做前向代理，但是发现不支持https的代理。也就是如果 `proxies = {'https': 'http://127.0.0.1:64441'}` 是会出现问题的。好像在一个nginx group里面作者也说到不会支持https代理，因为squid已经很好地完成了这件事情。</description>
     </item>
     <item>
      <title>Why I work remotely (hint: it has nothing to do with productivity).</title>
      <link>https://dirtysalt.github.io/html/why-i-work-remotely-hint-it-has-nothing-to-do-with-productivity.html</link>
      <pubDate>201604</pubDate>
      <description>原文链接 https://m.signalvnoise.com/why-i-work-remotely-hint-it-has-nothing-to-do-with-productivity-34ace30f74fc#.f3ayawgvj</description>
     </item>
     <item>
      <title>Starters and Maintainers</title>
      <link>https://dirtysalt.github.io/html/starters-and-maintainers.html</link>
      <pubDate>201604</pubDate>
      <description>原文链接 http://jlongster.com/Starters-and-Maintainers</description>
     </item>
     <item>
      <title>Automate to save mental energy, not time</title>
      <link>https://dirtysalt.github.io/html/automate-to-save-mental-energy-not-time.html</link>
      <pubDate>201604</pubDate>
      <description>原文链接 http://www.johndcook.com/blog/2015/12/22/automate-to-save-mental-energy-not-time/</description>
     </item>
     <item>
      <title>Surviving meetings while remote</title>
      <link>https://dirtysalt.github.io/html/surviving-meetings-while-remote.html</link>
      <pubDate>201604</pubDate>
      <description>原文链接 http://jvns.ca/blog/2015/12/31/surviving-meetings-while-remote/</description>
     </item>
     <item>
      <title>Programmers are distraction for your startup</title>
      <link>https://dirtysalt.github.io/html/programmers-are-distraction-for-your-startup.html</link>
      <pubDate>201604</pubDate>
      <description>原文链接 http://tightstartup.com/programmers-are-distraction-for-your-startup/</description>
     </item>
     <item>
      <title>Finding Great Developers</title>
      <link>https://dirtysalt.github.io/html/finding-great-developers.html</link>
      <pubDate>201604</pubDate>
      <description>原文链接 http://www.joelonsoftware.com/articles/FindingGreatDevelopers.html</description>
     </item>
     <item>
      <title>Why Can't Programmers.. Program?</title>
      <link>https://dirtysalt.github.io/html/why-cant-programmers-program.html</link>
      <pubDate>201603</pubDate>
      <description>原文链接 http://blog.codinghorror.com/why-cant-programmers-program/</description>
     </item>
     <item>
      <title>Don't Call Yourself A Programmer</title>
      <link>https://dirtysalt.github.io/html/dont-call-yourself-a-programmer.html</link>
      <pubDate>201603</pubDate>
      <description>原文链接 http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/</description>
     </item>
     <item>
      <title>Data Infrastructure at Airbnb</title>
      <link>https://dirtysalt.github.io/html/data-infra-at-airbnb.html</link>
      <pubDate>201603</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>Atlassian $5.5b user onboarding magic</title>
      <link>https://dirtysalt.github.io/html/atlassian-user-onboarding-magic.html</link>
      <pubDate>201603</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>Authority &amp; Merit</title>
      <link>https://dirtysalt.github.io/html/authority-and-merit.html</link>
      <pubDate>201603</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>nginx正向代理</title>
      <link>https://dirtysalt.github.io/html/nginx-forwarding-proxy.html</link>
      <pubDate>201603</pubDate>
      <description>用nginx做一个http proxy. `resolver` 这个字段是必要的。</description>
     </item>
     <item>
      <title>纯水，软水，净水</title>
      <link>https://dirtysalt.github.io/html/several-waters.html</link>
      <pubDate>201602</pubDate>
      <description>纯水是采用反渗透膜过滤技术，去除水中全部的细菌和病毒，并保留少量矿物质。不仅能满足家人的喝水(可直接生喝)，同时可满足做饭、做汤。家中女性还可早晚用少量纯净水擦洗面部，即使在春秋季节也不会有紧巴巴的感觉。</description>
     </item>
     <item>
      <title>nginx站点跳转</title>
      <link>https://dirtysalt.github.io/html/nginx-site-redirect.html</link>
      <pubDate>201602</pubDate>
      <description>从dirlt.com跳转到dirtysalt.info</description>
     </item>
     <item>
      <title>aws ec2的几种实例</title>
      <link>https://dirtysalt.github.io/html/aws-ec2-instances.html</link>
      <pubDate>201602</pubDate>
      <description>aws ec2 定价</description>
     </item>
     <item>
      <title>mac根证书信任</title>
      <link>https://dirtysalt.github.io/html/mac-root-certification.html</link>
      <pubDate>201602</pubDate>
      <description>前几天使用charles做https proxy, 以便分析https请求。要做https proxy，就要安装根证书。按照charles help的介绍完成安装之后，keychain access里面显示是这样的状态</description>
     </item>
     <item>
      <title>python universal feed parser</title>
      <link>https://dirtysalt.github.io/html/python-universal-feed-parser.html</link>
      <pubDate>201602</pubDate>
      <description>universal feed parser的实现并不太多，feedparser 算是其中最健壮的一个，可以做一些数据修复以及处理各种格式的rss. 但是就是速度比较慢。cfeedparser 看上会比较快速，但是感觉不能应对各种rss(我没有尝试这个库，后面我会试试这个库，估计速度是慢不了的). 一个看上去比较折衷(不做数据修复)但是速度也比较快的实现是speedparser. 从代码上看这个库基于feedparser做了一些改动，牺牲了一些准确性但是提升了速度。在prod环境下面我是这样使用的</description>
     </item>
     <item>
      <title>Python Gzip Input Stream 实现</title>
      <link>https://dirtysalt.github.io/html/python-gzip-input-stream-impl.html</link>
      <pubDate>201602</pubDate>
      <description></description>
     </item>
     <item>
      <title>关于AB Test使用和实现的猜测</title>
      <link>https://dirtysalt.github.io/html/a-possible-impl-of-abtest-sys.html</link>
      <pubDate>201601</pubDate>
      <description>首先我没有任何AB Test使用和实现的经历，所以这里纯粹就是猜测一下:) 这个是昨天和wenjie讨论推荐系统时候想的，因为修改推荐系统算法一定要观察具体效果如何。</description>
     </item>
     <item>
      <title>推荐系统讨论</title>
      <link>https://dirtysalt.github.io/html/discussion-on-rs.html</link>
      <pubDate>201512</pubDate>
      <description>@20160218 这天晚上和wenjie讨论了一下推荐系统的设计，主要是在框架层面的讨论。下面是这次讨论的草稿纸。顺便说一句，之前和minghua老师也有过一次关于反作弊的讨论，不过草稿纸就比这个要高大上不少了， 用的是iPad Pro + iPencil，体验确实非常的好</description>
     </item>
     <item>
      <title>开四十年咖啡店是种什么样的体验</title>
      <link>https://dirtysalt.github.io/html/experience-of-running-coffee-shop-for-40-years.html</link>
      <pubDate>201512</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>build nginx from source on ubuntu</title>
      <link>https://dirtysalt.github.io/html/build-nginx-from-source-on-ubuntu.html</link>
      <pubDate>201512</pubDate>
      <description>在ubuntu下面使用apt-get可以很方便地安装nginx. 但是这样安装的nginx只将一些常用的module编译进去了，还有一些不那么经常使用的module只能通过源代码构建。不过即便是从源代码构建，我们也希望保留那些发布包里面已经编译好的的modules. 这篇文章给出了一个非常好的解决办法。</description>
     </item>
     <item>
      <title>大数据应该是…</title>
      <link>https://dirtysalt.github.io/html/big-data-is-supposed-to-be.html</link>
      <pubDate>201512</pubDate>
      <description>所以对你来说的大数据，可能在别人眼里就是小数据。but, who cares. 我们只在乎是否有足够的工具来使得，即使一个两三人的团队也可以在短时间构建起处理能力远超过我们普通台式机的集群，使得原本在台式机器上需要花费几个小时甚至几天的任务，在几分钟内就可以完成。</description>
     </item>
     <item>
      <title>7 Links To Convince You That Big Data Isn't Your Problem</title>
      <link>https://dirtysalt.github.io/html/7-links-to-convince-you-that-big-data-is-not-your-problem.html</link>
      <pubDate>201512</pubDate>
      <description>pdf</description>
     </item>
     <item>
      <title>冷静下来避免犯错</title>
      <link>https://dirtysalt.github.io/html/calm-down-to-avoid-mistake.html</link>
      <pubDate>201512</pubDate>
      <description>今天早上看到一条新闻，说央视CCTV5摄影记者王华年，坐飞机过安检为难年轻工作人员，称自己脱衣服冷而拒绝安检，并且还试图和在场的工作人员动手。视频</description>
     </item>
     <item>
      <title>Michael Stonebraker Presentation</title>
      <link>https://dirtysalt.github.io/html/ms-presentation.html</link>
      <pubDate>201512</pubDate>
      <description>video: http://www.iqiyi.com/v_19rrkji7e4.html pdf: turing-china.pdf</description>
     </item>
     <item>
      <title>How To Launch a Mac App and Become #1 Top Paid App Globally</title>
      <link>https://dirtysalt.github.io/html/how-to-launch-a-mac-app-and-become-1-top-paid-app-globally.html</link>
      <pubDate>201512</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>What would it take to prove me wrong?</title>
      <link>https://dirtysalt.github.io/html/what-would-it-take-to-prove-me-wrong.html</link>
      <pubDate>201512</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>A great developer can come from anywhere</title>
      <link>https://dirtysalt.github.io/html/a-great-developer-can-come-from-anywhere.html</link>
      <pubDate>201511</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>Employee Equity</title>
      <link>https://dirtysalt.github.io/html/employee-equity.html</link>
      <pubDate>201511</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>Before you code, write.</title>
      <link>https://dirtysalt.github.io/html/before-you-code-write.html</link>
      <pubDate>201510</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>Remove the stress, pick a deadline</title>
      <link>https://dirtysalt.github.io/html/remove-the-stress-pick-a-deadline.html</link>
      <pubDate>201510</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>The Secret to Career Success</title>
      <link>https://dirtysalt.github.io/html/the-secret-to-career-success.html</link>
      <pubDate>201510</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>The Scientist</title>
      <link>https://dirtysalt.github.io/html/the-scientist.html</link>
      <pubDate>201510</pubDate>
      <description>原文链接</description>
     </item>
     <item>
      <title>石墨烯教父: 从千年博后到物理诺奖的心路历程</title>
      <link>https://dirtysalt.github.io/html/a-note-of-nobel-winner.html</link>
      <pubDate>201510</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Why I stopped paying attention to industry news</title>
      <link>https://dirtysalt.github.io/html/why-i-stopped-paying-attention-to-industry-news.html</link>
      <pubDate>201510</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Learn to stop using shiny new things and love MySQL</title>
      <link>https://dirtysalt.github.io/html/learn-stop-using-shiny-new-things-and-love-mysql.html</link>
      <pubDate>201510</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Climbing The Wrong Hill</title>
      <link>https://dirtysalt.github.io/html/climbing-the-wrong-hill.html</link>
      <pubDate>201510</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Lessons learned writing highly available code</title>
      <link>https://dirtysalt.github.io/html/lessons-learned-writing-highly-available-code.html</link>
      <pubDate>201510</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Ten Rules for Open Source Success</title>
      <link>https://dirtysalt.github.io/html/ten-rules-for-open-source-success.html</link>
      <pubDate>201510</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Competitors Are Not The Enemy</title>
      <link>https://dirtysalt.github.io/html/competitors-are-not-the-enemy.html</link>
      <pubDate>201510</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Making money along the way</title>
      <link>https://dirtysalt.github.io/html/making-money-along-the-way.html</link>
      <pubDate>201510</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>简单生词本的实现</title>
      <link>https://dirtysalt.github.io/html/my-toy-dict-book.html</link>
      <pubDate>201509</pubDate>
      <description>我有一个习惯是在本地搭建一个HTTP服务器，然后建立一个index.html文件里面存储一些常用链接。然后在hosts里面添加一个 `127.0.0.1 gw` 映射。这样我只要输入gw:8080就可以跳到index.html页面（chrome还会存储历史记录，所以时间长了，只要键入gw就可以看到），非常方便。</description>
     </item>
     <item>
      <title>chasing the shiny and new (追逐时髦的技术)</title>
      <link>https://dirtysalt.github.io/html/chasing-the-shiny-and-new.html</link>
      <pubDate>201509</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Why Continuous Deployment just keeps on giving</title>
      <link>https://dirtysalt.github.io/html/why-cd-just-keeps-on-giving.html</link>
      <pubDate>201509</pubDate>
      <description>原文地址 主题: 论持续部署的好处.</description>
     </item>
     <item>
      <title>Aaron Swartz: How to Get a Job Like Mine</title>
      <link>https://dirtysalt.github.io/html/how-to-get-a-job-like-mine-aaron-swartz.html</link>
      <pubDate>201509</pubDate>
      <description>原文地址 中文 :D 说的非常实在, 强烈建议阅读. 即使对于想我这样从业多年的IT人士, 依然可以获得许多启发</description>
     </item>
     <item>
      <title>A Decade at Google</title>
      <link>https://dirtysalt.github.io/html/a-decade-at-google.html</link>
      <pubDate>201509</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>切换到印象笔记-NO!</title>
      <link>https://dirtysalt.github.io/html/dont-switch-to-yinxiang-note.html</link>
      <pubDate>201509</pubDate>
      <description>可能是因为早上没有睡醒，想到把evernote迁移到印象笔记上。印象笔记是evernote的中国版。这个想法很早之前就有了，原因很简单，GFW弄得mac本地的evernote进行同步都需要翻墙，evernote网页版也非常不稳定。</description>
     </item>
     <item>
      <title>OSTEP / Persistence-File</title>
      <link>https://dirtysalt.github.io/html/ostep-persist-file.html</link>
      <pubDate>201509</pubDate>
      <description>在文件空间分配上, 除了典型的pointer-based方法(在data block里面存储multi-level指针)外, 还有extent-based方法. 这种办法是可以为每个文件分配一个或多个称为extent的连续磁盘空间. 这个连续磁盘空间可以非常大(可能也是按照block来组织的, 这样便于cache & buffer), 利于大文件读写. 按照我的理解是对于小文件还是按照block进行分配, 对于大文件除去按照block分配的空间之外, 其他空间都是按照extent来分配, 这样兼顾大小文件存储效率.</description>
     </item>
     <item>
      <title>OSTEP / Persistence-Disk</title>
      <link>https://dirtysalt.github.io/html/ostep-persist-disk.html</link>
      <pubDate>201509</pubDate>
      <description>系统中各个组件和CPU连接方式如下:</description>
     </item>
     <item>
      <title>OSTEP / Concurrency-CV</title>
      <link>https://dirtysalt.github.io/html/ostep-con-cv.html</link>
      <pubDate>201509</pubDate>
      <description>OSTEP</description>
     </item>
     <item>
      <title>OSTEP / Concurrency-Lock</title>
      <link>https://dirtysalt.github.io/html/ostep-con-lock.html</link>
      <pubDate>201509</pubDate>
      <description>OSTEP</description>
     </item>
     <item>
      <title>hive getting started</title>
      <link>https://dirtysalt.github.io/html/hive-getting-started.html</link>
      <pubDate>201509</pubDate>
      <description>https://cwiki.apache.org/confluence/display/Hive/GettingStarted</description>
     </item>
     <item>
      <title>zookeeper getting started</title>
      <link>https://dirtysalt.github.io/html/zookeeper-getting-started.html</link>
      <pubDate>201509</pubDate>
      <description>http://blog.csdn.net/cxhzqhzq/article/details/6538491</description>
     </item>
     <item>
      <title>OSTEP / Virt-VAX/VMS</title>
      <link>https://dirtysalt.github.io/html/ostep-virt-vax-vms.html</link>
      <pubDate>201509</pubDate>
      <description>OSTEP</description>
     </item>
     <item>
      <title>OSTEP / Virt-页式系统</title>
      <link>https://dirtysalt.github.io/html/ostep-virt-vm-page.html</link>
      <pubDate>201509</pubDate>
      <description>OSTEP</description>
     </item>
     <item>
      <title>OSTEP / Virt-段式系统</title>
      <link>https://dirtysalt.github.io/html/ostep-virt-vm-seg.html</link>
      <pubDate>201509</pubDate>
      <description>OSTEP</description>
     </item>
     <item>
      <title>OSTEP / Virt-CPU</title>
      <link>https://dirtysalt.github.io/html/ostep-virt-cpu.html</link>
      <pubDate>201509</pubDate>
      <description>OSTEP</description>
     </item>
     <item>
      <title>OSTEP / Readings</title>
      <link>https://dirtysalt.github.io/html/ostep-readings.html</link>
      <pubDate>201509</pubDate>
      <description>OSTEP</description>
     </item>
     <item>
      <title>A Love for Legacy</title>
      <link>https://dirtysalt.github.io/html/a-love-for-legacy.html</link>
      <pubDate>201509</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Availability vs. Durability</title>
      <link>https://dirtysalt.github.io/html/availability-vs-durability.html</link>
      <pubDate>201508</pubDate>
      <description>如果只有一个副本机器A，要是它出故障，则读肯定会失败。要是有多副本机器，A坏了，我还有B和C可以读。写也一样。所以说多副本提高了服务的availabaility。</description>
     </item>
     <item>
      <title>2PC vs. Paxos</title>
      <link>https://dirtysalt.github.io/html/2pc-vs-paxos.html</link>
      <pubDate>201507</pubDate>
      <description>摘自《大规模分布式存储系统》</description>
     </item>
     <item>
      <title>中心极限定理</title>
      <link>https://dirtysalt.github.io/html/central-limit-theorem.html</link>
      <pubDate>201505</pubDate>
      <description>中心极限定理(Central Limit Theorem)</description>
     </item>
     <item>
      <title>What Happens to Older Developers?</title>
      <link>https://dirtysalt.github.io/html/what-happens-to-older-developers.html</link>
      <pubDate>201504</pubDate>
      <description>https://news.ycombinator.com/item?id=7427542</description>
     </item>
     <item>
      <title>Tips for work-life balance</title>
      <link>https://dirtysalt.github.io/html/tips-for-work-life-balance.html</link>
      <pubDate>201504</pubDate>
      <description>http://matt.might.net/articles/work-life-balance/</description>
     </item>
     <item>
      <title>start from simple</title>
      <link>https://dirtysalt.github.io/html/start-from-simple.html</link>
      <pubDate>201504</pubDate>
      <description>昨天晚上喝的有点多了，说了一些比较莫名其妙的话，但是我相信point还是比较清楚的。早起泡了一杯茶，又想到了一些东西，那就继续写下来吧;D</description>
     </item>
     <item>
      <title>其实你知道的非常少</title>
      <link>https://dirtysalt.github.io/html/you-know-so-little.html</link>
      <pubDate>201503</pubDate>
      <description>有时候想法太多反而不是一件好事。</description>
     </item>
     <item>
      <title>宝宝出生了</title>
      <link>https://dirtysalt.github.io/html/have-a-baby.html</link>
      <pubDate>201503</pubDate>
      <description>@2015-07-19</description>
     </item>
     <item>
      <title>装配SSD</title>
      <link>https://dirtysalt.github.io/html/equipped-with-ssd.html</link>
      <pubDate>201503</pubDate>
      <description>@2015-05-04</description>
     </item>
     <item>
      <title>Kaggle Facial Keypoints Detection</title>
      <link>https://dirtysalt.github.io/html/kaggle-facial-keypoints-detection.html</link>
      <pubDate>201502</pubDate>
      <description>code on github</description>
     </item>
     <item>
      <title>Kaggle Digit Recognizer</title>
      <link>https://dirtysalt.github.io/html/kaggle-digit-recongnizer.html</link>
      <pubDate>201502</pubDate>
      <description>code on github</description>
     </item>
     <item>
      <title>life is not easy but magical</title>
      <link>https://dirtysalt.github.io/html/life-is-not-easy-but-magical.html</link>
      <pubDate>201502</pubDate>
      <description>晚上失眠。</description>
     </item>
     <item>
      <title>如何做cross validation</title>
      <link>https://dirtysalt.github.io/html/how-to-do-cross-validation.html</link>
      <pubDate>201502</pubDate>
      <description>对于cross validation认识一直不太清晰，这几天搞kaggle题目涉及到调参，就又把cross validation这个问题想了想。</description>
     </item>
     <item>
      <title>Kaggle Bike Sharing Demand</title>
      <link>https://dirtysalt.github.io/html/kaggle-bike-sharing-demand.html</link>
      <pubDate>201502</pubDate>
      <description>code on github</description>
     </item>
     <item>
      <title>分配工作时间的准则</title>
      <link>https://dirtysalt.github.io/html/principle-of-alloc-time-for-work.html</link>
      <pubDate>201412</pubDate>
      <description>下午和gl聊到如何进行时间分配，我总结了下面3个准则：</description>
     </item>
     <item>
      <title>选用什么方法做baseline</title>
      <link>https://dirtysalt.github.io/html/how-to-choose-baseline.html</link>
      <pubDate>201412</pubDate>
      <description>拿到一个问题，我们应该考虑用什么模型来尝试？</description>
     </item>
     <item>
      <title>2015年初家庭大扫除</title>
      <link>https://dirtysalt.github.io/html/2015-house-clean.html</link>
      <pubDate>201412</pubDate>
      <description>为了到时候给宝宝腾出地方，也为了迎接新的一年，老婆从前两周开始就不断在我耳边说家里要做个大扫除。我想想也对，要是等到4，5月份她肚子稍微再大一些的话，如果我自己一个人再大扫除想办法腾出地方来就不容易了，至少现在来说她情况还比较稳定还能帮我个手。</description>
     </item>
     <item>
      <title>有空多干点家务活</title>
      <link>https://dirtysalt.github.io/html/do-house-work-as-leisure.html</link>
      <pubDate>201410</pubDate>
      <description>一天内大部分时间花在看书上非常地累，而且感觉这种状态并不是可持续的。前段时间我尝试了每天尽可能地大部分时间看书（将做家务时间缩短到最小），但是每到晚上8点左右的时候就特别累，全身紧张充满焦虑感。这种焦虑感，我事后分析，一方面是因为每天不做实事老是往远处看（另一个说法就是没有“活在当下”，这个和我状态有关），另一方面是觉得花费在生活打点上的时间太少。</description>
     </item>
     <item>
      <title>Peter Thiel 谈竞争沉迷</title>
      <link>https://dirtysalt.github.io/html/peter-thiel-on-competition-obsession.html</link>
      <pubDate>201409</pubDate>
      <description>原文地址</description>
     </item>
     <item>
      <title>Telstra Billboard</title>
      <link>https://dirtysalt.github.io/html/telstra-billboard-of-love.html</link>
      <pubDate>201408</pubDate>
      <description>@2015-02-14 让墨尔本的土豪pf同学帮我也发了一条SMS. 发送之后一般要等上几个小时，然后那个位置上有个自动摄像头，标语出现的时候会自动拍摄，通过彩信的方式把图片发送回手机上。cool!</description>
     </item>
     <item>
      <title>The Golden Circle</title>
      <link>https://dirtysalt.github.io/html/the-golden-circle.html</link>
      <pubDate>201407</pubDate>
      <description>@2014-12-04</description>
     </item>
     <item>
      <title>DNA测序原理</title>
      <link>https://dirtysalt.github.io/html/about-dna-sequencing.html</link>
      <pubDate>201404</pubDate>
      <description>@2014.12.25 晚上FZH和我仔细讲解了一下基因测序大致原理。</description>
     </item>
     <item>
      <title>苦旅的起点</title>
      <link>https://dirtysalt.github.io/html/beginning-of-a-hard-journey.html</link>
      <pubDate>201403</pubDate>
      <description>@2014-12-20</description>
     </item>
     <item>
      <title>我的iPhone5S</title>
      <link>https://dirtysalt.github.io/html/my-iphone5s.html</link>
      <pubDate>201403</pubDate>
      <description>@2014-10-30</description>
     </item>
     <item>
      <title>赫尔辛基印象2</title>
      <link>https://dirtysalt.github.io/html/helsinki-travel2.html</link>
      <pubDate>201402</pubDate>
      <description>@2014-09-09</description>
     </item>
     <item>
      <title>济州岛之旅</title>
      <link>https://dirtysalt.github.io/html/jeju-travel.html</link>
      <pubDate>201402</pubDate>
      <description>@2014-08-07</description>
     </item>
     <item>
      <title>厦门鼓浪屿印象</title>
      <link>https://dirtysalt.github.io/html/xmn-travel.html</link>
      <pubDate>201401</pubDate>
      <description>@2014-07-19</description>
     </item>
     <item>
      <title>旧金山印象</title>
      <link>https://dirtysalt.github.io/html/sfo-travel.html</link>
      <pubDate>201312</pubDate>
      <description>2014.03.30</description>
     </item>
     <item>
      <title>赫尔辛基印象</title>
      <link>https://dirtysalt.github.io/html/helsinki-travel.html</link>
      <pubDate>201312</pubDate>
      <description>@2014-03-03</description>
     </item>
     <item>
      <title>申请美国签证</title>
      <link>https://dirtysalt.github.io/html/apply-visa-for-usa.html</link>
      <pubDate>201311</pubDate>
      <description>http://www.ustraveldocs.com/cn_zh/index.html?firstTime=No</description>
     </item>
     <item>
      <title>申请芬兰签证</title>
      <link>https://dirtysalt.github.io/html/apply-visa-for-finland.html</link>
      <pubDate>201311</pubDate>
      <description>http://www.finland.cn/public/default.aspx?nodeid=35198&contentlan=20&culture=zh-CN</description>
     </item>
     <item>
      <title>招商银行香港一卡通</title>
      <link>https://dirtysalt.github.io/html/cmb-hk-account.html</link>
      <pubDate>201311</pubDate>
      <description>业务介绍 http://hk.cmbchina.com/Personal/Detail.aspx?guid=742e5736-c24f-4a56-9b45-1763f488a9c1</description>
     </item>
     <item>
      <title>与Nenad面对面</title>
      <link>https://dirtysalt.github.io/html/talk-with-nenad.html</link>
      <pubDate>201310</pubDate>
      <description>@2014-01-13 这次会面是蔡学镛介绍，我盟堃神组织的。</description>
     </item>
     <item>
      <title>"哪里还有时间去沮丧"</title>
      <link>https://dirtysalt.github.io/html/have-a-nice-sleep-and-straighten-up.html</link>
      <pubDate>201310</pubDate>
      <description>过去多少次，因为自己做错事情，觉得自己没用，变得沮丧消极。一个人坐在教室，走在路上，躺在草地上，脑子里面充斥着各种不切实际的想法，借此来填充自己的脑袋，赶走那些沮丧消极的想法 但是越加尝试这么做，脑子里面越是一团浆糊。不切实际想法，以及悲观消极的想法混在一起，加上疲惫的身体，接下来的几天都没有好精神，没有心思做事情。</description>
     </item>
     <item>
      <title>主页千次PV</title>
      <link>https://dirtysalt.github.io/html/thousands-pv.html</link>
      <pubDate>201309</pubDate>
      <description>@2013-12-21</description>
     </item>
     <item>
      <title>分居和流产</title>
      <link>https://dirtysalt.github.io/html/heart-broken.html</link>
      <pubDate>201308</pubDate>
      <description>@2013-11-29</description>
     </item>
     <item>
      <title>非业余的业余爱好</title>
      <link>https://dirtysalt.github.io/html/professional-amateur.html</link>
      <pubDate>201307</pubDate>
      <description>一直觉得自己是一个非常无聊的人，除了编写代码之外似乎也没有什么特别的兴趣爱好了。高中时候还踢足球，刚进大学就挂靴了。大学练习羽毛球，但是觉得自己手臂爆发力不够，和高手们过招都是被玩的对象。毕业之后经常跑步和跳绳以及开始学习游泳，但是那还不是兴趣爱好，只是为了锻炼身体。研究生开始看漫画KOF，动漫《火影忍者》和《死神》动漫。喜欢看电影和听歌。看起来这些兴趣爱好很多，实际上却非常少。并且因为自从接触计算机之后，自己越来越不愿意做一些social性质的事情，相反更喜欢一个人静静地思考问题和阅读文档，所以导致这些兴趣爱好都只是停留在比较浅的层面的，只是会玩，要说在行或者是专家就根本谈不上。</description>
     </item>
     <item>
      <title>初次英语对话</title>
      <link>https://dirtysalt.github.io/html/my-first-english-conversation.html</link>
      <pubDate>201307</pubDate>
      <description>@2013-11-18.</description>
     </item>
     <item>
      <title>初次艾灸</title>
      <link>https://dirtysalt.github.io/html/my-first-moxa-wool-moxibustion.html</link>
      <pubDate>201307</pubDate>
      <description>@2013-10-03</description>
     </item>
     <item>
      <title>简单搭建WordPress</title>
      <link>https://dirtysalt.github.io/html/run-wordpress-in-fast-way.html</link>
      <pubDate>201306</pubDate>
      <description>下载wordpress. http://cn.wordpress.org/</description>
     </item>
     <item>
      <title>初次10km跑</title>
      <link>https://dirtysalt.github.io/html/first-10km-running.html</link>
      <pubDate>201306</pubDate>
      <description>@2013-09-11 从小到大这应该是连续跑得最长的一次，中途没有停止或者是休息。或许以后可以跑得更远。</description>
     </item>
     <item>
      <title>初次游泳</title>
      <link>https://dirtysalt.github.io/html/first-swimming.html</link>
      <pubDate>201306</pubDate>
      <description>@2013-08-24</description>
     </item>
     <item>
      <title>桂林山水甲天下</title>
      <link>https://dirtysalt.github.io/html/guilin-travel.html</link>
      <pubDate>201305</pubDate>
      <description>2013-07-20（初到桂林）</description>
     </item>
     <item>
      <title>去圆明园走走</title>
      <link>https://dirtysalt.github.io/html/old-summer-palace-travel.html</link>
      <pubDate>201303</pubDate>
      <description>@2013-07-09</description>
     </item>
     <item>
      <title>我的夏新N821</title>
      <link>https://dirtysalt.github.io/html/my-amoi-n821.html</link>
      <pubDate>201302</pubDate>
      <description>@2013-07-19</description>
     </item>
     <item>
      <title>急得蛋碎了也没有用</title>
      <link>https://dirtysalt.github.io/html/unecessary-hurry-up.html</link>
      <pubDate>201211</pubDate>
      <description>@2013-06-17</description>
     </item>
     <item>
      <title>做CTO都是出去过的</title>
      <link>https://dirtysalt.github.io/html/meeting-dyq.html</link>
      <pubDate>201211</pubDate>
      <description>@2013-06-14</description>
     </item>
     <item>
      <title>看dyy去深圳</title>
      <link>https://dirtysalt.github.io/html/goodbye-dyy.html</link>
      <pubDate>201209</pubDate>
      <description>@2013-06-06</description>
     </item>
     <item>
      <title>小心开车</title>
      <link>https://dirtysalt.github.io/html/be-careful-when-you-drive.html</link>
      <pubDate>201208</pubDate>
      <description>去年5.1的时候，老婆回家开车。准备把车从院子里面开到外面的时候，不小心把刹车错踩成了油门，撞伤了岳母。当时我还没有学开车，觉得这么最基本的错误都会犯呢？也是从那个时候，老婆以后在局里面练车都非常仔细，尽量地养成好的习惯，现在也时常叮嘱我养成好的习惯。</description>
     </item>
     <item>
      <title>微软面试</title>
      <link>https://dirtysalt.github.io/html/ms-interview.html</link>
      <pubDate>201208</pubDate>
      <description>@2013-03-26</description>
     </item>
     <item>
      <title>系列2</title>
      <link>https://dirtysalt.github.io/html/ms-interview-2.html</link>
      <pubDate>201208</pubDate>
      <description>@2020-09-29</description>
     </item>
     <item>
      <title>没有妻子的婚礼</title>
      <link>https://dirtysalt.github.io/html/my-without-wife-wedding.html</link>
      <pubDate>201207</pubDate>
      <description>@2013-02-12</description>
     </item>
     <item>
      <title>没有那么简单</title>
      <link>https://dirtysalt.github.io/html/not-easy-as-you-think.html</link>
      <pubDate>201205</pubDate>
      <description>@2012-11-24</description>
     </item>
     <item>
      <title>初次足疗</title>
      <link>https://dirtysalt.github.io/html/first-foot-massage.html</link>
      <pubDate>201204</pubDate>
      <description>@2012-11-18</description>
     </item>
     <item>
      <title>以后老了我能做什么</title>
      <link>https://dirtysalt.github.io/html/what-can-i-do-when-old.html</link>
      <pubDate>201204</pubDate>
      <description>大二的时候开始写程序，大三的时候比较入迷。老爸看我这么痴迷，可能是比较担心吧，就和我说：”我看电视上那些IT工作人员，工作强度很高，趁年轻脑子还好用的时候多赚一些钱，稍微老了之后就干不动了，转着做管理层。这个行业还是青春饭”。 当时的我不以为然。显然那个时候我也看到很多同样想法这样的文章，但是我也看到了很多批评这些想法的文章：“对于那些年老的程序员有经验，在设计上面可以少走很多弯路”。而且这些批评的文章都是业界很有名气的人写的，我觉得他们至少比那些 在管理层上面折腾的人说的靠谱。过了这么多年，我依然坚信这是真的，因为缺乏有经验的程序员，而导致错误的设计，会使得项目非常复杂臃肿，甚至垮掉。</description>
     </item>
     <item>
      <title>如何定义软件稳定</title>
      <link>https://dirtysalt.github.io/html/how-to-define-software-stability.html</link>
      <pubDate>201203</pubDate>
      <description>@2012-8-30 redis作者在自己的 博客 中提到了如何定义软件到达了production-ready状态</description>
     </item>
     <item>
      <title>购买MacBookAir</title>
      <link>https://dirtysalt.github.io/html/purchase-mba.html</link>
      <pubDate>201203</pubDate>
      <description>原来的compaq笔记本买了也挺长时间的了，并且因为自己从百度离职了，配备的thinkpad-x201i就被回收了，手头上也没有什么可用的笔记本。ipad阅读倒是非常方便，但是却不适合用来完成工作（周末在天津），所以想入手一个笔记本。</description>
     </item>
     <item>
      <title>记在2012年生日</title>
      <link>https://dirtysalt.github.io/html/2012-birthday.html</link>
      <pubDate>201202</pubDate>
      <description>谢谢老婆为我修改的签名：</description>
     </item>
     <item>
      <title>参观天津机房</title>
      <link>https://dirtysalt.github.io/html/visit-tj-data-center.html</link>
      <pubDate>201112</pubDate>
      <description>今天（2012-7-30）和同事去看了一下天津华苑的机房，在梓苑路上面。通常机房是有一些通信运营商来建立数据中心的，比如联通移动电信这些公司，当然也不排除一些 很大的互联网公司比如facebook以及google等，自己建立数据中心。建立数据中心大致需要：</description>
     </item>
     <item>
      <title>和xcq看房子</title>
      <link>https://dirtysalt.github.io/html/look-house-with-xcq.html</link>
      <pubDate>201112</pubDate>
      <description>@2012.5.14</description>
     </item>
     <item>
      <title>和luoyan的谈话</title>
      <link>https://dirtysalt.github.io/html/talk-with-luoyan.html</link>
      <pubDate>201112</pubDate>
      <description>晚上给luoyan介绍了一下我们实时流式计算项目内部实现，他也好心地为我介绍了一下整个bailing系统大致组织并且稍微详细地介绍了一下bddb的实现原理。之后我们稍微聊了一些其他的事情。</description>
     </item>
     <item>
      <title>切换回windows</title>
      <link>https://dirtysalt.github.io/html/switch-back-to-windows.html</link>
      <pubDate>201108</pubDate>
      <description>前几天折腾了Ubuntu ，决定还是装回Windows.但是我昨天安装Windows也是同样的扯淡（不过相比安装Ubuntu来说的话这个淡扯得相对小了一些）。</description>
     </item>
     <item>
      <title>折腾Ubuntu</title>
      <link>https://dirtysalt.github.io/html/struggle-with-ubuntu.html</link>
      <pubDate>201105</pubDate>
      <description>家里的电脑4年前买来的，预装的vista，现在运行的非常慢。我猜想主要是磁盘碎片太严重了，虽然我装了一些磁盘碎片整理工具比如OODefrag进行整理，但是似乎现在着实慢得不行了。待机之后启动，就能看到磁盘的灯一直在闪，尤其是启动firefox的时候闪得越厉害。 决定重装系统吧。从京东上买了500GB的移动硬盘，把该备份的数据啥的都备份出来了。决定装一个linux系统，毕竟自己接触linux服务器开发也比较长时间了，有什么问题的话都是自己折腾出来的，原来放弃很多次主要是因为没有经验，现在应该不会了。决心试试，这便是噩梦的开始。不愿意看下去的同学，直接看我的结论吧：不要用linux来作为desktop,除非你非常非常爱折腾，但是还是尽量也不要用。</description>
     </item>
     <item>
      <title>杭州印象</title>
      <link>https://dirtysalt.github.io/html/hangzhou-travel.html</link>
      <pubDate>201003</pubDate>
      <description>@2012.3.4 our wedding day.</description>
     </item>
     <item>
      <title>领证经历</title>
      <link>https://dirtysalt.github.io/html/get-marriage-identity.html</link>
      <pubDate>200903</pubDate>
      <description>说到领证经历，实在是操蛋。本来可以花差不多9块钱搞定的事情，结果花了200多块钱。听听这操蛋的领证经历吧。</description>
     </item>
     <item>
      <title>婚纱摄影</title>
      <link>https://dirtysalt.github.io/html/take-wedding-photo.html</link>
      <pubDate>200609</pubDate>
      <description>从个人经历来看的话，真心觉得《蒙娜丽莎》不错，算是给《蒙娜丽莎》做一个广告吧。如果朋友们在迷茫选择哪一家的话，我希望自己的经历可以给《蒙娜丽莎》加一些分。但是不管怎样，都真心希望朋友都可以拍出自己满意的婚纱照。</description>
     </item>
  </channel>
</rss>
