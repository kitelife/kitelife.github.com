<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>An Amateur Alchemist's Adventure</title>
    <link>https://dirtysalt.github.io/html/blogs.html</link>
    <description></description>
    <generator>site rss maker</generator>
    <language>zh</language>
    <lastBuildDate>2024-11-14T18:15:53</lastBuildDate>
     
     <item>
      <title>网络文章@202411</title>
      <link>https://dirtysalt.github.io/html/readings-at-202411.html</link>
      <pubDate>202411</pubDate>
      <description>A deep look into our new massive multitenant architecture</description>
     </item>
     <item>
      <title>LC 3348. 最小可整除数位乘积 II</title>
      <link>https://dirtysalt.github.io/html/lc-3348-smallest-divisible-digit-product-ii.html</link>
      <pubDate>202411</pubDate>
      <description>https://leetcode.cn/problems/smallest-divisible-digit-product-ii/description/</description>
     </item>
     <item>
      <title>LC 3347. 执行操作后元素的最高频率 II</title>
      <link>https://dirtysalt.github.io/html/lc-3337-maximum-frequency-of-an-element-after-performing-operations-ii.html</link>
      <pubDate>202411</pubDate>
      <description>https://leetcode.cn/problems/maximum-frequency-of-an-element-after-performing-operations-ii/description/</description>
     </item>
     <item>
      <title>抽象者劳心</title>
      <link>https://dirtysalt.github.io/html/the-mental-burden-of-the-abstractor.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2018年合集</description>
     </item>
     <item>
      <title>论写作的六大好处和一个坏处</title>
      <link>https://dirtysalt.github.io/html/six-benefits-and-one-drawback-of-writing.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2018年合集</description>
     </item>
     <item>
      <title>论"目标导向"和"过程导向"</title>
      <link>https://dirtysalt.github.io/html/goal-oriented-vs-process-oriented.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2018年合集</description>
     </item>
     <item>
      <title>论决策机制和纠错成本</title>
      <link>https://dirtysalt.github.io/html/decision-making-and-error-correction-costs.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>从品牌和应用场景的思维模型看比特币</title>
      <link>https://dirtysalt.github.io/html/bitcoin-through-brand-and-use-case-models.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>Uber 上市会引爆硅谷的泡沫破灭吗?</title>
      <link>https://dirtysalt.github.io/html/will-uber-ipo-burst-silicon-valley-bubble.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>重要的东西，往往是看不见的</title>
      <link>https://dirtysalt.github.io/html/important-things-are-often-invisible.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>成功的关键等于网络</title>
      <link>https://dirtysalt.github.io/html/network-as-the-key-to-success.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2019合集</description>
     </item>
     <item>
      <title>活下来就好及时出场就好</title>
      <link>https://dirtysalt.github.io/html/surviving-and-showing-up-on-time.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>每年阅读500本书</title>
      <link>https://dirtysalt.github.io/html/reading-500-books-a-year.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>为什么人们不断预言摩尔定律会死掉</title>
      <link>https://dirtysalt.github.io/html/why-people-keep-predicting-moores-law-will-end.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>出钱最多的视角才是上帝视角</title>
      <link>https://dirtysalt.github.io/html/highest-investor-perspective-as-god-view.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>抛弃对这个世界的一厢情愿</title>
      <link>https://dirtysalt.github.io/html/letting-go-of-idealism-towards-the-world.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>创新扩散的理论模型和误区</title>
      <link>https://dirtysalt.github.io/html/innovation-diffusion-theory-models-and-pitfalls.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2020年合集</description>
     </item>
     <item>
      <title>LC 3337. 字符串转换后的长度 II</title>
      <link>https://dirtysalt.github.io/html/lc-3337-total-characters-in-string-after-transformations-ii.html</link>
      <pubDate>202410</pubDate>
      <description>https://leetcode.cn/problems/total-characters-in-string-after-transformations-ii/description/</description>
     </item>
     <item>
      <title>LC 3336. 最大公约数相等的子序列数量</title>
      <link>https://dirtysalt.github.io/html/lc-3336-find-the-number-of-subsequences-with-equal-gcd.html</link>
      <pubDate>202410</pubDate>
      <description>https://leetcode.cn/problems/find-the-number-of-subsequences-with-equal-gcd/description/</description>
     </item>
     <item>
      <title>论投资高成长垄断型资产的八个误区</title>
      <link>https://dirtysalt.github.io/html/8-mistakes-of-investing-high-tech-company.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2021合集</description>
     </item>
     <item>
      <title>幸福来自全面复合增长</title>
      <link>https://dirtysalt.github.io/html/happiness-comes-from-comprehensive-and-compounded-growth.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2021合集</description>
     </item>
     <item>
      <title>关于间歇性断食</title>
      <link>https://dirtysalt.github.io/html/about-intermittent-fasting.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2021合集</description>
     </item>
     <item>
      <title>权利和垄断演化机制</title>
      <link>https://dirtysalt.github.io/html/power-and-monopoly-internals.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2022合集</description>
     </item>
     <item>
      <title>做题家和出题家</title>
      <link>https://dirtysalt.github.io/html/problem-solver-and-setter.html</link>
      <pubDate>202410</pubDate>
      <description>from 硅谷王川公号2022合集</description>
     </item>
     <item>
      <title>BigLake BigQuery’s Evolution toward a Multi-Cloud Lakehouse</title>
      <link>https://dirtysalt.github.io/html/biglake-bigquery-evolution-toward-a-multi-cloud-lakehouse.html</link>
      <pubDate>202410</pubDate>
      <description>如何将bigquery做到支持multi-cloud以及lakehouse. multi-cloud这个依赖于文章里面提到的omni架构，主要是解决multi-cloud适配问题：部署，安全，数据增量传输等等。而lakehouse则是文章里面提到的biglake架构，包括具体两个技术分别是biglake managed tables(for open-source table format)和biglake object tables(for AI/ML). 因为我对multi-cloud也不是很了解，所以主要是看怎么支持lakehouse的，但是multi-cloud看上去细节也是蛮多的。</description>
     </item>
     <item>
      <title>Life Lessons from the First Half-Century of My Career</title>
      <link>https://dirtysalt.github.io/html/life-lessons-from-the-first-half-century-of-my-career.html</link>
      <pubDate>202410</pubDate>
      <description>Life Lessons from the First Half-Century of My Career – Communications of the ACM</description>
     </item>
     <item>
      <title>Measuring your system’s performance using software (Go edition)</title>
      <link>https://dirtysalt.github.io/html/measure-your-system-performance-using-software-go-edition.html</link>
      <pubDate>202410</pubDate>
      <description>https://lemire.me/blog/2024/03/17/measuring-your-systems-performance-using-software-go-edition/?continueFlag=6e2109ebedef4e4aef083a29820ed2a3</description>
     </item>
     <item>
      <title>关于网络安全学习的合集</title>
      <link>https://dirtysalt.github.io/html/collection-of-advices-how-to-learn-security.html</link>
      <pubDate>202410</pubDate>
      <description>https://weibo.com/1401527553/Idpdy9wfZ?pagetype=fav</description>
     </item>
     <item>
      <title>天涯被封几大神贴</title>
      <link>https://dirtysalt.github.io/html/something-rarely-unknown-for-self-development.html</link>
      <pubDate>202410</pubDate>
      <description>https://x.com/0xUnicorn/status/1829912276243210529</description>
     </item>
     <item>
      <title>Apache Arrow Theory &amp; Practice Explained</title>
      <link>https://dirtysalt.github.io/html/apache-arrow-theory-and-practice-explained.html</link>
      <pubDate>202410</pubDate>
      <description>(105) Apache Arrow: Theory &amp; Practice Explained // Apache Arrow Meetup 2017 - YouTube</description>
     </item>
     <item>
      <title>LC 3317. 安排活动的方案数</title>
      <link>https://dirtysalt.github.io/html/lc-3317-find-the-number-of-possible-ways-for-an-event.html</link>
      <pubDate>202410</pubDate>
      <description>https://leetcode.cn/problems/find-the-number-of-possible-ways-for-an-event/description/</description>
     </item>
     <item>
      <title>write coroutine code using boost context</title>
      <link>https://dirtysalt.github.io/html/write-coroutine-using-boost-context.html</link>
      <pubDate>202410</pubDate>
      <description>https://www.boost.org/doc/libs/1_84_0/libs/context/doc/html/context/overview.html</description>
     </item>
     <item>
      <title>What Modern NVMe Storage Can Do, And How To Exploit It</title>
      <link>https://dirtysalt.github.io/html/what-modern-nvme-storage-can-do-and-how-to-exploit-it.html</link>
      <pubDate>202410</pubDate>
      <description>vldb2023. 文章讨论如何设计OLTP可以充分利用nvme ssd array. 按照文章里面给出的配置，一个机器上可以挂8个nvme ssd, 然后每个ssd可以达到1MIOPS, 总量大约是12.5M IOPS. 在这样的SSD阵列下面充分利用IO，需要做哪些事情以及应该如何设计系统，并且回答下面这几个问题：</description>
     </item>
     <item>
      <title>What Goes Around Comes Around, And Around</title>
      <link>https://dirtysalt.github.io/html/what-goes-around-comes-around-and-around.html</link>
      <pubDate>202410</pubDate>
      <description>sigmod2024年的回顾性文章，回顾了过去20年数据库的变化，以及对现在数据库行业和技术的分析和预测。从数据库的数据模型，以及技术和应用两个方面做了点评。最后两个作者还希望自己可以活着，或者是out on bail, 在2044年写篇回顾过去20年的文章</description>
     </item>
     <item>
      <title>网络文章@202410</title>
      <link>https://dirtysalt.github.io/html/readings-at-202410.html</link>
      <pubDate>202410</pubDate>
      <description>Databricks 与 Snowflake：2024 年完整比较 |通过同步计算 |同步计算|中等的 — Databricks vs Snowflake: A Complete 2024 Comparison | by Sync Computing | Sync Computing | Medium</description>
     </item>
     <item>
      <title>Tidy Tuples and Flying Start Fast Compilation and Fast Execution of Relational Queries in Umbra</title>
      <link>https://dirtysalt.github.io/html/tidy-tuples-and-flying-start-fast-compilation-and-execution-in-umbra.html</link>
      <pubDate>202410</pubDate>
      <description>怎么给Umbra设计更快的JIT执行引擎。tidy tuples是code generation framework, flying start是fast jit compiler. 看了个大概，里面细节许多，好多东西也没有完全看懂。tidy tuples的亮点就是有一种层次化框架的方法来给db engine来生成代码。生成的中间代码是umbra IR. 这个IR可以说是专门给DB engine设计的，并且是memory efficient representation. flying start则是相比llvm jit编译时间更短的引擎（但是代码效率就没有那么高），其中最大的优势还是简化了代码生成逻辑和直接生成x86代码。</description>
     </item>
     <item>
      <title>ClickHouse - Lightning Fast Analytics for Everyone</title>
      <link>https://dirtysalt.github.io/html/clickhouse-lightning-fast-analytics-for-everyone.html</link>
      <pubDate>202410</pubDate>
      <description>CK主要是面向快速数据分析这个场景，假设大量数据写入主要是追加，基本上没有更新和删除操作，也没有schema change这样的操作(文章里面好像还没有说到schema change相关内容)。在事务上做的比较拉胯，可能会读取到过期数据以及一半数据，甚至写入返回也不保证完全落盘。感觉CK这些人对查询分析非常有兴趣，对数据事务完全没有兴趣，估计会把客户给搞惨。</description>
     </item>
     <item>
      <title>SingleStore-V An Integrated Vector Database System in SingleStore</title>
      <link>https://dirtysalt.github.io/html/singlestorev-an-integrated-vector-database-system-in-singlestore.html</link>
      <pubDate>202410</pubDate>
      <description>如何把vector search实现在通用数据库里面去，实现起来有几个问题：</description>
     </item>
     <item>
      <title>The Art of Latency Hiding in Modern Database Engines</title>
      <link>https://dirtysalt.github.io/html/the-art-of-latency-hiding-in-modern-database-engines.html</link>
      <pubDate>202410</pubDate>
      <description>针对现代OLTP数据库系统的改进来降低延迟：</description>
     </item>
     <item>
      <title>JSON Tiles Fast Analytics on Semi-Structured Data</title>
      <link>https://dirtysalt.github.io/html/json-tiles-fast-analytics-on-semi-structured-data.html</link>
      <pubDate>202410</pubDate>
      <description>这篇文章主要讨论怎么来优化半结构化数据尤其是json data的访问，尤其是如何透明地加速这些数据的访问。文章提出的思路就是json tiles: 对json进行分类，将某一类(key paths完全相同的)json放置在一起，然后将这些key paths对应的columns来做物化(物化列)。对于没有办法物化的部分，那么按照jsonb(binary format) 来来存储。这个东西涉及面比较广，里面细节也比较多。</description>
     </item>
     <item>
      <title>字符串两种前缀算法(z和kmp)</title>
      <link>https://dirtysalt.github.io/html/two-string-prefix-algorithms.html</link>
      <pubDate>202409</pubDate>
      <description>KMP字符串是数据结构课本上教过的，其实就是类似某种DP算法： `dp[i] = sz` 表示 `s[i-sz..i] = s[0..sz]` 基于KMP算法可以扩展出AC自动机算法：基于BFS算法来构建这个dp, 在AC里面这个dp叫做fail指针。在KMP里面也可以把这个叫做fail指针。KMP算法的好处就是可以只针对pattern做index, 这个和后面Z函数形成对比：Z函数如果要求解前缀的话需要同时对hay和needle同时做索引。</description>
     </item>
     <item>
      <title>What every systems programmer should know about concurrency</title>
      <link>https://dirtysalt.github.io/html/what-every-system-programmer-should-know-about-concurrency.html</link>
      <pubDate>202409</pubDate>
      <description>文章里面讲到了一系列并发/同步/锁的基础知识：为什么需要memory barrier, memory order底层语义是什么样的，现在硬件上做了那些变化来简化并发编程等等。</description>
     </item>
     <item>
      <title>PilotScope Steering Databases with Machine Learning Drivers</title>
      <link>https://dirtysalt.github.io/html/pilotscope-steering-databases-with-machine-learning-drivers.html</link>
      <pubDate>202409</pubDate>
      <description>这个系统的目的是要解决AI4DB的工程障碍：让ML和DB developer工作可以解耦，并且使得user可以更容易地使用AI4DB.</description>
     </item>
     <item>
      <title>SCOPE Easy and Efficient Parallel Processing of Massive Data Sets</title>
      <link>https://dirtysalt.github.io/html/scope-easy-and-efficient-prallel-processing-of-massive-data-sets.html</link>
      <pubDate>202409</pubDate>
      <description>vldb2008. 年头有点久，现在看起来有点恍惚的感觉：SCOPE基本上就是SQL，然后把SQL编译成为Dyrad(MS分布式计算平台)的program. 那个年代大家受MapReduce影响比较大。现在看来SCOPE的开源系统就是Spark SQL, stage by stage执行方式，整个Plan也是变成了DAG来执行，不同的是Spark SQL完全使用了数据库已有的查询优化技术。</description>
     </item>
     <item>
      <title>AI Meets Database- AI4DB and DB4AI</title>
      <link>https://dirtysalt.github.io/html/ai-meets-database-ai4db-db4fi-tutorial-track-paper.html</link>
      <pubDate>202409</pubDate>
      <description>sigmod2021 这篇文章主要讲AI和DB之间怎么结合，AI可以为DB做些什么，DB可以为AI做些什么。我自己的感觉是，似乎DB可以为AI做的事情并不多，DB是一个很好数据管理入口，可以更好地利用AI模型。而AI模型可以为DB设计和优化打开许多的空间。文章最后将了一下两者之间应该怎么做co-optimization.</description>
     </item>
     <item>
      <title>Presto's History-based Query Optimizer</title>
      <link>https://dirtysalt.github.io/html/prestos-history-based-query-optimizer.html</link>
      <pubDate>202409</pubDate>
      <description>presto如何使用历史查询来收集统计信息，以此来改进未来plan的执行计划，这个东西就叫做history-based query optimizer(HBO). 所以目前我还知道的有cbo(cost-based query optimizer)和LBO(learned-based).</description>
     </item>
     <item>
      <title>Two Birds With One Stone Designing a Hybrid Cloud Storage Engine for HTAP</title>
      <link>https://dirtysalt.github.io/html/two-birds-with-one-stone-designing-a-hybrid-cloud-storage-engine-for-htap.html</link>
      <pubDate>202409</pubDate>
      <description>文章名字是一石二鸟？TUM在VLDB2024发的论文，将怎么给HTAP构建混合基于云的存储引擎。TUM喜欢在技术细节上打磨，细节上做的比较深入，对于我这样只想看看热闹的人会觉得有点累。不知道那些去copy TUM这些系统的工作者感觉怎么样。</description>
     </item>
     <item>
      <title>Databases Unbound Querying All of the World’s Bytes with AI</title>
      <link>https://dirtysalt.github.io/html/database-unbound-querying-all-of-the-worlds-bytes-with-ai.html</link>
      <pubDate>202409</pubDate>
      <description>这篇文章主要展望一下，和AI结合之后，Database应该需要被什么样的能力，以及技术上可能会有什么挑战。文章后面作者给了两个系统：VAAS和Palimpzest. 其中VAAS是一个video检索系统，通过自然语言NL描述需求，然后系统会分解任务并且找到最优的执行算法。而Palimpzest则是一个python programming framework, 描述了和AI（尤其是LLM）结合之后应该提供的编程接口。</description>
     </item>
     <item>
      <title>LeanStore A High-Performance Storage Engine for NVMe SSDs</title>
      <link>https://dirtysalt.github.io/html/lean-a-high-performance-storage-engine-for-nvme-ssds.html</link>
      <pubDate>202409</pubDate>
      <description>TUM在这个系统上做过许多改进和实验，作者做了个回顾哪些技术是有效的哪些是无效的，并且做了说明和分析。估计在这个系统上获得了许多经验，值得整理一下。</description>
     </item>
     <item>
      <title>Portfolio versus resume</title>
      <link>https://dirtysalt.github.io/html/portfolio-versus-resume.html</link>
      <pubDate>202409</pubDate>
      <description>What every computer science major should know</description>
     </item>
     <item>
      <title>Neo A Learned Query Optimizer</title>
      <link>https://dirtysalt.github.io/html/neo-a-learned-query-optimizer.html</link>
      <pubDate>202409</pubDate>
      <description>怎么实现一个可以自己学习的query optimizer. 大致思路是：</description>
     </item>
     <item>
      <title>Adaptive and Robust Query Execution for Lakehouses at Scale</title>
      <link>https://dirtysalt.github.io/html/adaptive-and-robust-query-execution-for-lakehouse-at-scale.html</link>
      <pubDate>202409</pubDate>
      <description>文章开头说到了为什么要在lakehouse上做这种adaptive策略，这个的确是datalake的痛点，其中几点对warehouse来说不是问题：</description>
     </item>
     <item>
      <title>BOSS - An Architecture for Database Kernel Composition</title>
      <link>https://dirtysalt.github.io/html/boss-an-arch-for-db-kernel-composition.html</link>
      <pubDate>202409</pubDate>
      <description>文章里面这个PQE(partial query evaluation)是重点，其实是将整个执行计划不断地在每个engine之间做partial evaluation, 直到最后产生结果。比如GPU比较适合做没有分支的计算，CPU适合做有分支的计算，StorageEngine则适合做存取数据以及encode/decode等工作。</description>
     </item>
     <item>
      <title>LC 3292. 形成目标字符串需要的最少字符串数 II</title>
      <link>https://dirtysalt.github.io/html/lc-3292-minimum-number-of-valid-strings-to-form-target-ii.html</link>
      <pubDate>202409</pubDate>
      <description>这题看了题解 https://leetcode.cn/problems/minimum-number-of-valid-strings-to-form-target-ii/solutions/2917929/ac-zi-dong-ji-pythonjavacgo-by-endlessch-hcqk/ 之前没有写过AC自动机，按照题解给的链接看了一下OI Wiki上的内容，大致搞清楚了AC自动机怎么写。这题用AC自动机还有一个前提就是尽可能匹配最长的前缀，如果有了这个特性之后就是一个DP算法了，最重要的就是知道当前位置可以匹配的最长前缀是多少。</description>
     </item>
     <item>
      <title>阿里云新加坡机房火灾</title>
      <link>https://dirtysalt.github.io/html/aliyun-singapore-region-fire-disaster.html</link>
      <pubDate>202409</pubDate>
      <description>https://status.alibabacloud.com/#/eventDetail?eventId=21</description>
     </item>
     <item>
      <title>网络文章@202409</title>
      <link>https://dirtysalt.github.io/html/readings-at-202409.html</link>
      <pubDate>202409</pubDate>
      <description>惨痛的教训 — The Bitter Lesson</description>
     </item>
     <item>
      <title>LC 3277. 查询子数组最大异或值</title>
      <link>https://dirtysalt.github.io/html/lc-3277-maximum-xor-score-subarray-queries.html</link>
      <pubDate>202409</pubDate>
      <description>https://leetcode.cn/problems/maximum-xor-score-subarray-queries/description/</description>
     </item>
     <item>
      <title>LC 3276. 选择矩阵中单元格的最大得分</title>
      <link>https://dirtysalt.github.io/html/lc-3276-select-cells-in-grid-with-maximum-score.html</link>
      <pubDate>202409</pubDate>
      <description>https://leetcode.cn/problems/select-cells-in-grid-with-maximum-score/description/</description>
     </item>
     <item>
      <title>LC 3273. 对 Bob 造成的最少伤害</title>
      <link>https://dirtysalt.github.io/html/lc-3273-minimum-amount-of-damage-dealt-to-bob.html</link>
      <pubDate>202409</pubDate>
      <description>https://leetcode.cn/problems/minimum-amount-of-damage-dealt-to-bob/description/</description>
     </item>
     <item>
      <title>LC 3272. 统计好整数的数目</title>
      <link>https://dirtysalt.github.io/html/lc-3272-find-the-count-of-good-integers.html</link>
      <pubDate>202409</pubDate>
      <description>https://leetcode.cn/problems/find-the-count-of-good-integers/description/</description>
     </item>
     <item>
      <title>LC 3261. 统计满足 K 约束的子字符串数量 II</title>
      <link>https://dirtysalt.github.io/html/lc-3261-count-substrings-that-satisfy-k-constraint-ii.html</link>
      <pubDate>202408</pubDate>
      <description>https://leetcode.cn/problems/count-substrings-that-satisfy-k-constraint-ii/description/</description>
     </item>
     <item>
      <title>LC 3257. 放三个车的价值之和最大 II</title>
      <link>https://dirtysalt.github.io/html/lc-3257-maximum-value-sum-by-placing-three-rooks-ii.html</link>
      <pubDate>202408</pubDate>
      <description>https://leetcode.cn/problems/maximum-value-sum-by-placing-three-rooks-ii/description/</description>
     </item>
     <item>
      <title>The Age of AI by Eric Schdmit</title>
      <link>https://dirtysalt.github.io/html/the-age-of-ai-eric-schdmit.html</link>
      <pubDate>202408</pubDate>
      <description>transcripts/Stanford_ECON295⧸CS323_I_2024_I_The_Age_of_AI,_Eric_Schmidt.txt at main · ociubotaru/transcripts</description>
     </item>
     <item>
      <title>LC 3235. 判断矩形的两个角落是否可达</title>
      <link>https://dirtysalt.github.io/html/lc-3235-check-if-the-rectangle-corner-is-reachable.html</link>
      <pubDate>202407</pubDate>
      <description>https://leetcode.cn/problems/check-if-the-rectangle-corner-is-reachable/description/</description>
     </item>
     <item>
      <title>LC 3234. 统计 1 显著的字符串的数量</title>
      <link>https://dirtysalt.github.io/html/lc-3234-count-the-number-of-substrings-with-dominant-ones.html</link>
      <pubDate>202407</pubDate>
      <description>https://leetcode.cn/problems/count-the-number-of-substrings-with-dominant-ones/description/</description>
     </item>
     <item>
      <title>JVM print assembly code</title>
      <link>https://dirtysalt.github.io/html/jvm-print-assembly-code.html</link>
      <pubDate>202407</pubDate>
      <description>需要反汇编插件，不然看到的就是二进制代码了。hsdis HotSpot Disassembly Plugin Downloads</description>
     </item>
     <item>
      <title>Efficiency Tips for Engineers (From An AI Researcher + Stanford PhD)</title>
      <link>https://dirtysalt.github.io/html/efficiency-tips-for-engineers.html</link>
      <pubDate>202407</pubDate>
      <description>(8) Efficiency Tips for Engineers (From An AI Researcher + Stanford PhD) - YouTube</description>
     </item>
     <item>
      <title>生命3.0</title>
      <link>https://dirtysalt.github.io/html/life-3.0.html</link>
      <pubDate>202407</pubDate>
      <description>Max Tegmark » MIT Physics https://physics.mit.edu/faculty/max-tegmark/</description>
     </item>
     <item>
      <title>网络文章@202407</title>
      <link>https://dirtysalt.github.io/html/readings-at-202407.html</link>
      <pubDate>202407</pubDate>
      <description>Apache Iceberg Z-Ordering: Performance Boost</description>
     </item>
     <item>
      <title>LC 100318. 合并两棵树后的最小直径</title>
      <link>https://dirtysalt.github.io/html/lc-100318-find-minimum-diameter-after-merging-two-trees.html</link>
      <pubDate>202406</pubDate>
      <description>https://leetcode.cn/problems/find-minimum-diameter-after-merging-two-trees/description/</description>
     </item>
     <item>
      <title>网络文章@202406</title>
      <link>https://dirtysalt.github.io/html/readings-at-202406.html</link>
      <pubDate>202406</pubDate>
      <description>SpaceX 对复杂系统工程的启发</description>
     </item>
     <item>
      <title>LC 100333. 统计逆序对的数目</title>
      <link>https://dirtysalt.github.io/html/lc-100333-count-the-number-of-inversions.html</link>
      <pubDate>202406</pubDate>
      <description>https://leetcode.cn/problems/count-the-number-of-inversions/description/</description>
     </item>
     <item>
      <title>LC 100327. 求出最长好子序列 II</title>
      <link>https://dirtysalt.github.io/html/lc-100327-find-the-maximum-length-of-a-good-subsequence-ii.html</link>
      <pubDate>202406</pubDate>
      <description>https://leetcode.cn/problems/find-the-maximum-length-of-a-good-subsequence-ii/description/</description>
     </item>
     <item>
      <title>LC 100320. 执行操作可获得的最大总奖励 II</title>
      <link>https://dirtysalt.github.io/html/lc-100320-maximum-total-reward-using-operations-ii.html</link>
      <pubDate>202406</pubDate>
      <description>https://leetcode.cn/problems/maximum-total-reward-using-operations-ii/description/</description>
     </item>
     <item>
      <title>孩子的大脑</title>
      <link>https://dirtysalt.github.io/html/brain-of-the-child.html</link>
      <pubDate>202406</pubDate>
      <description>孩子的大脑 (豆瓣)</description>
     </item>
     <item>
      <title>LC 100306. 不包含相邻元素的子序列的最大和</title>
      <link>https://dirtysalt.github.io/html/lc-100306-maximum-sum-of-subsequence-with-non-adjacent-elements.html</link>
      <pubDate>202405</pubDate>
      <description>https://leetcode.cn/problems/maximum-sum-of-subsequence-with-non-adjacent-elements/description/</description>
     </item>
     <item>
      <title>LC 100321. 优质数对的总数 II</title>
      <link>https://dirtysalt.github.io/html/lc-100321-find-the-number-of-good-pairs-ii.html</link>
      <pubDate>202405</pubDate>
      <description>https://leetcode.cn/problems/find-the-number-of-good-pairs-ii/description/</description>
     </item>
     <item>
      <title>LC 100314. 物块放置查询</title>
      <link>https://dirtysalt.github.io/html/lc-100314-block-placement-queries.html</link>
      <pubDate>202405</pubDate>
      <description>https://leetcode.cn/problems/block-placement-queries/description/</description>
     </item>
     <item>
      <title>LC 100312. 找出分数最低的排列</title>
      <link>https://dirtysalt.github.io/html/lc-100312-find-the-minimum-cost-array-permutation.html</link>
      <pubDate>202405</pubDate>
      <description>https://leetcode.cn/problems/find-the-minimum-cost-array-permutation/description/</description>
     </item>
     <item>
      <title>The Gluten Open-Source Software Project</title>
      <link>https://dirtysalt.github.io/html/the-gluten-open-source-project.html</link>
      <pubDate>202405</pubDate>
      <description>这个项目思路和databricks photon差不多，把spark某些算子通过JNI的方式替换成为C++实现。另外一种思路则是velox/presto, 是直接把presto里面执行引擎部分使用C++重写，其中执行引擎部分作为单独的服务存在。</description>
     </item>
     <item>
      <title>Dremel A Decade of Interactive SQL Analysis at Web Scale</title>
      <link>https://dirtysalt.github.io/html/dremel-a-decade-of-interactive-sql-analysis-at-web-scale.html</link>
      <pubDate>202405</pubDate>
      <description>回顾过去10年Dremel对实时分析数据库的影响，主要有下面这些</description>
     </item>
     <item>
      <title>Integrating Deep Learning Frameworks into Main-Memory Databases</title>
      <link>https://dirtysalt.github.io/html/integrating-deep-learning-frameworks-into-main-memory-databases.html</link>
      <pubDate>202405</pubDate>
      <description>这篇文章主要说怎么把pytorch嵌入到umbra这个数据库里面去。里面有一段总结了目前把ML和DB结合起来的两种方法： a. 直接把从数据库中导出数据，讲究的就数据移动的便携性 b. 直接在DBMS里面调用ML Operator，讲究的就是和ML训练和预测的集成性。</description>
     </item>
     <item>
      <title>Self-Tuning Query Scheduling for Analytical Workloads</title>
      <link>https://dirtysalt.github.io/html/self-tuning-query-scheduling-for-analytical-workloads.html</link>
      <pubDate>202405</pubDate>
      <description>这篇文章主要讨论怎么进行自适应地进行查询调度：</description>
     </item>
     <item>
      <title>网络文章@202405</title>
      <link>https://dirtysalt.github.io/html/readings-at-202405.html</link>
      <pubDate>202405</pubDate>
      <description>揭穿 5 个顽固的系统性能神话 - JabPerf Corp — Debunking 5 Stubborn Systems Performance Myths - JabPerf Corp</description>
     </item>
     <item>
      <title>数据库公司质量管理问题</title>
      <link>https://dirtysalt.github.io/html/quality-questions-about-database-company.html</link>
      <pubDate>202404</pubDate>
      <description>是否会接受performance regression? 如果有某些优化在大量场景有positive, 但是某些case有regression如何处理和对待呢？ 如何处理因为外部系统造成的performance gression, 比如一段时间s3 bucket latency有明显增加或者是不稳定。</description>
     </item>
     <item>
      <title>LC 100293. 找出所有稳定的二进制数组 II</title>
      <link>https://dirtysalt.github.io/html/lc-100293-find-all-possible-stable-binary-arrays-ii.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/find-all-possible-stable-binary-arrays-ii/description/</description>
     </item>
     <item>
      <title>Snowflake产品堆栈</title>
      <link>https://dirtysalt.github.io/html/snowflake-product-stack.html</link>
      <pubDate>202404</pubDate>
      <description>Cortex</description>
     </item>
     <item>
      <title>DBX产品堆栈</title>
      <link>https://dirtysalt.github.io/html/databricks-product-stack.html</link>
      <pubDate>202404</pubDate>
      <description>https://docs.databricks.com/en/index.html</description>
     </item>
     <item>
      <title>CMUDB Talk on Photon</title>
      <link>https://dirtysalt.github.io/html/cmudb-talk-on-photon.html</link>
      <pubDate>202404</pubDate>
      <description>(S2024 #18 - Databricks Photon / Spark SQL (CMU Advanced Database Systems) - YouTube</description>
     </item>
     <item>
      <title>LC 100259. 划分数组得到最小的值之和</title>
      <link>https://dirtysalt.github.io/html/lc-100259-minimum-sum-of-values-by-dividing-array.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/minimum-sum-of-values-by-dividing-array/description/</description>
     </item>
     <item>
      <title>LC 100267. 单面值组合的第 K 小金额</title>
      <link>https://dirtysalt.github.io/html/lc-100267-kth-smallest-amount-with-single-denomination-combination.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/kth-smallest-amount-with-single-denomination-combination/description/</description>
     </item>
     <item>
      <title>网络文章@202404</title>
      <link>https://dirtysalt.github.io/html/reading-at-202404.html</link>
      <pubDate>202404</pubDate>
      <description>在中国做To B生意真是太苦了</description>
     </item>
     <item>
      <title>LC 3108. 带权图里旅途的最小代价</title>
      <link>https://dirtysalt.github.io/html/lc-3108-minimum-cost-walk-in-weighted-graph.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/minimum-cost-walk-in-weighted-graph/description/</description>
     </item>
     <item>
      <title>LC 100240. 最小化曼哈顿距离</title>
      <link>https://dirtysalt.github.io/html/lc-100240-minimize-manhattan-distances.html</link>
      <pubDate>202404</pubDate>
      <description>https://leetcode.cn/problems/minimize-manhattan-distances/description/</description>
     </item>
     <item>
      <title>LC 100241. 求出所有子序列的能量和未命名</title>
      <link>https://dirtysalt.github.io/html/lc-100241-find-the-sum-of-the-power-of-all-subsequences.html</link>
      <pubDate>202403</pubDate>
      <description>https://leetcode.cn/problems/find-the-sum-of-the-power-of-all-subsequences/description/</description>
     </item>
     <item>
      <title>LC 100249. 替换字符串中的问号使分数最小</title>
      <link>https://dirtysalt.github.io/html/lc-100249-replace-question-marks-in-string-to-minimize-its-value.html</link>
      <pubDate>202403</pubDate>
      <description>https://leetcode.cn/problems/replace-question-marks-in-string-to-minimize-its-value/description/</description>
     </item>
     <item>
      <title>(Almost) Every infrastructure decision I endorse or regret after 4 years running infrastructure at a startup</title>
      <link>https://dirtysalt.github.io/html/every-infrastructure-decision-i-endorse-or-regret-after-4-years-running-infrastructure-at-a-startup.html</link>
      <pubDate>202403</pubDate>
      <description>https://cep.dev/posts/every-infrastructure-decision-i-endorse-or-regret-after-4-years-running-infrastructure-at-a-startup/</description>
     </item>
     <item>
      <title>FoundationDB: A Distributed Unbundled Transactional Key Value Store</title>
      <link>https://dirtysalt.github.io/html/foudationdb-paper.html</link>
      <pubDate>202403</pubDate>
      <description>https://www.foundationdb.org/files/fdb-paper.pdf</description>
     </item>
     <item>
      <title>AOC2023-Day25 求解图的最小割</title>
      <link>https://dirtysalt.github.io/html/aoc2023-day25-graph-min-cut-karger.html</link>
      <pubDate>202402</pubDate>
      <description>aoc2023 day25 这题 https://adventofcode.com/2023/day/25</description>
     </item>
     <item>
      <title>Commit to competence in this coming year 致力于来年的能力</title>
      <link>https://dirtysalt.github.io/html/commit-to-competence-in-this-coming-year.html</link>
      <pubDate>202402</pubDate>
      <description>注：这篇文章写的非常好，我最近在读《庄子》，无用和有用之间其实都是人为界定的，但是人为的标准同时也在不断地变化中。现在看起来无用的东西，说不定未来会有用。所以做任何事情，如果可以抛开有用和无用的判断，只专注事情本身，把这件事情做到可以称为美的境界。</description>
     </item>
  </channel>
</rss>
