<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="339px" preserveAspectRatio="none" style="width:580px;height:339px;background:#FFFFFF;" version="1.1" viewBox="0 0 580 339" width="580px" zoomAndPan="magnify"><defs><filter height="300%" id="fzdeuzgu87z3g" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[fe5d82c58df5980df77e0bea44fb0f54]
class FilterPolicy--><rect codeLine="4" fill="#FEFECE" filter="url(#fzdeuzgu87z3g)" height="102" id="FilterPolicy" style="stroke:#A80036;stroke-width:1.5;" width="523" x="25" y="7"/><ellipse cx="244.75" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M241.5098,19.4692 L241.5098,17.5649 L248.021,17.5649 L248.021,19.4692 L245.8457,19.4692 L245.8457,26.5957 L248.021,26.5957 L248.021,28.5 L241.5098,28.5 L241.5098,26.5957 L243.6851,26.5957 L243.6851,19.4692 Z " fill="#000000"/><text fill="#000000" font-family="Albert Sans" font-size="15" font-style="italic" lengthAdjust="spacing" textLength="75" x="265.25" y="28.25">FilterPolicy</text><line style="stroke:#A80036;stroke-width:1.5;" x1="26" x2="547" y1="39" y2="39"/><line style="stroke:#A80036;stroke-width:1.5;" x1="26" x2="547" y1="47" y2="47"/><ellipse cx="36" cy="58" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="247" x="45" y="65.25">virtual const char* Name() const = 0</text><ellipse cx="36" cy="76" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="497" x="45" y="83.25">virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const = 0</text><ellipse cx="36" cy="94" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="494" x="45" y="101.25">virtual bool KeyMayMatch(const Slice&amp; key, const Slice&amp; filter) const = 0</text><!--MD5=[d77ac8f3f263c1d9be15beb71475d7ae]
class BloomFilterPolicy--><rect codeLine="10" fill="#FEFECE" filter="url(#fzdeuzgu87z3g)" height="156" id="BloomFilterPolicy" style="stroke:#A80036;stroke-width:1.5;" width="559" x="7" y="169"/><ellipse cx="222.75" cy="185" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M225.1675,190.1851 Q224.6548,190.4487 224.0908,190.5806 Q223.5269,190.7124 222.9043,190.7124 Q220.6924,190.7124 219.5278,189.2549 Q218.3633,187.7974 218.3633,185.0435 Q218.3633,182.2822 219.5278,180.8247 Q220.6924,179.3672 222.9043,179.3672 Q223.5269,179.3672 224.0981,179.499 Q224.6694,179.6309 225.1675,179.8945 L225.1675,182.2969 Q224.6108,181.7842 224.0872,181.5461 Q223.5635,181.3081 223.0068,181.3081 Q221.8203,181.3081 221.2161,182.2493 Q220.6118,183.1904 220.6118,185.0435 Q220.6118,186.8892 221.2161,187.8303 Q221.8203,188.7715 223.0068,188.7715 Q223.5635,188.7715 224.0872,188.5334 Q224.6108,188.2954 225.1675,187.7827 Z " fill="#000000"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="119" x="243.25" y="190.25">BloomFilterPolicy</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="565" y1="201" y2="201"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="209"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="138" x="27" y="219.25">size_t bits_per_key_</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="15" y="227"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="59" x="27" y="237.25">size_t k_</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="565" y1="245" y2="245"/><ellipse cx="18" cy="256" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="497" x="27" y="263.25">explicit BloomFilterPolicy(int bits_per_key) : bits_per_key_(bits_per_key)</text><ellipse cx="18" cy="274" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="235" x="27" y="281.25">const char* Name() const override</text><ellipse cx="18" cy="292" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="485" x="27" y="299.25">void CreateFilter(const Slice* keys, int n, std::string* dst) const override</text><ellipse cx="18" cy="310" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="Albert Sans" font-size="15" lengthAdjust="spacing" textLength="533" x="27" y="317.25">bool KeyMayMatch(const Slice&amp; key, const Slice&amp; bloom_filter) const override</text><!--MD5=[96eb0bca9d89dae49606f9a5f4e39362]
reverse link FilterPolicy to BloomFilterPolicy--><path codeLine="19" d="M286.5,130.21 C286.5,142.77 286.5,155.91 286.5,168.63 " fill="none" id="FilterPolicy-backto-BloomFilterPolicy" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="279.5,130.63,286.5,110.63,293.5,130.63,279.5,130.63" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[feddffed009261a98b923f1be06b61ad]
@startuml
skinparam defaultFontName "Albert Sans"
skinparam defaultFontSize 15
scale max 800 width
interface FilterPolicy {
+ virtual const char* Name() const = 0
+ virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const = 0
+ virtual bool KeyMayMatch(const Slice& key, const Slice& filter) const = 0
}

class BloomFilterPolicy {
+ explicit BloomFilterPolicy(int bits_per_key) : bits_per_key_(bits_per_key)
+ const char* Name() const override
+ void CreateFilter(const Slice* keys, int n, std::string* dst) const override
+ bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const override

- size_t bits_per_key_
- size_t k_
}
FilterPolicy <|- - BloomFilterPolicy
@enduml

PlantUML version 1.2021.12(Wed Oct 06 00:01:58 CST 2021)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: zh
Country: CN
--></g></svg>